{'date': '2024-04-15 06:59:09.444975+08:00', 'nodes': [{'title': '备案接入信息与实际接入信息不符', 'number': 66, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/66', 'createdAt': '2024-04-11T07:09:00Z', 'lastEditedAt': '2024-04-11T07:11:25Z', 'updatedAt': '2024-04-11T07:11:25Z', 'body': '在阿里云注册且完成备案的域名，前两天收到了信息：如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。\r\n\r\n<!-- more -->\r\n\r\n> 如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的正常访问；若您的备案域名解析IP地址已指向阿里云备案的内地节点（不含香港）服务器，且保持正常访问，请忽略此邮件。\r\n\r\n![beian-weiyan-cc.webp](https://static.weiyan.tech/2024/04/beian-weiyan-cc.webp)\r\n\r\n目前，参考知乎《[阿里云服务器备案域名会掉吗](https://zhuanlan.zhihu.com/p/516077564)》的方法 —— 先把目前 `weiyan.cc` 下的一到两个子域名增加一个 A 记录绑定到阿里云的 ECS 公网 IP，主域名继续按目前的要求通过 CNAME 绑定 [weiyan.netlify.app](https://weiyan.netlify.app)。\r\n\r\n再看看后续是否有影响。', 'bodyText': '在阿里云注册且完成备案的域名，前两天收到了信息：如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。\n\n\n如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的正常访问；若您的备案域名解析IP地址已指向阿里云备案的内地节点（不含香港）服务器，且保持正常访问，请忽略此邮件。\n\n\n目前，参考知乎《阿里云服务器备案域名会掉吗》的方法 —— 先把目前 weiyan.cc 下的一到两个子域名增加一个 A 记录绑定到阿里云的 ECS 公网 IP，主域名继续按目前的要求通过 CNAME 绑定 weiyan.netlify.app。\n再看看后续是否有影响。', 'bodyHTML': '<p dir="auto">在阿里云注册且完成备案的域名，前两天收到了信息：如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。</p>\n\n<blockquote>\n<p dir="auto">如您的网站备案还要继续使用，请您务必于2024-04-18 09:05:39之前设置解析指向阿里云内地服务器且恢复该网站在阿里云内地节点服务器的正常访问。若在规定时间内未完成整改，可能会导致备案信息被取消接入或被注销，影响您网站的正常访问；若您的备案域名解析IP地址已指向阿里云备案的内地节点（不含香港）服务器，且保持正常访问，请忽略此邮件。</p>\n</blockquote>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/66c1997b706352a5814932d0f6f94695bf55cd7ce54a4a487505e26b9a784304/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f626569616e2d77656979616e2d63632e77656270"><img src="https://camo.githubusercontent.com/66c1997b706352a5814932d0f6f94695bf55cd7ce54a4a487505e26b9a784304/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f626569616e2d77656979616e2d63632e77656270" alt="beian-weiyan-cc.webp" data-canonical-src="https://static.weiyan.tech/2024/04/beian-weiyan-cc.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">目前，参考知乎《<a href="https://zhuanlan.zhihu.com/p/516077564" rel="nofollow">阿里云服务器备案域名会掉吗</a>》的方法 —— 先把目前 <code class="notranslate">weiyan.cc</code> 下的一到两个子域名增加一个 A 记录绑定到阿里云的 ECS 公网 IP，主域名继续按目前的要求通过 CNAME 绑定 <a href="https://weiyan.netlify.app" rel="nofollow">weiyan.netlify.app</a>。</p>\n<p dir="auto">再看看后续是否有影响。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'RSS 订阅插件 mkdocs-rss-plugin 的一些问题', 'number': 65, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/65', 'createdAt': '2024-04-11T02:37:00Z', 'lastEditedAt': None, 'updatedAt': '2024-04-11T02:37:01Z', 'body': '聊一下 Mkdocs Material 的默认插件 [mkdocs-rss-plugin](https://github.com/Guts/mkdocs-rss-plugin) 在使用上的一些问题。\r\n\r\n<!-- more -->\r\n\r\n对于 blog 插件，默认的 RSS 里边提供的地址有一部分会默认为目录链接(例如 `category` 和 `archive`)，而非文章地址。\r\n\r\n![rss-item.webp](https://static.weiyan.tech/2024/04/rss-item.webp)\r\n\r\n针对这一种情况，需要使用 RSS 配置的 [`match_path`](https://guts.github.io/mkdocs-rss-plugin/configuration/#match_path-filter-pages-to-include-in-feed)，即可解决：\r\n\r\n```\r\nplugins:\r\n  - rss:\r\n      match_path: "(blog/posts|flinks|galaxy|message|note|readme|tech|yuque)/.*"\r\n      date_from_meta:\r\n        as_creation: date\r\n      categories:\r\n        - categories\r\n        - tags\r\n```\r\n', 'bodyText': '聊一下 Mkdocs Material 的默认插件 mkdocs-rss-plugin 在使用上的一些问题。\n\n对于 blog 插件，默认的 RSS 里边提供的地址有一部分会默认为目录链接(例如 category 和 archive)，而非文章地址。\n\n针对这一种情况，需要使用 RSS 配置的 match_path，即可解决：\nplugins:\n  - rss:\n      match_path: "(blog/posts|flinks|galaxy|message|note|readme|tech|yuque)/.*"\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags', 'bodyHTML': '<p dir="auto">聊一下 Mkdocs Material 的默认插件 <a href="https://github.com/Guts/mkdocs-rss-plugin">mkdocs-rss-plugin</a> 在使用上的一些问题。</p>\n\n<p dir="auto">对于 blog 插件，默认的 RSS 里边提供的地址有一部分会默认为目录链接(例如 <code class="notranslate">category</code> 和 <code class="notranslate">archive</code>)，而非文章地址。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c9e92e240697021e882c3ebda305f96b23b1a7e358ad98b533aec1a8eae1f945/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f7273732d6974656d2e77656270"><img src="https://camo.githubusercontent.com/c9e92e240697021e882c3ebda305f96b23b1a7e358ad98b533aec1a8eae1f945/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f7273732d6974656d2e77656270" alt="rss-item.webp" data-canonical-src="https://static.weiyan.tech/2024/04/rss-item.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">针对这一种情况，需要使用 RSS 配置的 <a href="https://guts.github.io/mkdocs-rss-plugin/configuration/#match_path-filter-pages-to-include-in-feed" rel="nofollow"><code class="notranslate">match_path</code></a>，即可解决：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="plugins:\n  - rss:\n      match_path: &quot;(blog/posts|flinks|galaxy|message|note|readme|tech|yuque)/.*&quot;\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags"><pre class="notranslate"><code class="notranslate">plugins:\n  - rss:\n      match_path: "(blog/posts|flinks|galaxy|message|note|readme|tech|yuque)/.*"\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags\n</code></pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': 'mkdocs'}]}, 'comments': {'nodes': []}}, {'title': '无趣的人', 'number': 64, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/64', 'createdAt': '2024-04-07T07:29:06Z', 'lastEditedAt': None, 'updatedAt': '2024-04-07T07:29:07Z', 'body': '有趣的灵魂万里挑一，好看的皮囊千篇一律。\r\n\r\n<!-- more -->\r\n\r\n活得通透的人 ，没有特别想维持的关系 ，也没有特别想要的东西 ，走近的人不抗拒 ，离开的人不强留 ，就连吃亏也懒得计较。\r\n\r\n从统计上来看，成年后还能重塑自我的人太罕见了。年纪越大就越相信命运，其中最大的一个原因就是理解人的改变之难。意图改变不如早早学会接纳。', 'bodyText': '有趣的灵魂万里挑一，好看的皮囊千篇一律。\n\n活得通透的人 ，没有特别想维持的关系 ，也没有特别想要的东西 ，走近的人不抗拒 ，离开的人不强留 ，就连吃亏也懒得计较。\n从统计上来看，成年后还能重塑自我的人太罕见了。年纪越大就越相信命运，其中最大的一个原因就是理解人的改变之难。意图改变不如早早学会接纳。', 'bodyHTML': '<p dir="auto">有趣的灵魂万里挑一，好看的皮囊千篇一律。</p>\n\n<p dir="auto">活得通透的人 ，没有特别想维持的关系 ，也没有特别想要的东西 ，走近的人不抗拒 ，离开的人不强留 ，就连吃亏也懒得计较。</p>\n<p dir="auto">从统计上来看，成年后还能重塑自我的人太罕见了。年纪越大就越相信命运，其中最大的一个原因就是理解人的改变之难。意图改变不如早早学会接纳。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '腾讯云 cos 也被盗刷了', 'number': 63, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/63', 'createdAt': '2024-03-29T07:07:37Z', 'lastEditedAt': '2024-04-03T01:31:55Z', 'updatedAt': '2024-04-03T01:31:56Z', 'body': '我的 [WebStack-Hugo](https://bioit.top/) 个人导航站点最开始用的是腾讯云的 cos 对象存储作为所有图片的存储和访问，在 2024 年 3 月底的时候收到腾讯云的通知说 200 万次的标准存储请求已经用掉了 180 多万次。\r\n\r\n<!-- more -->\r\n\r\n![cos-warning.webp](https://static.weiyan.tech/2024/03/cos-warning.webp)\r\n\r\n收到信息吓了一跳，心想我这一个小破网站不至于这么多的请求吧，肯定被攻击盗刷了。加上之前在网络上看到的阿里云/腾讯云对象存储被刷爆的新闻还历历在目，于是赶紧的上去腾讯云一看发现一天的读写请求居然达到了 25 万多次！\r\n\r\n![cos-y-requests](https://static.weiyan.tech/2024/03/cos-y-requests.webp)\r\n\r\n虽然之前一直设置了防盗链，但是一直允许着 **"空 referer"**，这无疑是一个巨大的漏洞，参考 《[COS被流量盗刷了](https://zhuanlan.zhihu.com/p/660308000)》 的经历，第一时间就把这个 **"空 referer"** 设置为了 **"拒绝"**，并开启了日志。\r\n\r\n果不其然，一段时间过后从生成的日志文件，发现了这样的一个网址：<https://123.wqydl.cn/>。\r\n![123-wqydl-get](https://static.weiyan.tech/2024/03/123-wqydl-get.webp)\r\n\r\n这个网站一直在请求获取个人 cos 内的 `/webstack/logos/default.webp` 这个图片！为了安全起见，又赶紧第一时间把这个网站加入了黑名单，并且把对应的 cos 权限设置成了 **"私有读写"**。\r\n\r\n但是从源源不断产生的日志可以看到这个恶心的网站还一直不依不饶在每隔几分钟就执行一堆读取请求！\r\n![get-requests-by-time.webp](https://static.weiyan.tech/2024/03/get-requests-by-time.webp)\r\n\r\n但幸运的是这些请求现在都 **"AccessDenied"** 了，但对它的一些后续可能的动作也很是好奇，在持续观察中。\r\n![cos-access-denied.webp](https://static.weiyan.tech/2024/03/cos-access-denied.webp)\r\n\r\n![cos-log.png](https://static.weiyan.tech/2024/03/cos-log.png)\r\n\r\n![cos-safe.png](https://static.weiyan.tech/2024/03/cos-safe.png)\r\n\r\n终于，第二天的晚上终于在他们的官网联系上了对应的客服，他们把相应的网站停掉后一切又回归正常。     \r\n![cos-package-free.webp](https://static.weiyan.tech/2024/04/cos-package-free.webp)\r\n\r\n最后，以此为鉴，希望大家在提供公共资源的时候擦亮眼睛，避免踩坑。', 'bodyText': '我的 WebStack-Hugo 个人导航站点最开始用的是腾讯云的 cos 对象存储作为所有图片的存储和访问，在 2024 年 3 月底的时候收到腾讯云的通知说 200 万次的标准存储请求已经用掉了 180 多万次。\n\n\n收到信息吓了一跳，心想我这一个小破网站不至于这么多的请求吧，肯定被攻击盗刷了。加上之前在网络上看到的阿里云/腾讯云对象存储被刷爆的新闻还历历在目，于是赶紧的上去腾讯云一看发现一天的读写请求居然达到了 25 万多次！\n\n虽然之前一直设置了防盗链，但是一直允许着 "空 referer"，这无疑是一个巨大的漏洞，参考 《COS被流量盗刷了》 的经历，第一时间就把这个 "空 referer" 设置为了 "拒绝"，并开启了日志。\n果不其然，一段时间过后从生成的日志文件，发现了这样的一个网址：https://123.wqydl.cn/。\n\n这个网站一直在请求获取个人 cos 内的 /webstack/logos/default.webp 这个图片！为了安全起见，又赶紧第一时间把这个网站加入了黑名单，并且把对应的 cos 权限设置成了 "私有读写"。\n但是从源源不断产生的日志可以看到这个恶心的网站还一直不依不饶在每隔几分钟就执行一堆读取请求！\n\n但幸运的是这些请求现在都 "AccessDenied" 了，但对它的一些后续可能的动作也很是好奇，在持续观察中。\n\n\n\n终于，第二天的晚上终于在他们的官网联系上了对应的客服，他们把相应的网站停掉后一切又回归正常。\n\n最后，以此为鉴，希望大家在提供公共资源的时候擦亮眼睛，避免踩坑。', 'bodyHTML': '<p dir="auto">我的 <a href="https://bioit.top/" rel="nofollow">WebStack-Hugo</a> 个人导航站点最开始用的是腾讯云的 cos 对象存储作为所有图片的存储和访问，在 2024 年 3 月底的时候收到腾讯云的通知说 200 万次的标准存储请求已经用掉了 180 多万次。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a61441b216a9f9c75199dda5a9be354accc47ffaeb2ef36581a284ec004cd049/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d7761726e696e672e77656270"><img src="https://camo.githubusercontent.com/a61441b216a9f9c75199dda5a9be354accc47ffaeb2ef36581a284ec004cd049/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d7761726e696e672e77656270" alt="cos-warning.webp" data-canonical-src="https://static.weiyan.tech/2024/03/cos-warning.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">收到信息吓了一跳，心想我这一个小破网站不至于这么多的请求吧，肯定被攻击盗刷了。加上之前在网络上看到的阿里云/腾讯云对象存储被刷爆的新闻还历历在目，于是赶紧的上去腾讯云一看发现一天的读写请求居然达到了 25 万多次！</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c2668ba1d12e11d59fbb4b2fc76846dd8c69760bb28bb4cc77b620b9bbc15ce1/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d792d72657175657374732e77656270"><img src="https://camo.githubusercontent.com/c2668ba1d12e11d59fbb4b2fc76846dd8c69760bb28bb4cc77b620b9bbc15ce1/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d792d72657175657374732e77656270" alt="cos-y-requests" data-canonical-src="https://static.weiyan.tech/2024/03/cos-y-requests.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">虽然之前一直设置了防盗链，但是一直允许着 <strong>"空 referer"</strong>，这无疑是一个巨大的漏洞，参考 《<a href="https://zhuanlan.zhihu.com/p/660308000" rel="nofollow">COS被流量盗刷了</a>》 的经历，第一时间就把这个 <strong>"空 referer"</strong> 设置为了 <strong>"拒绝"</strong>，并开启了日志。</p>\n<p dir="auto">果不其然，一段时间过后从生成的日志文件，发现了这样的一个网址：<a href="https://123.wqydl.cn/" rel="nofollow">https://123.wqydl.cn/</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d37bf8454f26629f228f73bbaee641ea749e8902b74a19a492bc0aac1b16e186/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f3132332d777179646c2d6765742e77656270"><img src="https://camo.githubusercontent.com/d37bf8454f26629f228f73bbaee641ea749e8902b74a19a492bc0aac1b16e186/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f3132332d777179646c2d6765742e77656270" alt="123-wqydl-get" data-canonical-src="https://static.weiyan.tech/2024/03/123-wqydl-get.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">这个网站一直在请求获取个人 cos 内的 <code class="notranslate">/webstack/logos/default.webp</code> 这个图片！为了安全起见，又赶紧第一时间把这个网站加入了黑名单，并且把对应的 cos 权限设置成了 <strong>"私有读写"</strong>。</p>\n<p dir="auto">但是从源源不断产生的日志可以看到这个恶心的网站还一直不依不饶在每隔几分钟就执行一堆读取请求！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ab69750c0582dd75b18aa529d3b0d74fbc77a341cb0a3d7195c83022f5c6f05d/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f6765742d72657175657374732d62792d74696d652e77656270"><img src="https://camo.githubusercontent.com/ab69750c0582dd75b18aa529d3b0d74fbc77a341cb0a3d7195c83022f5c6f05d/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f6765742d72657175657374732d62792d74696d652e77656270" alt="get-requests-by-time.webp" data-canonical-src="https://static.weiyan.tech/2024/03/get-requests-by-time.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">但幸运的是这些请求现在都 <strong>"AccessDenied"</strong> 了，但对它的一些后续可能的动作也很是好奇，在持续观察中。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/094fe05f9a4d5f9bddcd471e019d9fe943939807579f7d17709a2cc26cb34213/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d6163636573732d64656e6965642e77656270"><img src="https://camo.githubusercontent.com/094fe05f9a4d5f9bddcd471e019d9fe943939807579f7d17709a2cc26cb34213/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d6163636573732d64656e6965642e77656270" alt="cos-access-denied.webp" data-canonical-src="https://static.weiyan.tech/2024/03/cos-access-denied.webp" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c6e52f2fd98a85de22b6f02adcaa5bac86be514ada8bac3c504b30dc451ed6f5/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d6c6f672e706e67"><img src="https://camo.githubusercontent.com/c6e52f2fd98a85de22b6f02adcaa5bac86be514ada8bac3c504b30dc451ed6f5/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d6c6f672e706e67" alt="cos-log.png" data-canonical-src="https://static.weiyan.tech/2024/03/cos-log.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0ecefbc27e0984fd8aeea70da5b5691c5452da76eed83605533f3b60a56d70ae/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d736166652e706e67"><img src="https://camo.githubusercontent.com/0ecefbc27e0984fd8aeea70da5b5691c5452da76eed83605533f3b60a56d70ae/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30332f636f732d736166652e706e67" alt="cos-safe.png" data-canonical-src="https://static.weiyan.tech/2024/03/cos-safe.png" style="max-width: 100%;"></a></p>\n<p dir="auto">终于，第二天的晚上终于在他们的官网联系上了对应的客服，他们把相应的网站停掉后一切又回归正常。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ee2b6f56cd14f4e6a0dd19b0b3a5192d113836c4ccb1b19df5861134c019e331/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f636f732d7061636b6167652d667265652e77656270"><img src="https://camo.githubusercontent.com/ee2b6f56cd14f4e6a0dd19b0b3a5192d113836c4ccb1b19df5861134c019e331/68747470733a2f2f7374617469632e77656979616e2e746563682f323032342f30342f636f732d7061636b6167652d667265652e77656270" alt="cos-package-free.webp" data-canonical-src="https://static.weiyan.tech/2024/04/cos-package-free.webp" style="max-width: 100%;"></a></p>\n<p dir="auto">最后，以此为鉴，希望大家在提供公共资源的时候擦亮眼睛，避免踩坑。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '图床管理与使用', 'number': 62, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/62', 'createdAt': '2024-03-27T07:48:45Z', 'lastEditedAt': '2024-03-28T05:02:32Z', 'updatedAt': '2024-03-28T05:02:32Z', 'body': '随着博客和其他一些站点多了起来，日积月累的访问越来越觉得腾讯云 cos 和阿里云 oss 是远远不够的，于是开始想着寻找可以一劳永逸的图床管理和使用替代者。\r\n\r\n<!-- more -->\r\n\r\nGitHub 的图床虽然不错，但如果文件越来越多，终究不是一个很好的解决方案。\r\n\r\nCloudflare R2 目前看来是个不错的选项，但是图片的上传、删除和日常管理目前还没有找到一个比较顺手的工具。目前在用的一个 [Picx4R2](https://github.com/shenweiyan/Picx4R2/) 还有一些不太满意的地方，即上传的图片无法保留原始的文件名！—— 不过幸运的是借助百度文心一言终于把保留原始文件名的这个问题给解决了。', 'bodyText': '随着博客和其他一些站点多了起来，日积月累的访问越来越觉得腾讯云 cos 和阿里云 oss 是远远不够的，于是开始想着寻找可以一劳永逸的图床管理和使用替代者。\n\nGitHub 的图床虽然不错，但如果文件越来越多，终究不是一个很好的解决方案。\nCloudflare R2 目前看来是个不错的选项，但是图片的上传、删除和日常管理目前还没有找到一个比较顺手的工具。目前在用的一个 Picx4R2 还有一些不太满意的地方，即上传的图片无法保留原始的文件名！—— 不过幸运的是借助百度文心一言终于把保留原始文件名的这个问题给解决了。', 'bodyHTML': '<p dir="auto">随着博客和其他一些站点多了起来，日积月累的访问越来越觉得腾讯云 cos 和阿里云 oss 是远远不够的，于是开始想着寻找可以一劳永逸的图床管理和使用替代者。</p>\n\n<p dir="auto">GitHub 的图床虽然不错，但如果文件越来越多，终究不是一个很好的解决方案。</p>\n<p dir="auto">Cloudflare R2 目前看来是个不错的选项，但是图片的上传、删除和日常管理目前还没有找到一个比较顺手的工具。目前在用的一个 <a href="https://github.com/shenweiyan/Picx4R2/">Picx4R2</a> 还有一些不太满意的地方，即上传的图片无法保留原始的文件名！—— 不过幸运的是借助百度文心一言终于把保留原始文件名的这个问题给解决了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Python 里面没 if 也能用 else', 'number': 61, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/61', 'createdAt': '2024-03-21T01:47:26Z', 'lastEditedAt': '2024-03-22T01:21:34Z', 'updatedAt': '2024-03-22T01:21:34Z', 'body': '> 这是来自于 [Yang Zhou](https://twitter.com/YangZhou1993) 发表在 [Medium](https://medium.com/techtofreedom/beyond-if-else-leveraging-pythons-versatile-else-statements-9ac260dac102) 的一篇文章 《[Beyond If-Else: Leveraging Python’s Versatile “Else” Statements](https://medium.com/techtofreedom/beyond-if-else-leveraging-pythons-versatile-else-statements-9ac260dac102)》，作者觉得挺有意思的，拿过来简单翻译了一下在这里分享给大家。\r\n\r\n<!-- more -->\r\n\r\n当我们说到 "else"，必须先有 "if"。\r\n\r\n这对于许多编程语言来说都是正确的，但对于 Python 来说却不然。\r\n\r\nPython 的 else 语句比我们想象的更通用。\r\n\r\n从循环后的 "else" 到 try- except 块后的 "else"，本文将探讨 else 语句鲜为人知的功能。\r\n\r\n我们不一定需要在生产中使用这些技巧，尤其是当我们的同事还不知道它们时，但仅仅意识到它们的存在就可以让我们再次感受到 Python 的灵活性和多功能性。\r\n\r\n## 1. While-Else 结构\r\n\r\n在 Python 中， `while` 循环可以与 `else` 块配对。当且仅当循环正常完成时，`else` 块才会执行，这意味着它不会通过 `break` 语句终止。\r\n\r\n换句话说，如果 `while` 循环被 `break` 终止，则 `else` 块将不会被执行。\r\n```python\r\nleaders = ["Elon", "Tim", "Warren"]\r\ni = 0\r\nwhile i < len(leaders):\r\n    if leaders[i] == "Yang":\r\n        print("Yang is a leader!")\r\n        break\r\n    i += 1\r\nelse:\r\n    print("Not found Yang!")\r\n\r\n# Not found Yang!\r\n```\r\n\r\n如上面的示例所示， `while` 循环迭代 `leaders` 列表，搜索领导者 "Yang"。不幸的是，"Yang" 并不是该名单中真正的领导者。所以 `break` 语句没有被执行。因此，`else` 语句下的代码就被执行了。\r\n\r\n`else` 语句的这种意外用法使我们无需添加额外的标志变量来标记循环是否被破坏。这样我们的 Python 程序就可以精简一些了。\r\n\r\n## 2. 带有 For 循环的 Else 语句\r\n\r\nFor 循环和 `while` 循环是编程的孪生兄弟。如果我们可以在 while 循环中利用 else 语句的多功能性，那么毫无疑问它可以用于 for 循环。\r\n\r\n这个想法是完全相同的：      \r\n\r\n> The "else" block only executes when there is no break in the for loop.     \r\n> "else" 块仅在 for 循环中没有中断时执行。     \r\n\r\n让我们用 for 循环重写前面的示例：\r\n```python\r\nleaders = ["Elon", "Tim", "Warren"]\r\n\r\nfor i in leaders:\r\n    if i == "Yang":\r\n        print("Yang is a leader!")\r\n        break\r\nelse:\r\n    print("Not found Yang!")\r\n\r\n# Not found Yang!\r\n```\r\n\r\n代码更简洁了，不是吗？你能用其他编程语言做到这一点吗？\r\n\r\n## 3. 使用 Else 语句进行异常处理\r\n\r\n异常处理是编写健壮且无错误的代码的一项重要技术。\r\n\r\n在 Python 中，整个异常处理代码块的结构应该如下：\r\n```python\r\ntry:\r\n    # Code that might raise an exception\r\nexcept SomeException:\r\n    # Code that runs if the try block raised \'SomeException\'\r\nelse:\r\n    # Code that runs if the try block did NOT raise any exceptions\r\nfinally:\r\n    # Code that always runs no matter what, often for cleanup\r\n```\r\n\r\n除了 `try` 块之外，所有其他部分都是可选的。\r\n\r\n当 `try` 块未引发异常时， `else` 块就会执行。这是放置仅当 `try` 块成功且无异常时才运行的代码的好地方。这对于阐明代码的意图并防止 `except` 块意外捕获非常有用。\r\n\r\n例如，以下程序实现了一个非常简单的除法函数：\r\n```python\r\ndef divide(x, y):\r\n    try:\r\n        result = x / y\r\n    except ZeroDivisionError:\r\n        print("Error: Division by zero.")\r\n    else:\r\n        print(f"Result is {result}")\r\n    finally:\r\n        print("Executing finally clause.")\r\n```\r\n\r\n如果没有遇到 `ZeroDivisionError`，结果如下：\r\n\r\n```python\r\ndivide(2077, 1)\r\n# Result is 2077.0\r\n# Executing finally clause.\r\n```\r\n\r\n当然，如果满足定义的异常，则会打印相关的 `Error` 消息：\r\n```python\r\ndivide(2077, 0)\r\n# Error: Division by zero.\r\n# Executing finally clause.\r\n```\r\n\r\n## 要点总结\r\n\r\n在 Python 中，else 语句不一定位于 if 语句之后。\r\n\r\n它还有三个额外但鲜为人知的用途：     \r\n\r\n- while-else 循环     \r\n- for-else 循环     \r\n- 使用 else 块进行异常处理     \r\n\r\n但是，我不建议您在生产中频繁应用它们，因为使用鲜为人知的功能可能会降低可读性并使您的同事感到困惑。但理解并随意应用它们会给你的同事留下深刻的印象，并巩固你作为 "Python 大师" 的地位。 😎', 'bodyText': '这是来自于 Yang Zhou 发表在 Medium 的一篇文章 《Beyond If-Else: Leveraging Python’s Versatile “Else” Statements》，作者觉得挺有意思的，拿过来简单翻译了一下在这里分享给大家。\n\n\n当我们说到 "else"，必须先有 "if"。\n这对于许多编程语言来说都是正确的，但对于 Python 来说却不然。\nPython 的 else 语句比我们想象的更通用。\n从循环后的 "else" 到 try- except 块后的 "else"，本文将探讨 else 语句鲜为人知的功能。\n我们不一定需要在生产中使用这些技巧，尤其是当我们的同事还不知道它们时，但仅仅意识到它们的存在就可以让我们再次感受到 Python 的灵活性和多功能性。\n1. While-Else 结构\n在 Python 中， while 循环可以与 else 块配对。当且仅当循环正常完成时，else 块才会执行，这意味着它不会通过 break 语句终止。\n换句话说，如果 while 循环被 break 终止，则 else 块将不会被执行。\nleaders = ["Elon", "Tim", "Warren"]\ni = 0\nwhile i < len(leaders):\n    if leaders[i] == "Yang":\n        print("Yang is a leader!")\n        break\n    i += 1\nelse:\n    print("Not found Yang!")\n\n# Not found Yang!\n如上面的示例所示， while 循环迭代 leaders 列表，搜索领导者 "Yang"。不幸的是，"Yang" 并不是该名单中真正的领导者。所以 break 语句没有被执行。因此，else 语句下的代码就被执行了。\nelse 语句的这种意外用法使我们无需添加额外的标志变量来标记循环是否被破坏。这样我们的 Python 程序就可以精简一些了。\n2. 带有 For 循环的 Else 语句\nFor 循环和 while 循环是编程的孪生兄弟。如果我们可以在 while 循环中利用 else 语句的多功能性，那么毫无疑问它可以用于 for 循环。\n这个想法是完全相同的：\n\nThe "else" block only executes when there is no break in the for loop.\n"else" 块仅在 for 循环中没有中断时执行。\n\n让我们用 for 循环重写前面的示例：\nleaders = ["Elon", "Tim", "Warren"]\n\nfor i in leaders:\n    if i == "Yang":\n        print("Yang is a leader!")\n        break\nelse:\n    print("Not found Yang!")\n\n# Not found Yang!\n代码更简洁了，不是吗？你能用其他编程语言做到这一点吗？\n3. 使用 Else 语句进行异常处理\n异常处理是编写健壮且无错误的代码的一项重要技术。\n在 Python 中，整个异常处理代码块的结构应该如下：\ntry:\n    # Code that might raise an exception\nexcept SomeException:\n    # Code that runs if the try block raised \'SomeException\'\nelse:\n    # Code that runs if the try block did NOT raise any exceptions\nfinally:\n    # Code that always runs no matter what, often for cleanup\n除了 try 块之外，所有其他部分都是可选的。\n当 try 块未引发异常时， else 块就会执行。这是放置仅当 try 块成功且无异常时才运行的代码的好地方。这对于阐明代码的意图并防止 except 块意外捕获非常有用。\n例如，以下程序实现了一个非常简单的除法函数：\ndef divide(x, y):\n    try:\n        result = x / y\n    except ZeroDivisionError:\n        print("Error: Division by zero.")\n    else:\n        print(f"Result is {result}")\n    finally:\n        print("Executing finally clause.")\n如果没有遇到 ZeroDivisionError，结果如下：\ndivide(2077, 1)\n# Result is 2077.0\n# Executing finally clause.\n当然，如果满足定义的异常，则会打印相关的 Error 消息：\ndivide(2077, 0)\n# Error: Division by zero.\n# Executing finally clause.\n要点总结\n在 Python 中，else 语句不一定位于 if 语句之后。\n它还有三个额外但鲜为人知的用途：\n\nwhile-else 循环\nfor-else 循环\n使用 else 块进行异常处理\n\n但是，我不建议您在生产中频繁应用它们，因为使用鲜为人知的功能可能会降低可读性并使您的同事感到困惑。但理解并随意应用它们会给你的同事留下深刻的印象，并巩固你作为 "Python 大师" 的地位。 😎', 'bodyHTML': '<blockquote>\n<p dir="auto">这是来自于 <a href="https://twitter.com/YangZhou1993" rel="nofollow">Yang Zhou</a> 发表在 <a href="https://medium.com/techtofreedom/beyond-if-else-leveraging-pythons-versatile-else-statements-9ac260dac102" rel="nofollow">Medium</a> 的一篇文章 《<a href="https://medium.com/techtofreedom/beyond-if-else-leveraging-pythons-versatile-else-statements-9ac260dac102" rel="nofollow">Beyond If-Else: Leveraging Python’s Versatile “Else” Statements</a>》，作者觉得挺有意思的，拿过来简单翻译了一下在这里分享给大家。</p>\n</blockquote>\n\n<p dir="auto">当我们说到 "else"，必须先有 "if"。</p>\n<p dir="auto">这对于许多编程语言来说都是正确的，但对于 Python 来说却不然。</p>\n<p dir="auto">Python 的 else 语句比我们想象的更通用。</p>\n<p dir="auto">从循环后的 "else" 到 try- except 块后的 "else"，本文将探讨 else 语句鲜为人知的功能。</p>\n<p dir="auto">我们不一定需要在生产中使用这些技巧，尤其是当我们的同事还不知道它们时，但仅仅意识到它们的存在就可以让我们再次感受到 Python 的灵活性和多功能性。</p>\n<h2 dir="auto">1. While-Else 结构</h2>\n<p dir="auto">在 Python 中， <code class="notranslate">while</code> 循环可以与 <code class="notranslate">else</code> 块配对。当且仅当循环正常完成时，<code class="notranslate">else</code> 块才会执行，这意味着它不会通过 <code class="notranslate">break</code> 语句终止。</p>\n<p dir="auto">换句话说，如果 <code class="notranslate">while</code> 循环被 <code class="notranslate">break</code> 终止，则 <code class="notranslate">else</code> 块将不会被执行。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="leaders = [&quot;Elon&quot;, &quot;Tim&quot;, &quot;Warren&quot;]\ni = 0\nwhile i &lt; len(leaders):\n    if leaders[i] == &quot;Yang&quot;:\n        print(&quot;Yang is a leader!&quot;)\n        break\n    i += 1\nelse:\n    print(&quot;Not found Yang!&quot;)\n\n# Not found Yang!"><pre class="notranslate"><span class="pl-s1">leaders</span> <span class="pl-c1">=</span> [<span class="pl-s">"Elon"</span>, <span class="pl-s">"Tim"</span>, <span class="pl-s">"Warren"</span>]\n<span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span>\n<span class="pl-k">while</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-en">len</span>(<span class="pl-s1">leaders</span>):\n    <span class="pl-k">if</span> <span class="pl-s1">leaders</span>[<span class="pl-s1">i</span>] <span class="pl-c1">==</span> <span class="pl-s">"Yang"</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">"Yang is a leader!"</span>)\n        <span class="pl-k">break</span>\n    <span class="pl-s1">i</span> <span class="pl-c1">+=</span> <span class="pl-c1">1</span>\n<span class="pl-k">else</span>:\n    <span class="pl-en">print</span>(<span class="pl-s">"Not found Yang!"</span>)\n\n<span class="pl-c"># Not found Yang!</span></pre></div>\n<p dir="auto">如上面的示例所示， <code class="notranslate">while</code> 循环迭代 <code class="notranslate">leaders</code> 列表，搜索领导者 "Yang"。不幸的是，"Yang" 并不是该名单中真正的领导者。所以 <code class="notranslate">break</code> 语句没有被执行。因此，<code class="notranslate">else</code> 语句下的代码就被执行了。</p>\n<p dir="auto"><code class="notranslate">else</code> 语句的这种意外用法使我们无需添加额外的标志变量来标记循环是否被破坏。这样我们的 Python 程序就可以精简一些了。</p>\n<h2 dir="auto">2. 带有 For 循环的 Else 语句</h2>\n<p dir="auto">For 循环和 <code class="notranslate">while</code> 循环是编程的孪生兄弟。如果我们可以在 while 循环中利用 else 语句的多功能性，那么毫无疑问它可以用于 for 循环。</p>\n<p dir="auto">这个想法是完全相同的：</p>\n<blockquote>\n<p dir="auto">The "else" block only executes when there is no break in the for loop.<br>\n"else" 块仅在 for 循环中没有中断时执行。</p>\n</blockquote>\n<p dir="auto">让我们用 for 循环重写前面的示例：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="leaders = [&quot;Elon&quot;, &quot;Tim&quot;, &quot;Warren&quot;]\n\nfor i in leaders:\n    if i == &quot;Yang&quot;:\n        print(&quot;Yang is a leader!&quot;)\n        break\nelse:\n    print(&quot;Not found Yang!&quot;)\n\n# Not found Yang!"><pre class="notranslate"><span class="pl-s1">leaders</span> <span class="pl-c1">=</span> [<span class="pl-s">"Elon"</span>, <span class="pl-s">"Tim"</span>, <span class="pl-s">"Warren"</span>]\n\n<span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">leaders</span>:\n    <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">==</span> <span class="pl-s">"Yang"</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">"Yang is a leader!"</span>)\n        <span class="pl-k">break</span>\n<span class="pl-k">else</span>:\n    <span class="pl-en">print</span>(<span class="pl-s">"Not found Yang!"</span>)\n\n<span class="pl-c"># Not found Yang!</span></pre></div>\n<p dir="auto">代码更简洁了，不是吗？你能用其他编程语言做到这一点吗？</p>\n<h2 dir="auto">3. 使用 Else 语句进行异常处理</h2>\n<p dir="auto">异常处理是编写健壮且无错误的代码的一项重要技术。</p>\n<p dir="auto">在 Python 中，整个异常处理代码块的结构应该如下：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="try:\n    # Code that might raise an exception\nexcept SomeException:\n    # Code that runs if the try block raised \'SomeException\'\nelse:\n    # Code that runs if the try block did NOT raise any exceptions\nfinally:\n    # Code that always runs no matter what, often for cleanup"><pre class="notranslate"><span class="pl-k">try</span>:\n    <span class="pl-c"># Code that might raise an exception</span>\n<span class="pl-k">except</span> <span class="pl-v">SomeException</span>:\n    <span class="pl-c"># Code that runs if the try block raised \'SomeException\'</span>\n<span class="pl-k">else</span>:\n    <span class="pl-c"># Code that runs if the try block did NOT raise any exceptions</span>\n<span class="pl-k">finally</span>:\n    <span class="pl-c"># Code that always runs no matter what, often for cleanup</span></pre></div>\n<p dir="auto">除了 <code class="notranslate">try</code> 块之外，所有其他部分都是可选的。</p>\n<p dir="auto">当 <code class="notranslate">try</code> 块未引发异常时， <code class="notranslate">else</code> 块就会执行。这是放置仅当 <code class="notranslate">try</code> 块成功且无异常时才运行的代码的好地方。这对于阐明代码的意图并防止 <code class="notranslate">except</code> 块意外捕获非常有用。</p>\n<p dir="auto">例如，以下程序实现了一个非常简单的除法函数：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def divide(x, y):\n    try:\n        result = x / y\n    except ZeroDivisionError:\n        print(&quot;Error: Division by zero.&quot;)\n    else:\n        print(f&quot;Result is {result}&quot;)\n    finally:\n        print(&quot;Executing finally clause.&quot;)"><pre class="notranslate"><span class="pl-k">def</span> <span class="pl-en">divide</span>(<span class="pl-s1">x</span>, <span class="pl-s1">y</span>):\n    <span class="pl-k">try</span>:\n        <span class="pl-s1">result</span> <span class="pl-c1">=</span> <span class="pl-s1">x</span> <span class="pl-c1">/</span> <span class="pl-s1">y</span>\n    <span class="pl-k">except</span> <span class="pl-v">ZeroDivisionError</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">"Error: Division by zero."</span>)\n    <span class="pl-k">else</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">f"Result is <span class="pl-s1"><span class="pl-kos">{</span><span class="pl-s1">result</span><span class="pl-kos">}</span></span>"</span>)\n    <span class="pl-k">finally</span>:\n        <span class="pl-en">print</span>(<span class="pl-s">"Executing finally clause."</span>)</pre></div>\n<p dir="auto">如果没有遇到 <code class="notranslate">ZeroDivisionError</code>，结果如下：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="divide(2077, 1)\n# Result is 2077.0\n# Executing finally clause."><pre class="notranslate"><span class="pl-en">divide</span>(<span class="pl-c1">2077</span>, <span class="pl-c1">1</span>)\n<span class="pl-c"># Result is 2077.0</span>\n<span class="pl-c"># Executing finally clause.</span></pre></div>\n<p dir="auto">当然，如果满足定义的异常，则会打印相关的 <code class="notranslate">Error</code> 消息：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="divide(2077, 0)\n# Error: Division by zero.\n# Executing finally clause."><pre class="notranslate"><span class="pl-en">divide</span>(<span class="pl-c1">2077</span>, <span class="pl-c1">0</span>)\n<span class="pl-c"># Error: Division by zero.</span>\n<span class="pl-c"># Executing finally clause.</span></pre></div>\n<h2 dir="auto">要点总结</h2>\n<p dir="auto">在 Python 中，else 语句不一定位于 if 语句之后。</p>\n<p dir="auto">它还有三个额外但鲜为人知的用途：</p>\n<ul dir="auto">\n<li>while-else 循环</li>\n<li>for-else 循环</li>\n<li>使用 else 块进行异常处理</li>\n</ul>\n<p dir="auto">但是，我不建议您在生产中频繁应用它们，因为使用鲜为人知的功能可能会降低可读性并使您的同事感到困惑。但理解并随意应用它们会给你的同事留下深刻的印象，并巩固你作为 "Python 大师" 的地位。 😎</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '翻译'}, {'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': 'RockyLinux 9 基础配置与使用', 'number': 60, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/60', 'createdAt': '2024-03-08T02:24:12Z', 'lastEditedAt': '2024-03-13T06:11:33Z', 'updatedAt': '2024-03-13T06:11:33Z', 'body': '今天终于在阿里云入手了一台 2核(vCPU)+ 2GiB + 3Mbps 的 ECS，安装了最新的 Rocky Linux release 9.3 (Blue Onyx)，记录一下开箱后的一些基础配置。\r\n\r\n<!-- more -->\r\n\r\n![aliyun-99-plan](https://shub.weiyan.tech/kgarden/2024/03/aliyun-99-plan.png)\r\n\r\n## Hostname\r\n```\r\n[root@r0sasd1bQi ~]# hostnamectl   # 查看一下当前主机名的情况\r\n[root@r0sasd1bQi ~]# hostnamectl set-hostname shen-server --static\r\n[root@r0sasd1bQi ~]# hostnamectl status\r\n[root@r0sasd1bQi ~]# reboot now    # 重启服务器\r\n```\r\n\r\n## 创建新用户\r\n\r\n使用 `adduser` 命令将新用户添加到系统中：\r\n```bash\r\nadduser shenweiyan    # 创建新用户\r\npasswd shenweiyan     # 修改密码\r\n```\r\n\r\n## 用户添加超级权限\r\n\r\n把 `shenweiyan` 用户添加超级权限（`/etc/sudoers`）：\r\n```\r\nshenweiyan      ALL=(ALL)       NOPASSWD: ALL\r\n```\r\n\r\n## 自定义快捷方式\r\n\r\n在 `~/.bashrc` 最后新增一下用户自定义的快捷方式。\r\n\r\n```\r\n# User Specific Alias\r\nalias disp=\'display\'\r\nalias rm=\'rm -i\'\r\nalias la=\'ls -al\'\r\nalias ll=\'ls -lh\'\r\nalias le=\'less -S\'\r\n\r\n# Custom History setting\r\n# HISTFILESIZE 定义了在 .bash_history 中保存命令的记录总数\r\nHISTFILESIZE=3000000\r\n# HISTSIZE 定义了 history 命令输出的记录数\r\nHISTSIZE=3000\r\n# 定义 History 输出格式\r\nexport HISTTIMEFORMAT=\'%F %T \'\r\n# 使用 HISTCONTROL 从命令历史中剔除连续重复的条目\r\nHISTCONTROL=ignoredups\r\n# 将 bash 内存中历史命令追加到 .bash_history 历史命令文件中， 默认只有退出 shell 是才会保存\r\nPROMPT_COMMAND="history -a"\r\n\r\n# Login Style\r\nPS1=\'\\033[35;1m\\u@\\h \\[\\e[m\\]\\t \\[\\033[36;1m\\]$(pwd) \\n$ \\[\\e[m\\]\'\r\nclear;\r\n```\r\n\r\n## epel-release\r\n\r\n> 企业版 Linux 附加软件包（Extra Packages for Enterprise Linux，以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 [红帽企业版 Linux (RHEL)](https://fedoraproject.org/wiki/Red_Hat_Enterprise_Linux/zh-cn)、 CentOS、Scientific Linux (SL)、Oracle Linux (OL) 。\r\n> \r\n> 参考：[EPEL/zh-cn - Fedora Project Wiki](https://fedoraproject.org/wiki/EPEL/zh-cn)\r\n\r\n```bash\r\n# 下面两个命令都可以安装\r\nsudo dnf install epel-release\r\nsudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm\r\n```\r\n\r\n## Htop\r\n\r\n[Htop](https://htop.dev/) 是一个基于 C 编写的跨平台的交互式流程查看器，相比系统自带的 `top` 更加直观好用。 \r\n\r\n```bash\r\nsudo dnf install htop\r\n```\r\n\r\n## Docker 安装与使用\r\n\r\n主要参考《[How To Install and Use Docker on Rocky Linux 9](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-rocky-linux-9)》，具体步骤如下：     \r\n\r\n- add the official Docker repository\r\n  ```bash\r\n  sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\n  ```\r\n\r\n- install Docker\r\n  ```bash\r\n  sudo dnf install docker-ce docker-ce-cli containerd.io\r\n  ```\r\n\r\n- start the Docker daemon\r\n  ```bash\r\n  sudo systemctl start docker\r\n  ```\r\n\r\n- Verify that it’s running\r\n  ```bash\r\n  sudo systemctl status docker\r\n  ```\r\n  ```\r\n  Output\r\n  ● docker.service - Docker Application Container Engine\r\n     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\r\n     Active: active (running) since Sun 2016-05-01 06:53:52 CDT; 1 weeks 3 days ago\r\n       Docs: https://docs.docker.com\r\n   Main PID: 749 (docker)\r\n  ```\r\n\r\n- make sure it starts at every server reboot\r\n  ```bash\r\n  sudo systemctl enable docker\r\n  ```\r\n\r\n- 配置非 root 用户使用 Docker\r\n  ```bash\r\n  sudo usermod -aG docker username\r\n  newgrp docker                     #更新docker用户组\r\n  ```', 'bodyText': '今天终于在阿里云入手了一台 2核(vCPU)+ 2GiB + 3Mbps 的 ECS，安装了最新的 Rocky Linux release 9.3 (Blue Onyx)，记录一下开箱后的一些基础配置。\n\n\nHostname\n[root@r0sasd1bQi ~]# hostnamectl   # 查看一下当前主机名的情况\n[root@r0sasd1bQi ~]# hostnamectl set-hostname shen-server --static\n[root@r0sasd1bQi ~]# hostnamectl status\n[root@r0sasd1bQi ~]# reboot now    # 重启服务器\n\n创建新用户\n使用 adduser 命令将新用户添加到系统中：\nadduser shenweiyan    # 创建新用户\npasswd shenweiyan     # 修改密码\n用户添加超级权限\n把 shenweiyan 用户添加超级权限（/etc/sudoers）：\nshenweiyan      ALL=(ALL)       NOPASSWD: ALL\n\n自定义快捷方式\n在 ~/.bashrc 最后新增一下用户自定义的快捷方式。\n# User Specific Alias\nalias disp=\'display\'\nalias rm=\'rm -i\'\nalias la=\'ls -al\'\nalias ll=\'ls -lh\'\nalias le=\'less -S\'\n\n# Custom History setting\n# HISTFILESIZE 定义了在 .bash_history 中保存命令的记录总数\nHISTFILESIZE=3000000\n# HISTSIZE 定义了 history 命令输出的记录数\nHISTSIZE=3000\n# 定义 History 输出格式\nexport HISTTIMEFORMAT=\'%F %T \'\n# 使用 HISTCONTROL 从命令历史中剔除连续重复的条目\nHISTCONTROL=ignoredups\n# 将 bash 内存中历史命令追加到 .bash_history 历史命令文件中， 默认只有退出 shell 是才会保存\nPROMPT_COMMAND="history -a"\n\n# Login Style\nPS1=\'\\033[35;1m\\u@\\h \\[\\e[m\\]\\t \\[\\033[36;1m\\]$(pwd) \\n$ \\[\\e[m\\]\'\nclear;\n\nepel-release\n\n企业版 Linux 附加软件包（Extra Packages for Enterprise Linux，以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 红帽企业版 Linux (RHEL)、 CentOS、Scientific Linux (SL)、Oracle Linux (OL) 。\n参考：EPEL/zh-cn - Fedora Project Wiki\n\n# 下面两个命令都可以安装\nsudo dnf install epel-release\nsudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm\nHtop\nHtop 是一个基于 C 编写的跨平台的交互式流程查看器，相比系统自带的 top 更加直观好用。\nsudo dnf install htop\nDocker 安装与使用\n主要参考《How To Install and Use Docker on Rocky Linux 9》，具体步骤如下：\n\n\nadd the official Docker repository\nsudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n\ninstall Docker\nsudo dnf install docker-ce docker-ce-cli containerd.io\n\n\nstart the Docker daemon\nsudo systemctl start docker\n\n\nVerify that it’s running\nsudo systemctl status docker\nOutput\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sun 2016-05-01 06:53:52 CDT; 1 weeks 3 days ago\n     Docs: https://docs.docker.com\n Main PID: 749 (docker)\n\n\n\nmake sure it starts at every server reboot\nsudo systemctl enable docker\n\n\n配置非 root 用户使用 Docker\nsudo usermod -aG docker username\nnewgrp docker                     #更新docker用户组', 'bodyHTML': '<p dir="auto">今天终于在阿里云入手了一台 2核(vCPU)+ 2GiB + 3Mbps 的 ECS，安装了最新的 Rocky Linux release 9.3 (Blue Onyx)，记录一下开箱后的一些基础配置。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e422eaa0742f8e5696f2e794879c1dd08b0074479eb600f210b8862cbcf1c263/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30332f616c6979756e2d39392d706c616e2e706e67"><img src="https://camo.githubusercontent.com/e422eaa0742f8e5696f2e794879c1dd08b0074479eb600f210b8862cbcf1c263/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30332f616c6979756e2d39392d706c616e2e706e67" alt="aliyun-99-plan" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/03/aliyun-99-plan.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Hostname</h2>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[root@r0sasd1bQi ~]# hostnamectl   # 查看一下当前主机名的情况\n[root@r0sasd1bQi ~]# hostnamectl set-hostname shen-server --static\n[root@r0sasd1bQi ~]# hostnamectl status\n[root@r0sasd1bQi ~]# reboot now    # 重启服务器"><pre class="notranslate"><code class="notranslate">[root@r0sasd1bQi ~]# hostnamectl   # 查看一下当前主机名的情况\n[root@r0sasd1bQi ~]# hostnamectl set-hostname shen-server --static\n[root@r0sasd1bQi ~]# hostnamectl status\n[root@r0sasd1bQi ~]# reboot now    # 重启服务器\n</code></pre></div>\n<h2 dir="auto">创建新用户</h2>\n<p dir="auto">使用 <code class="notranslate">adduser</code> 命令将新用户添加到系统中：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="adduser shenweiyan    # 创建新用户\npasswd shenweiyan     # 修改密码"><pre class="notranslate">adduser shenweiyan    <span class="pl-c"><span class="pl-c">#</span> 创建新用户</span>\npasswd shenweiyan     <span class="pl-c"><span class="pl-c">#</span> 修改密码</span></pre></div>\n<h2 dir="auto">用户添加超级权限</h2>\n<p dir="auto">把 <code class="notranslate">shenweiyan</code> 用户添加超级权限（<code class="notranslate">/etc/sudoers</code>）：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="shenweiyan      ALL=(ALL)       NOPASSWD: ALL"><pre class="notranslate"><code class="notranslate">shenweiyan      ALL=(ALL)       NOPASSWD: ALL\n</code></pre></div>\n<h2 dir="auto">自定义快捷方式</h2>\n<p dir="auto">在 <code class="notranslate">~/.bashrc</code> 最后新增一下用户自定义的快捷方式。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# User Specific Alias\nalias disp=\'display\'\nalias rm=\'rm -i\'\nalias la=\'ls -al\'\nalias ll=\'ls -lh\'\nalias le=\'less -S\'\n\n# Custom History setting\n# HISTFILESIZE 定义了在 .bash_history 中保存命令的记录总数\nHISTFILESIZE=3000000\n# HISTSIZE 定义了 history 命令输出的记录数\nHISTSIZE=3000\n# 定义 History 输出格式\nexport HISTTIMEFORMAT=\'%F %T \'\n# 使用 HISTCONTROL 从命令历史中剔除连续重复的条目\nHISTCONTROL=ignoredups\n# 将 bash 内存中历史命令追加到 .bash_history 历史命令文件中， 默认只有退出 shell 是才会保存\nPROMPT_COMMAND=&quot;history -a&quot;\n\n# Login Style\nPS1=\'\\033[35;1m\\u@\\h \\[\\e[m\\]\\t \\[\\033[36;1m\\]$(pwd) \\n$ \\[\\e[m\\]\'\nclear;"><pre class="notranslate"><code class="notranslate"># User Specific Alias\nalias disp=\'display\'\nalias rm=\'rm -i\'\nalias la=\'ls -al\'\nalias ll=\'ls -lh\'\nalias le=\'less -S\'\n\n# Custom History setting\n# HISTFILESIZE 定义了在 .bash_history 中保存命令的记录总数\nHISTFILESIZE=3000000\n# HISTSIZE 定义了 history 命令输出的记录数\nHISTSIZE=3000\n# 定义 History 输出格式\nexport HISTTIMEFORMAT=\'%F %T \'\n# 使用 HISTCONTROL 从命令历史中剔除连续重复的条目\nHISTCONTROL=ignoredups\n# 将 bash 内存中历史命令追加到 .bash_history 历史命令文件中， 默认只有退出 shell 是才会保存\nPROMPT_COMMAND="history -a"\n\n# Login Style\nPS1=\'\\033[35;1m\\u@\\h \\[\\e[m\\]\\t \\[\\033[36;1m\\]$(pwd) \\n$ \\[\\e[m\\]\'\nclear;\n</code></pre></div>\n<h2 dir="auto">epel-release</h2>\n<blockquote>\n<p dir="auto">企业版 Linux 附加软件包（Extra Packages for Enterprise Linux，以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 <a href="https://fedoraproject.org/wiki/Red_Hat_Enterprise_Linux/zh-cn" rel="nofollow">红帽企业版 Linux (RHEL)</a>、 CentOS、Scientific Linux (SL)、Oracle Linux (OL) 。</p>\n<p dir="auto">参考：<a href="https://fedoraproject.org/wiki/EPEL/zh-cn" rel="nofollow">EPEL/zh-cn - Fedora Project Wiki</a></p>\n</blockquote>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 下面两个命令都可以安装\nsudo dnf install epel-release\nsudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 下面两个命令都可以安装</span>\nsudo dnf install epel-release\nsudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm</pre></div>\n<h2 dir="auto">Htop</h2>\n<p dir="auto"><a href="https://htop.dev/" rel="nofollow">Htop</a> 是一个基于 C 编写的跨平台的交互式流程查看器，相比系统自带的 <code class="notranslate">top</code> 更加直观好用。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo dnf install htop"><pre class="notranslate">sudo dnf install htop</pre></div>\n<h2 dir="auto">Docker 安装与使用</h2>\n<p dir="auto">主要参考《<a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-rocky-linux-9" rel="nofollow">How To Install and Use Docker on Rocky Linux 9</a>》，具体步骤如下：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">add the official Docker repository</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo"><pre class="notranslate">sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</pre></div>\n</li>\n<li>\n<p dir="auto">install Docker</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo dnf install docker-ce docker-ce-cli containerd.io"><pre class="notranslate">sudo dnf install docker-ce docker-ce-cli containerd.io</pre></div>\n</li>\n<li>\n<p dir="auto">start the Docker daemon</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo systemctl start docker"><pre class="notranslate">sudo systemctl start docker</pre></div>\n</li>\n<li>\n<p dir="auto">Verify that it’s running</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo systemctl status docker"><pre class="notranslate">sudo systemctl status docker</pre></div>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Output\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sun 2016-05-01 06:53:52 CDT; 1 weeks 3 days ago\n     Docs: https://docs.docker.com\n Main PID: 749 (docker)"><pre class="notranslate"><code class="notranslate">Output\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sun 2016-05-01 06:53:52 CDT; 1 weeks 3 days ago\n     Docs: https://docs.docker.com\n Main PID: 749 (docker)\n</code></pre></div>\n</li>\n<li>\n<p dir="auto">make sure it starts at every server reboot</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo systemctl enable docker"><pre class="notranslate">sudo systemctl <span class="pl-c1">enable</span> docker</pre></div>\n</li>\n<li>\n<p dir="auto">配置非 root 用户使用 Docker</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo usermod -aG docker username\nnewgrp docker                     #更新docker用户组"><pre class="notranslate">sudo usermod -aG docker username\nnewgrp docker                     <span class="pl-c"><span class="pl-c">#</span>更新docker用户组</span></pre></div>\n</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.17-服务器配置使用'}]}, 'comments': {'nodes': []}}, {'title': '我的随笔和博客', 'number': 59, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/59', 'createdAt': '2024-03-04T01:27:09Z', 'lastEditedAt': None, 'updatedAt': '2024-03-04T01:27:10Z', 'body': '我的站点中把[随笔](https://weiyan.cc/note/)和[博客](https://weiyan.cc/blog/)分成了两个平行的导航，其实内容是一样的，只是原文托管的平台不一样而已。\r\n\r\n<!-- more -->\r\n\r\n[随笔](https://weiyan.cc/note/) 的内容最开始是在语雀的[随笔与乱弹](https://www.yuque.com/shenweiyan/notebook)写的，导出来后加到现在的站点中，独立成了现在看到的[随笔](https://weiyan.cc/note/)。[博客](https://weiyan.cc/blog/) 则是从 2023 年起写在 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden) 的 [discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions/) 上的一些非技术相关杂文。', 'bodyText': '我的站点中把随笔和博客分成了两个平行的导航，其实内容是一样的，只是原文托管的平台不一样而已。\n\n随笔 的内容最开始是在语雀的随笔与乱弹写的，导出来后加到现在的站点中，独立成了现在看到的随笔。博客 则是从 2023 年起写在 Knowledge-Garden 的 discussions 上的一些非技术相关杂文。', 'bodyHTML': '<p dir="auto">我的站点中把<a href="https://weiyan.cc/note/" rel="nofollow">随笔</a>和<a href="https://weiyan.cc/blog/" rel="nofollow">博客</a>分成了两个平行的导航，其实内容是一样的，只是原文托管的平台不一样而已。</p>\n\n<p dir="auto"><a href="https://weiyan.cc/note/" rel="nofollow">随笔</a> 的内容最开始是在语雀的<a href="https://www.yuque.com/shenweiyan/notebook" rel="nofollow">随笔与乱弹</a>写的，导出来后加到现在的站点中，独立成了现在看到的<a href="https://weiyan.cc/note/" rel="nofollow">随笔</a>。<a href="https://weiyan.cc/blog/" rel="nofollow">博客</a> 则是从 2023 年起写在 <a href="https://github.com/shenweiyan/Knowledge-Garden">Knowledge-Garden</a> 的 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/">discussions</a> 上的一些非技术相关杂文。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '如今迈步从头越', 'number': 58, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/58', 'createdAt': '2024-02-20T03:57:52Z', 'lastEditedAt': None, 'updatedAt': '2024-02-20T03:57:53Z', 'body': '2024 年应该是不太平凡的一年，农历新年后经历了很多的事情，生活也好工作也好，都不太平静。\r\n\r\n<!-- more -->\r\n\r\n尤其对于工作而言，有一些更加深入的体会，明白很多人和事都并非表面那么简单。总的来说，就是学会保护好自己，做事情多留点心，多一些思考。\r\n\r\n人家说，能力也大，责任越大。对于个人职业和工作，更多的是权限越大，责任越大，任何的权限并非是越大越好。', 'bodyText': '2024 年应该是不太平凡的一年，农历新年后经历了很多的事情，生活也好工作也好，都不太平静。\n\n尤其对于工作而言，有一些更加深入的体会，明白很多人和事都并非表面那么简单。总的来说，就是学会保护好自己，做事情多留点心，多一些思考。\n人家说，能力也大，责任越大。对于个人职业和工作，更多的是权限越大，责任越大，任何的权限并非是越大越好。', 'bodyHTML': '<p dir="auto">2024 年应该是不太平凡的一年，农历新年后经历了很多的事情，生活也好工作也好，都不太平静。</p>\n\n<p dir="auto">尤其对于工作而言，有一些更加深入的体会，明白很多人和事都并非表面那么简单。总的来说，就是学会保护好自己，做事情多留点心，多一些思考。</p>\n<p dir="auto">人家说，能力也大，责任越大。对于个人职业和工作，更多的是权限越大，责任越大，任何的权限并非是越大越好。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '使用 Planemo 进行 Galaxy 工具开发', 'number': 57, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/57', 'createdAt': '2024-02-04T08:26:38Z', 'lastEditedAt': None, 'updatedAt': '2024-02-04T08:26:39Z', 'body': '> 说明：本文章原文发布于 《[使用 Planemo 进行 Galaxy 工具开发 - 语雀](https://www.yuque.com/shenweiyan/biox/planemo-for-galaxy)》，部分内容已更新。\r\n\r\n文章开始前，我们先了解一下 Planemo 到底是个什么东西。\r\n\r\n> Command-line utilities to assist in developing [Galaxy](http://galaxyproject.org/) and [Common Workflow Language](https://www.commonwl.org/) artifacts - including tools, workflows, and training materials.\r\n\r\n说白了，Planemo 就是用于 Galaxy 平台工具和 WDL 通用工作流语言相关产品辅助开发的一个命令行工具，这个程序集可以用于工具、流程，以及培训教材的开发。\r\n\r\n<!-- more -->\r\n\r\n## 安装 Planemo \r\n\r\n无论是 pip 还是 conda 都可以安装 Planemo：\r\n```bash\r\n$ pip install planemo\r\n$ pip install -U git+git://github.com/galaxyproject/planemo.git\r\n```\r\n```bash\r\n$ conda config --add channels bioconda\r\n$ conda config --add channels conda-forge\r\n$ conda install planemo\r\n```\r\n\r\n接下来，进入今天的正题，我们来详细介绍一下怎么使用 Planemo 进行 Galaxy 工具开发。\r\n\r\n## 基础用法\r\n\r\n本指南将演示如何使用 Heng Li 的 `Seqtk` 软件包构建命令工具，该软件包用于处理 FASTA 和 FASTQ 文件中的序列数据。\r\n\r\n首先，我们需要先安装 `Seqtk` 。在这里，我们使用 `conda` 来安装 `Seqtk` (你也可以使用其他的方法安装)。\r\n```bash\r\n$ conda install --force --yes -c conda-forge -c bioconda seqtk=1.2\r\n    ... seqtk installation ...\r\n$ seqtk seq\r\n        Usage:   seqtk seq [options] <in.fq>|<in.fa>\r\n        Options: -q INT    mask bases with quality lower than INT [0]\r\n                 -X INT    mask bases with quality higher than INT [255]\r\n                 -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n                 -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n                 -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n                 -s INT    random seed (effective with -f) [11]\r\n                 -f FLOAT  sample FLOAT fraction of sequences [1]\r\n                 -M FILE   mask regions in BED or name list FILE [null]\r\n                 -L INT    drop sequences with length shorter than INT [0]\r\n                 -c        mask complement region (effective with -M)\r\n                 -r        reverse complement\r\n                 -A        force FASTA output (discard quality)\r\n                 -C        drop comments at the header lines\r\n                 -N        drop sequences containing ambiguous bases\r\n                 -1        output the 2n-1 reads only\r\n                 -2        output the 2n reads only\r\n                 -V        shift quality by \'(-Q) - 33\'\r\n```\r\n接下来，我们将下载一个 FASTQ 示例文件，并测试一个简单的 Seqtk 命令 `seq` ，该命令将 FASTQ 文件转换为 FASTA。\r\n```bash\r\n$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\r\n$ seqtk seq -A 2.fastq > 2.fasta\r\n$ cat 2.fasta\r\n>EAS54_6_R1_2_1_413_324\r\nCCCTTCTTGTCTTCAGCGTTTCTCC\r\n>EAS54_6_R1_2_1_540_792\r\nTTGGCAGGCCAAGGCCGATGGATCA\r\n>EAS54_6_R1_2_1_443_348\r\nGTTGCTTCTGGCGTGGGTGGGGGGG\r\n```\r\n有关功能齐全的 Seqtk 包封装，可以在 GitHub 上查看 [Helena Rasche\'s wrappers](https://github.com/galaxyproject/tools-iuc/tree/master/tools/seqtk)。\r\n\r\nGalaxy 工具文件只是 XML 文件，因此此时可以打开文本编辑器并开始编写工具。Planemo 有一个命令 `tool_init` 可以快速生成一些样板 XML，因此首先开始。\r\n```bash\r\n$ planemo tool_init --id \'seqtk_seq\' --name \'Convert to FASTA (seqtk)\'\r\n```\r\n`tool_init` 命令可以采用各种复杂的参数，但如上面展示的 `--id` 和 `--name` 是其中两个最基本的参数。每个 Galaxy 工具都需要一个 ID（这是 Galaxy 自身用来标识该工具的简短标识符）和一个名称（此名称会显示给 Galaxy 用户，并且应该是该工具的简短描述）。工具名称可以包含空格，但其 ID 不能包含空格。\r\n\r\n上面的命令将生成一个 seqtk_seq.xml 文件，这个文件看起来像这样：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        TODO: Fill in command template.\r\n    ]]></command>\r\n    <inputs>\r\n    </inputs>\r\n    <outputs>\r\n    </outputs>\r\n    <help><![CDATA[\r\n        TODO: Fill in help.\r\n    ]]></help>\r\n</tool>\r\n```\r\n这个生成的模板 XML 文件具有了 Galaxy 工具所需的公共部分内容，但你仍然需要打开编辑器并填写命令模板、输入参数描述、工具输出信息、帮助部分信息等。\r\n\r\n`tool_init` 命令也可以做得更好。 们可以使用在 `seqtk seq -a 2.fastq> 2.fasta` 上面尝试过的测试命令作为示例，通过指定输入和输出来生成命令块，如下所示。\r\n```bash\r\n$ planemo tool_init --force \\\r\n                    --id \'seqtk_seq\' \\\r\n                    --name \'Convert to FASTA (seqtk)\' \\\r\n                    --requirement seqtk@1.2 \\\r\n                    --example_command \'seqtk seq -a 2.fastq > 2.fasta\' \\\r\n                    --example_input 2.fastq \\\r\n                    --example_output 2.fasta\r\n```\r\n这将生成以下 XML 文件- 该文件具有正确的输入和输出定义以及实际的命令模板。\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <help><![CDATA[\r\n        TODO: Fill in help.\r\n    ]]></help>\r\n</tool>(\r\n```\r\n如本节开头所示，命令 `seqtk seq` 会为 `seq` 命令生成帮助消息。 `tool_init` 可以获取该帮助消息，并使用 `help_from_command` 选项将其正确粘贴在生成的工具 XML 文件中。\r\n\r\n通常，命令帮助消息并不完全适用于工具，因为它们会提到参数名称和由工具抽象出来的类似细节，但它们可能是一个很好的起点。\r\n\r\n以下 Planemo 的 `tool_init` 的调用已增强为使用 `--help_from_command`。\r\n```bash\r\n$ planemo tool_init --force \\\r\n                    --id \'seqtk_seq\' \\\r\n                    --name \'Convert to FASTA (seqtk)\' \\\r\n                    --requirement seqtk@1.2 \\\r\n                    --example_command \'seqtk seq -a 2.fastq > 2.fasta\' \\\r\n                    --example_input 2.fastq \\\r\n                    --example_output 2.fasta \\\r\n                    --test_case \\\r\n                    --cite_url \'https://github.com/lh3/seqtk\' \\\r\n                    --help_from_command \'seqtk seq\'\r\n```\r\n\r\n除了演示 `--help_from_command` 之外，这还演示了使用 `--test_case` 从我们的示例生成测试用例并为基础工具添加引用。生成的工具 XML 文件为：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n\r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n         -S        strip of white spaces in sequences\r\n\r\n\r\n    ]]></help>\r\n    <citations>\r\n        <citation type="bibtex">\r\n@misc{githubseqtk,\r\n  author = {LastTODO, FirstTODO},\r\n  year = {TODO},\r\n  title = {seqtk},\r\n  publisher = {GitHub},\r\n  journal = {GitHub repository},\r\n  url = {https://github.com/lh3/seqtk},\r\n}</citation>\r\n    </citations>\r\n</tool>\r\n```\r\n\r\n至此，我们有了一个功能相当齐全的 Galaxy 工具，它带有测试和帮助。这是一个非常简单的示例——通常，您需要在工具中投入更多工作才能实现这一点， `tool_init` 实际上只是为了让您入门而设计的。\r\n\r\n现在让我们检查并测试我们开发的工具。Planemo的 `lint`（或仅 `l` ）命令将检查工具的 XML 有效性，检查是否有明显的错误以及是否符合 IUC 的最佳做法。\r\n```bash\r\n$ planemo l\r\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\r\nApplying linter tests... CHECK\r\n.. CHECK: 1 test(s) found.\r\nApplying linter output... CHECK\r\n.. INFO: 1 outputs found.\r\nApplying linter inputs... CHECK\r\n.. INFO: Found 1 input parameters.\r\nApplying linter help... CHECK\r\n.. CHECK: Tool contains help section.\r\n.. CHECK: Help contains valid reStructuredText.\r\nApplying linter general... CHECK\r\n.. CHECK: Tool defines a version [0.1.0].\r\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\r\n.. CHECK: Tool defines an id [seqtk_seq].\r\n.. CHECK: Tool targets 16.01 Galaxy profile.\r\nApplying linter command... CHECK\r\n.. INFO: Tool contains a command.\r\nApplying linter citations... CHECK\r\n.. CHECK: Found 1 likely valid citations.\r\nApplying linter tool_xsd... CHECK\r\n.. INFO: File validates against XML schema.\r\n```\r\n默认情况下， `lint` 会在您当前的工作目录中找到所有工具，但是我们可以使用 `planemo lint seqtk_seq.xml` 指定一个特定的工具。\r\n\r\n接下来，我们可以使用 `test`（或仅执行 `t` ）命令运行工具的功能测试。这将打印很多输出（因为它启动了 Galaxy 实例），但最终应该显示我们通过的一项测试。\r\n\r\n> 如果你的服务器已经安装了 Galaxy 实例，你可以编辑 ~/.planemo.yml 文件，指定 Galaxy 实例路径。\r\n\r\n```yaml\r\n## Specify a default galaxy_root for the `test` and `serve` commands here.\r\ngalaxy_root: /home/user/galaxy\r\n```\r\n> 完整的 `~/.planemo.yml` 示例，参考：[https://planemo.readthedocs.io/en/latest/configuration.html](https://planemo.readthedocs.io/en/latest/configuration.html)\r\n\r\n```bash\r\n$ planemo t\r\n...\r\nAll 1 test(s) executed passed.\r\nseqtk_seq[0]: passed\r\n```\r\n除了在控制台中将测试结果显示为红色（失败）或绿色（通过）外，Planemo 还默认为测试结果创建 HTML 报告。 还有更多测试报告选项可用，例如 `--test_output_xunit`，在某些持续集成环境中很有用。有关更多选项，请参见 `planemo test --help` ，以及 `test_reports` 命令。\r\n\r\n现在，我们可以使用 `serve`（或仅使用 `s` ）命令打开 Galaxy。\r\n```bash\r\n$ planemo s\r\n...\r\nserving on http://127.0.0.1:9090\r\n```\r\n\r\n在网络浏览器中打开 [http://127.0.0.1:9090](http://127.0.0.1:9090) 以查看您的新工具。\r\n\r\n服务和测试可以通过各种命令行参数传递，例如 `--galaxy_root`，以指定要使用的 Galaxy 实例（默认情况下，planemo 将仅为 planemo 下载和管理实例）。\r\n\r\n## 简单参数\r\n\r\n我们为 `seqtk seq` 命令构建了一个工具包的封装，但是该工具实际上具有我们可能希望向 Galaxy 用户公开的其他选项。\r\n\r\n让我们从 `help` 命令中获取一些参数，并构建 Galaxy 的 `param` 块以粘贴到该工具的 `input` 块中。\r\n```bash\r\n-V        shift quality by \'(-Q) - 33\'\r\n```\r\n\r\n在上一节中，我们看到了输入文件在 `param` 块中是一个 `data` 的类型，除此之外我们还可以使用许多不同种类的参数。如标志参数（例如以上 `-V` 参数），通常在 Galaxy 工具的 XML 文件中由 `boolean` 来表示。\r\n```xml\r\n<param name="shift_quality" type="boolean" label="Shift quality"\r\n       truevalue="-V" falsevalue=""\r\n       help="shift quality by \'(-Q) - 33\' (-V)" />\r\n```\r\n然后，我们可以将 `$shift_quality` 粘贴在 `command` 块中，如果用户选择了此选项，它将扩展为 `-V` （因为我们已将其定义为 `truevalue` ）。如果用户未选择此选项，则 `$shift_quality` 将仅扩展为空字符串，而不会影响生成的命令行。\r\n\r\n现在考虑以下的 `seqtk seq` 参数：\r\n```bash\r\n-q INT    mask bases with quality lower than INT [0]\r\n-X INT    mask bases with quality higher than INT [255]\r\n```\r\n\r\n这些可以转换为 Galaxy 参数，如下所示：\r\n```xml\r\n<param name="quality_min" type="integer" label="Mask bases with quality lower than"\r\n       value="0" min="0" max="255" help="(-q)" />\r\n<param name="quality_max" type="integer" label="Mask bases with quality higher than"\r\n       value="255" min="0" max="255" help="(-X)" />\r\n```\r\n\r\n这些可以作为 `-q $quality_min -X $quality_max` 添加到命令标签中。\r\n\r\n此时，该工具将如下所示：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq\r\n              $shift_quality\r\n              -q $quality_min\r\n              -X $quality_max\r\n              -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n        <param name="shift_quality" type="boolean" label="Shift quality" \r\n               truevalue="-V" falsevalue=""\r\n               help="shift quality by \'(-Q) - 33\' (-V)" />\r\n        <param name="quality_min" type="integer" label="Mask bases with quality lower than" \r\n               value="0" min="0" max="255" help="(-q)" />\r\n        <param name="quality_max" type="integer" label="Mask bases with quality higher than" \r\n               value="255" min="0" max="255" help="(-X)" />\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n        \r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n\r\n\r\n    ]]></help>\r\n    <citations>\r\n        <citation type="bibtex">\r\n@misc{githubseqtk,\r\n  author = {LastTODO, FirstTODO},\r\n  year = {TODO},\r\n  title = {seqtk},\r\n  publisher = {GitHub},\r\n  journal = {GitHub repository},\r\n  url = {https://github.com/lh3/seqtk},\r\n}</citation>\r\n    </citations>\r\n</tool>\r\n```\r\n\r\n## 条件参数\r\n\r\n以前的参数很简单，因为它们总是出现，现在考虑一下下面的参数。\r\n```bash\r\n-M FILE   mask regions in BED or name list FILE [null]\r\n```\r\n\r\n我们可以通过添加属性 `optional ="true"` 将该数据类型参数标记为可选。\r\n```xml\r\n<param name="mask_regions" type="data" label="Mask regions in BED"\r\n       format="bed" help="(-M)" optional="true" />\r\n```\r\n\r\n然后，不仅可以直接在命令块中使用 `$mask_regions`，还可以将其包装在 `if` 语句中（因为工具 XML 文件支持 [Cheetah](https://cheetahtemplate.org/users_guide/index.html)）。\r\n```xml\r\n#if $mask_regions\r\n-M \'$mask_regions\'\r\n#end if\r\n```\r\n\r\n\r\n接着，我们考虑这一组参数：\r\n```bash\r\n-s INT    random seed (effective with -f) [11]\r\n-f FLOAT  sample FLOAT fraction of sequences [1]\r\n```\r\n\r\n在这种情况下，只有在设置了样本参数的情况下，才能看到或使用 `-s` 随机种子参数。我们可以使用 `conditional` 条件块来表达这一点。\r\n```xml\r\n<conditional name="sample">\r\n    <param name="sample_selector" type="boolean" label="Sample fraction of sequences" />\r\n    <when value="true">\r\n        <param name="fraction" label="Fraction" type="float" value="1.0"\r\n               help="(-f)" />\r\n        <param name="seed" label="Random seed" type="integer" value="11"\r\n               help="(-s)" />\r\n    </when>\r\n    <when value="false">\r\n    </when>\r\n</conditional>\r\n```\r\n\r\n在命令块中，我们可以再次使用 `if` 语句包括这些参数。\r\n```xml\r\n#if $sample.sample_selector\r\n-f $sample.fraction -s $sample.seed\r\n#end if\r\n```\r\n\r\n注意，我们必须使用 `sample.` 的前缀来引用这个参数，因为它们是在 `sample` 的条件块内定义的。\r\n\r\n现在该工具的最新版本如下：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq\r\n              $shift_quality\r\n              -q $quality_min\r\n              -X $quality_max\r\n              #if $mask_regions\r\n                  -M \'$mask_regions\'\r\n              #end if\r\n              #if $sample.sample\r\n                  -f $sample.fraction\r\n                  -s $sample.seed\r\n              #end if\r\n              -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n        <param name="shift_quality" type="boolean" label="Shift quality" \r\n               truevalue="-V" falsevalue=""\r\n               help="shift quality by \'(-Q) - 33\' (-V)" />\r\n        <param name="quality_min" type="integer" label="Mask bases with quality lower than" \r\n               value="0" min="0" max="255" help="(-q)" />\r\n        <param name="quality_max" type="integer" label="Mask bases with quality higher than" \r\n               value="255" min="0" max="255" help="(-X)" />\r\n        <param name="mask_regions" type="data" label="Mask regions in BED" \r\n               format="bed" help="(-M)" optional="true" />\r\n        <conditional name="sample">\r\n            <param name="sample" type="boolean" label="Sample fraction of sequences" />\r\n            <when value="true">\r\n                <param name="fraction" label="Fraction" type="float" value="1.0"\r\n                       help="(-f)" />\r\n                <param name="seed" label="Random seed" type="integer" value="11"\r\n                       help="(-s)" />\r\n            </when>\r\n            <when value="false">\r\n            </when>\r\n        </conditional>\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n        \r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n\r\n\r\n    ]]></help>\r\n    <citations>\r\n        <citation type="bibtex">\r\n@misc{githubseqtk,\r\n  author = {LastTODO, FirstTODO},\r\n  year = {TODO},\r\n  title = {seqtk},\r\n  publisher = {GitHub},\r\n  journal = {GitHub repository},\r\n  url = {https://github.com/lh3/seqtk},\r\n}</citation>\r\n    </citations>\r\n</tool>\r\n```\r\n对于这样的工具，这些工具有很多选项，但在大多数情况下使用默认值是首选——一个常见的习惯用法是使用条件将参数分为简单部分和高级部分。\r\n\r\n使用惯用法，更新此工具后的 XML 如下所示：\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n    </requirements>\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq\r\n              #if $settings.advanced == "advanced"\r\n                  $settings.shift_quality\r\n                  -q $settings.quality_min\r\n                  -X $settings.quality_max\r\n                  #if $settings.mask_regions\r\n                      -M \'$settings.mask_regions\'\r\n                  #end if\r\n                  #if $settings.sample.sample\r\n                      -f $settings.sample.fraction\r\n                      -s $settings.sample.seed\r\n                  #end if\r\n              #end if\r\n              -a \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n        <conditional name="settings">\r\n            <param name="advanced" type="select" label="Specify advanced parameters">\r\n                <option value="simple" selected="true">No, use program defaults.</option>\r\n                <option value="advanced">Yes, see full parameter list.</option>\r\n            </param>\r\n            <when value="simple">\r\n            </when>\r\n            <when value="advanced">\r\n                <param name="shift_quality" type="boolean" label="Shift quality" \r\n                       truevalue="-V" falsevalue=""\r\n                       help="shift quality by \'(-Q) - 33\' (-V)" />\r\n                <param name="quality_min" type="integer" label="Mask bases with quality lower than" \r\n                       value="0" min="0" max="255" help="(-q)" />\r\n                <param name="quality_max" type="integer" label="Mask bases with quality higher than" \r\n                       value="255" min="0" max="255" help="(-X)" />\r\n                <param name="mask_regions" type="data" label="Mask regions in BED" \r\n                       format="bed" help="(-M)" optional="true" />\r\n                <conditional name="sample">\r\n                    <param name="sample" type="boolean" label="Sample fraction of sequences" />\r\n                    <when value="true">\r\n                        <param name="fraction" label="Fraction" type="float" value="1.0"\r\n                               help="(-f)" />\r\n                        <param name="seed" label="Random seed" type="integer" value="11"\r\n                               help="(-s)" />\r\n                    </when>\r\n                    <when value="false">\r\n                    </when>\r\n                </conditional>\r\n            </when>\r\n        </conditional>\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n        \r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n\r\n\r\n    ]]></help>\r\n    <citations>\r\n        <citation type="bibtex">\r\n@misc{githubseqtk,\r\n  author = {LastTODO, FirstTODO},\r\n  year = {TODO},\r\n  title = {seqtk},\r\n  publisher = {GitHub},\r\n  journal = {GitHub repository},\r\n  url = {https://github.com/lh3/seqtk},\r\n}</citation>\r\n    </citations>\r\n</tool>\r\n```\r\n\r\n## 脚本封装\r\n\r\nTool Shed 上已经提供了许多常见的生物信息学应用程序，因此一项常见的开发任务是将各种复杂程度的脚本集成到 Galaxy 中。\r\n\r\n考虑以下小型 Perl 脚本。\r\n```perl\r\n#!/usr/bin/perl -w\r\n\r\n# usage : perl toolExample.pl <FASTA file> <output file>\r\n\r\nopen (IN, "<$ARGV[0]");\r\nopen (OUT, ">$ARGV[1]");\r\nwhile (<IN>) {\r\n    chop;\r\n    if (m/^>/) {\r\n        s/^>//;\r\n        if ($. > 1) {\r\n            print OUT sprintf("%.3f", $gc/$length) . "\\n";\r\n        }\r\n        $gc = 0;\r\n        $length = 0;\r\n    } else {\r\n        ++$gc while m/[gc]/ig;\r\n        $length += length $_;\r\n    }\r\n}\r\nprint OUT sprintf("%.3f", $gc/$length) . "\\n";\r\nclose( IN );\r\nclose( OUT );\r\n```\r\n\r\n可以按照以下步骤为此脚本构建 Galaxy 工具，并将脚本与工具 XML 文件本身放在同一目录中。这里的特殊值 `$__ tool_directory__` 是指工具（即 xml 文件）所在的目录。\r\n```xml\r\n<tool id="gc_content" name="Compute GC content">\r\n  <description>for each sequence in a file</description>\r\n  <command>perl \'$__tool_directory__/gc_content.pl\' \'$input\' output.tsv</command>\r\n  <inputs>\r\n    <param name="input" type="data" format="fasta" label="Source file"/>\r\n  </inputs>\r\n  <outputs>\r\n    <data name="output" format="tabular" from_work_dir="output.tsv" />\r\n  </outputs>\r\n  <help>\r\nThis tool computes GC content from a FASTA file.\r\n  </help>\r\n</tool>\r\n```\r\n\r\n## Macros 宏集\r\n\r\n如果您希望为单个相对简单的应用程序或脚本编写工具，则应跳过本节。如果您希望维护一系列相关工具——经验表明，您将意识到有很多重复的 XML 可以很好地做到这一点。Galaxy工具 XML 宏可以帮助减少这种重复。\r\n\r\n通过使用 `--macros` 标志，Planemo 的 `tool_init` 命令可用于生成适合工具套件的宏文件。我们看一下以前的 `tool_init` 命令的变体（唯一的区别是现在我们添加了 `--macros` 标志）。\r\n```bash\r\n$ planemo tool_init --force \\\r\n                    --macros \\\r\n                    --id \'seqtk_seq\' \\\r\n                    --name \'Convert to FASTA (seqtk)\' \\\r\n                    --requirement seqtk@1.2 \\\r\n                    --example_command \'seqtk seq -A 2.fastq > 2.fasta\' \\\r\n                    --example_input 2.fastq \\\r\n                    --example_output 2.fasta \\\r\n                    --test_case \\\r\n                    --help_from_command \'seqtk seq\'\r\n```\r\n这将在当前目录中产生两个文件（ `seqtk_seq.xml` 和 `macros.xml`），而不是一个。\r\n```xml\r\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\r\n    <macros>\r\n        <import>macros.xml</import>\r\n    </macros>\r\n    <expand macro="requirements" />\r\n    <command detect_errors="exit_code"><![CDATA[\r\n        seqtk seq -A \'$input1\' > \'$output1\'\r\n    ]]></command>\r\n    <inputs>\r\n        <param type="data" name="input1" format="fastq" />\r\n    </inputs>\r\n    <outputs>\r\n        <data name="output1" format="fasta" />\r\n    </outputs>\r\n    <tests>\r\n        <test>\r\n            <param name="input1" value="2.fastq"/>\r\n            <output name="output1" file="2.fasta"/>\r\n        </test>\r\n    </tests>\r\n    <help><![CDATA[\r\n\r\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\r\n\r\nOptions: -q INT    mask bases with quality lower than INT [0]\r\n         -X INT    mask bases with quality higher than INT [255]\r\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\r\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\r\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\r\n         -s INT    random seed (effective with -f) [11]\r\n         -f FLOAT  sample FLOAT fraction of sequences [1]\r\n         -M FILE   mask regions in BED or name list FILE [null]\r\n         -L INT    drop sequences with length shorter than INT [0]\r\n         -c        mask complement region (effective with -M)\r\n         -r        reverse complement\r\n         -A        force FASTA output (discard quality)\r\n         -C        drop comments at the header lines\r\n         -N        drop sequences containing ambiguous bases\r\n         -1        output the 2n-1 reads only\r\n         -2        output the 2n reads only\r\n         -V        shift quality by \'(-Q) - 33\'\r\n         -U        convert all bases to uppercases\r\n         -S        strip of white spaces in sequences\r\n\r\n\r\n    ]]></help>\r\n    <expand macro="citations" />\r\n</tool>\r\n```\r\n```xml\r\n<macros>\r\n    <xml name="requirements">\r\n        <requirements>\r\n        <requirement type="package" version="1.2">seqtk</requirement>\r\n            <yield/>\r\n        </requirements>\r\n    </xml>\r\n    <xml name="citations">\r\n        <citations>\r\n            <yield />\r\n        </citations>\r\n    </xml>\r\n</macros>\r\n```\r\n\r\n如您在上面的代码中所看到的，宏是可重用的 XML 块，它们使避免重复和保持 XML 简洁变得更加容易。\r\n\r\n\r\n## 参考资料\r\n\r\n- [Macros syntax](https://wiki.galaxyproject.org/Admin/Tools/ToolConfigSyntax#Reusing_Repeated_Configuration_Elements) on the Galaxy Wiki.\r\n- [GATK tools](https://github.com/galaxyproject/tools-iuc/tree/master/tools/gatk2) (example tools making extensive use of macros)\r\n- [gemini tools](https://github.com/galaxyproject/tools-iuc/tree/master/tools/gemini) (example tools making extensive use of macros)\r\n- [bedtools tools](https://github.com/galaxyproject/tools-iuc/tree/master/tools/bedtools) (example tools making extensive use of macros)\r\n- Macros implementation details - [Pull Request #129](https://bitbucket.org/galaxy/galaxy-central/pull-request/129/implement-macro-engine-to-reduce-tool/diff) and [Pull Request #140](https://bitbucket.org/galaxy/galaxy-central/pull-request/140/improvements-to-tool-xml-macroing-system/diff)\r\n- [Galaxy’s Tool XML Syntax](https://docs.galaxyproject.org/en/latest/dev/schema.html)\r\n- [Big List of Tool Development Resources](https://galaxyproject.org/develop/resources-tools/)\r\n- [Cheetah templating](https://cheetahtemplate.org/users_guide/index.html)', 'bodyText': '说明：本文章原文发布于 《使用 Planemo 进行 Galaxy 工具开发 - 语雀》，部分内容已更新。\n\n文章开始前，我们先了解一下 Planemo 到底是个什么东西。\n\nCommand-line utilities to assist in developing Galaxy and Common Workflow Language artifacts - including tools, workflows, and training materials.\n\n说白了，Planemo 就是用于 Galaxy 平台工具和 WDL 通用工作流语言相关产品辅助开发的一个命令行工具，这个程序集可以用于工具、流程，以及培训教材的开发。\n\n安装 Planemo\n无论是 pip 还是 conda 都可以安装 Planemo：\n$ pip install planemo\n$ pip install -U git+git://github.com/galaxyproject/planemo.git\n$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n$ conda install planemo\n接下来，进入今天的正题，我们来详细介绍一下怎么使用 Planemo 进行 Galaxy 工具开发。\n基础用法\n本指南将演示如何使用 Heng Li 的 Seqtk 软件包构建命令工具，该软件包用于处理 FASTA 和 FASTQ 文件中的序列数据。\n首先，我们需要先安装 Seqtk 。在这里，我们使用 conda 来安装 Seqtk (你也可以使用其他的方法安装)。\n$ conda install --force --yes -c conda-forge -c bioconda seqtk=1.2\n    ... seqtk installation ...\n$ seqtk seq\n        Usage:   seqtk seq [options] <in.fq>|<in.fa>\n        Options: -q INT    mask bases with quality lower than INT [0]\n                 -X INT    mask bases with quality higher than INT [255]\n                 -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n                 -l INT    number of residues per line; 0 for 2^32-1 [0]\n                 -Q INT    quality shift: ASCII-INT gives base quality [33]\n                 -s INT    random seed (effective with -f) [11]\n                 -f FLOAT  sample FLOAT fraction of sequences [1]\n                 -M FILE   mask regions in BED or name list FILE [null]\n                 -L INT    drop sequences with length shorter than INT [0]\n                 -c        mask complement region (effective with -M)\n                 -r        reverse complement\n                 -A        force FASTA output (discard quality)\n                 -C        drop comments at the header lines\n                 -N        drop sequences containing ambiguous bases\n                 -1        output the 2n-1 reads only\n                 -2        output the 2n reads only\n                 -V        shift quality by \'(-Q) - 33\'\n接下来，我们将下载一个 FASTQ 示例文件，并测试一个简单的 Seqtk 命令 seq ，该命令将 FASTQ 文件转换为 FASTA。\n$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\n$ seqtk seq -A 2.fastq > 2.fasta\n$ cat 2.fasta\n>EAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC\n>EAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA\n>EAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG\n有关功能齐全的 Seqtk 包封装，可以在 GitHub 上查看 Helena Rasche\'s wrappers。\nGalaxy 工具文件只是 XML 文件，因此此时可以打开文本编辑器并开始编写工具。Planemo 有一个命令 tool_init 可以快速生成一些样板 XML，因此首先开始。\n$ planemo tool_init --id \'seqtk_seq\' --name \'Convert to FASTA (seqtk)\'\ntool_init 命令可以采用各种复杂的参数，但如上面展示的 --id 和 --name 是其中两个最基本的参数。每个 Galaxy 工具都需要一个 ID（这是 Galaxy 自身用来标识该工具的简短标识符）和一个名称（此名称会显示给 Galaxy 用户，并且应该是该工具的简短描述）。工具名称可以包含空格，但其 ID 不能包含空格。\n上面的命令将生成一个 seqtk_seq.xml 文件，这个文件看起来像这样：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        TODO: Fill in command template.\n    ]]></command>\n    <inputs>\n    </inputs>\n    <outputs>\n    </outputs>\n    <help><![CDATA[\n        TODO: Fill in help.\n    ]]></help>\n</tool>\n这个生成的模板 XML 文件具有了 Galaxy 工具所需的公共部分内容，但你仍然需要打开编辑器并填写命令模板、输入参数描述、工具输出信息、帮助部分信息等。\ntool_init 命令也可以做得更好。 们可以使用在 seqtk seq -a 2.fastq> 2.fasta 上面尝试过的测试命令作为示例，通过指定输入和输出来生成命令块，如下所示。\n$ planemo tool_init --force \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -a 2.fastq > 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta\n这将生成以下 XML 文件- 该文件具有正确的输入和输出定义以及实际的命令模板。\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <help><![CDATA[\n        TODO: Fill in help.\n    ]]></help>\n</tool>(\n如本节开头所示，命令 seqtk seq 会为 seq 命令生成帮助消息。 tool_init 可以获取该帮助消息，并使用 help_from_command 选项将其正确粘贴在生成的工具 XML 文件中。\n通常，命令帮助消息并不完全适用于工具，因为它们会提到参数名称和由工具抽象出来的类似细节，但它们可能是一个很好的起点。\n以下 Planemo 的 tool_init 的调用已增强为使用 --help_from_command。\n$ planemo tool_init --force \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -a 2.fastq > 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --cite_url \'https://github.com/lh3/seqtk\' \\\n                    --help_from_command \'seqtk seq\'\n除了演示 --help_from_command 之外，这还演示了使用 --test_case 从我们的示例生成测试用例并为基础工具添加引用。生成的工具 XML 文件为：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n\n\n    ]]></help>\n    <citations>\n        <citation type="bibtex">\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}</citation>\n    </citations>\n</tool>\n至此，我们有了一个功能相当齐全的 Galaxy 工具，它带有测试和帮助。这是一个非常简单的示例——通常，您需要在工具中投入更多工作才能实现这一点， tool_init 实际上只是为了让您入门而设计的。\n现在让我们检查并测试我们开发的工具。Planemo的 lint（或仅 l ）命令将检查工具的 XML 有效性，检查是否有明显的错误以及是否符合 IUC 的最佳做法。\n$ planemo l\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\nApplying linter tests... CHECK\n.. CHECK: 1 test(s) found.\nApplying linter output... CHECK\n.. INFO: 1 outputs found.\nApplying linter inputs... CHECK\n.. INFO: Found 1 input parameters.\nApplying linter help... CHECK\n.. CHECK: Tool contains help section.\n.. CHECK: Help contains valid reStructuredText.\nApplying linter general... CHECK\n.. CHECK: Tool defines a version [0.1.0].\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\n.. CHECK: Tool defines an id [seqtk_seq].\n.. CHECK: Tool targets 16.01 Galaxy profile.\nApplying linter command... CHECK\n.. INFO: Tool contains a command.\nApplying linter citations... CHECK\n.. CHECK: Found 1 likely valid citations.\nApplying linter tool_xsd... CHECK\n.. INFO: File validates against XML schema.\n默认情况下， lint 会在您当前的工作目录中找到所有工具，但是我们可以使用 planemo lint seqtk_seq.xml 指定一个特定的工具。\n接下来，我们可以使用 test（或仅执行 t ）命令运行工具的功能测试。这将打印很多输出（因为它启动了 Galaxy 实例），但最终应该显示我们通过的一项测试。\n\n如果你的服务器已经安装了 Galaxy 实例，你可以编辑 ~/.planemo.yml 文件，指定 Galaxy 实例路径。\n\n## Specify a default galaxy_root for the `test` and `serve` commands here.\ngalaxy_root: /home/user/galaxy\n\n完整的 ~/.planemo.yml 示例，参考：https://planemo.readthedocs.io/en/latest/configuration.html\n\n$ planemo t\n...\nAll 1 test(s) executed passed.\nseqtk_seq[0]: passed\n除了在控制台中将测试结果显示为红色（失败）或绿色（通过）外，Planemo 还默认为测试结果创建 HTML 报告。 还有更多测试报告选项可用，例如 --test_output_xunit，在某些持续集成环境中很有用。有关更多选项，请参见 planemo test --help ，以及 test_reports 命令。\n现在，我们可以使用 serve（或仅使用 s ）命令打开 Galaxy。\n$ planemo s\n...\nserving on http://127.0.0.1:9090\n在网络浏览器中打开 http://127.0.0.1:9090 以查看您的新工具。\n服务和测试可以通过各种命令行参数传递，例如 --galaxy_root，以指定要使用的 Galaxy 实例（默认情况下，planemo 将仅为 planemo 下载和管理实例）。\n简单参数\n我们为 seqtk seq 命令构建了一个工具包的封装，但是该工具实际上具有我们可能希望向 Galaxy 用户公开的其他选项。\n让我们从 help 命令中获取一些参数，并构建 Galaxy 的 param 块以粘贴到该工具的 input 块中。\n-V        shift quality by \'(-Q) - 33\'\n在上一节中，我们看到了输入文件在 param 块中是一个 data 的类型，除此之外我们还可以使用许多不同种类的参数。如标志参数（例如以上 -V 参数），通常在 Galaxy 工具的 XML 文件中由 boolean 来表示。\n<param name="shift_quality" type="boolean" label="Shift quality"\n       truevalue="-V" falsevalue=""\n       help="shift quality by \'(-Q) - 33\' (-V)" />\n然后，我们可以将 $shift_quality 粘贴在 command 块中，如果用户选择了此选项，它将扩展为 -V （因为我们已将其定义为 truevalue ）。如果用户未选择此选项，则 $shift_quality 将仅扩展为空字符串，而不会影响生成的命令行。\n现在考虑以下的 seqtk seq 参数：\n-q INT    mask bases with quality lower than INT [0]\n-X INT    mask bases with quality higher than INT [255]\n这些可以转换为 Galaxy 参数，如下所示：\n<param name="quality_min" type="integer" label="Mask bases with quality lower than"\n       value="0" min="0" max="255" help="(-q)" />\n<param name="quality_max" type="integer" label="Mask bases with quality higher than"\n       value="255" min="0" max="255" help="(-X)" />\n这些可以作为 -q $quality_min -X $quality_max 添加到命令标签中。\n此时，该工具将如下所示：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq\n              $shift_quality\n              -q $quality_min\n              -X $quality_max\n              -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n        <param name="shift_quality" type="boolean" label="Shift quality" \n               truevalue="-V" falsevalue=""\n               help="shift quality by \'(-Q) - 33\' (-V)" />\n        <param name="quality_min" type="integer" label="Mask bases with quality lower than" \n               value="0" min="0" max="255" help="(-q)" />\n        <param name="quality_max" type="integer" label="Mask bases with quality higher than" \n               value="255" min="0" max="255" help="(-X)" />\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n        \nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]></help>\n    <citations>\n        <citation type="bibtex">\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}</citation>\n    </citations>\n</tool>\n条件参数\n以前的参数很简单，因为它们总是出现，现在考虑一下下面的参数。\n-M FILE   mask regions in BED or name list FILE [null]\n我们可以通过添加属性 optional ="true" 将该数据类型参数标记为可选。\n<param name="mask_regions" type="data" label="Mask regions in BED"\n       format="bed" help="(-M)" optional="true" />\n然后，不仅可以直接在命令块中使用 $mask_regions，还可以将其包装在 if 语句中（因为工具 XML 文件支持 Cheetah）。\n#if $mask_regions\n-M \'$mask_regions\'\n#end if\n接着，我们考虑这一组参数：\n-s INT    random seed (effective with -f) [11]\n-f FLOAT  sample FLOAT fraction of sequences [1]\n在这种情况下，只有在设置了样本参数的情况下，才能看到或使用 -s 随机种子参数。我们可以使用 conditional 条件块来表达这一点。\n<conditional name="sample">\n    <param name="sample_selector" type="boolean" label="Sample fraction of sequences" />\n    <when value="true">\n        <param name="fraction" label="Fraction" type="float" value="1.0"\n               help="(-f)" />\n        <param name="seed" label="Random seed" type="integer" value="11"\n               help="(-s)" />\n    </when>\n    <when value="false">\n    </when>\n</conditional>\n在命令块中，我们可以再次使用 if 语句包括这些参数。\n#if $sample.sample_selector\n-f $sample.fraction -s $sample.seed\n#end if\n注意，我们必须使用 sample. 的前缀来引用这个参数，因为它们是在 sample 的条件块内定义的。\n现在该工具的最新版本如下：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq\n              $shift_quality\n              -q $quality_min\n              -X $quality_max\n              #if $mask_regions\n                  -M \'$mask_regions\'\n              #end if\n              #if $sample.sample\n                  -f $sample.fraction\n                  -s $sample.seed\n              #end if\n              -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n        <param name="shift_quality" type="boolean" label="Shift quality" \n               truevalue="-V" falsevalue=""\n               help="shift quality by \'(-Q) - 33\' (-V)" />\n        <param name="quality_min" type="integer" label="Mask bases with quality lower than" \n               value="0" min="0" max="255" help="(-q)" />\n        <param name="quality_max" type="integer" label="Mask bases with quality higher than" \n               value="255" min="0" max="255" help="(-X)" />\n        <param name="mask_regions" type="data" label="Mask regions in BED" \n               format="bed" help="(-M)" optional="true" />\n        <conditional name="sample">\n            <param name="sample" type="boolean" label="Sample fraction of sequences" />\n            <when value="true">\n                <param name="fraction" label="Fraction" type="float" value="1.0"\n                       help="(-f)" />\n                <param name="seed" label="Random seed" type="integer" value="11"\n                       help="(-s)" />\n            </when>\n            <when value="false">\n            </when>\n        </conditional>\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n        \nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]></help>\n    <citations>\n        <citation type="bibtex">\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}</citation>\n    </citations>\n</tool>\n对于这样的工具，这些工具有很多选项，但在大多数情况下使用默认值是首选——一个常见的习惯用法是使用条件将参数分为简单部分和高级部分。\n使用惯用法，更新此工具后的 XML 如下所示：\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n    </requirements>\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq\n              #if $settings.advanced == "advanced"\n                  $settings.shift_quality\n                  -q $settings.quality_min\n                  -X $settings.quality_max\n                  #if $settings.mask_regions\n                      -M \'$settings.mask_regions\'\n                  #end if\n                  #if $settings.sample.sample\n                      -f $settings.sample.fraction\n                      -s $settings.sample.seed\n                  #end if\n              #end if\n              -a \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n        <conditional name="settings">\n            <param name="advanced" type="select" label="Specify advanced parameters">\n                <option value="simple" selected="true">No, use program defaults.</option>\n                <option value="advanced">Yes, see full parameter list.</option>\n            </param>\n            <when value="simple">\n            </when>\n            <when value="advanced">\n                <param name="shift_quality" type="boolean" label="Shift quality" \n                       truevalue="-V" falsevalue=""\n                       help="shift quality by \'(-Q) - 33\' (-V)" />\n                <param name="quality_min" type="integer" label="Mask bases with quality lower than" \n                       value="0" min="0" max="255" help="(-q)" />\n                <param name="quality_max" type="integer" label="Mask bases with quality higher than" \n                       value="255" min="0" max="255" help="(-X)" />\n                <param name="mask_regions" type="data" label="Mask regions in BED" \n                       format="bed" help="(-M)" optional="true" />\n                <conditional name="sample">\n                    <param name="sample" type="boolean" label="Sample fraction of sequences" />\n                    <when value="true">\n                        <param name="fraction" label="Fraction" type="float" value="1.0"\n                               help="(-f)" />\n                        <param name="seed" label="Random seed" type="integer" value="11"\n                               help="(-s)" />\n                    </when>\n                    <when value="false">\n                    </when>\n                </conditional>\n            </when>\n        </conditional>\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n        \nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]></help>\n    <citations>\n        <citation type="bibtex">\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}</citation>\n    </citations>\n</tool>\n脚本封装\nTool Shed 上已经提供了许多常见的生物信息学应用程序，因此一项常见的开发任务是将各种复杂程度的脚本集成到 Galaxy 中。\n考虑以下小型 Perl 脚本。\n#!/usr/bin/perl -w\n\n# usage : perl toolExample.pl <FASTA file> <output file>\n\nopen (IN, "<$ARGV[0]");\nopen (OUT, ">$ARGV[1]");\nwhile (<IN>) {\n    chop;\n    if (m/^>/) {\n        s/^>//;\n        if ($. > 1) {\n            print OUT sprintf("%.3f", $gc/$length) . "\\n";\n        }\n        $gc = 0;\n        $length = 0;\n    } else {\n        ++$gc while m/[gc]/ig;\n        $length += length $_;\n    }\n}\nprint OUT sprintf("%.3f", $gc/$length) . "\\n";\nclose( IN );\nclose( OUT );\n可以按照以下步骤为此脚本构建 Galaxy 工具，并将脚本与工具 XML 文件本身放在同一目录中。这里的特殊值 $__ tool_directory__ 是指工具（即 xml 文件）所在的目录。\n<tool id="gc_content" name="Compute GC content">\n  <description>for each sequence in a file</description>\n  <command>perl \'$__tool_directory__/gc_content.pl\' \'$input\' output.tsv</command>\n  <inputs>\n    <param name="input" type="data" format="fasta" label="Source file"/>\n  </inputs>\n  <outputs>\n    <data name="output" format="tabular" from_work_dir="output.tsv" />\n  </outputs>\n  <help>\nThis tool computes GC content from a FASTA file.\n  </help>\n</tool>\nMacros 宏集\n如果您希望为单个相对简单的应用程序或脚本编写工具，则应跳过本节。如果您希望维护一系列相关工具——经验表明，您将意识到有很多重复的 XML 可以很好地做到这一点。Galaxy工具 XML 宏可以帮助减少这种重复。\n通过使用 --macros 标志，Planemo 的 tool_init 命令可用于生成适合工具套件的宏文件。我们看一下以前的 tool_init 命令的变体（唯一的区别是现在我们添加了 --macros 标志）。\n$ planemo tool_init --force \\\n                    --macros \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -A 2.fastq > 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --help_from_command \'seqtk seq\'\n这将在当前目录中产生两个文件（ seqtk_seq.xml 和 macros.xml），而不是一个。\n<tool id="seqtk_seq" name="Convert to FASTA (seqtk)" version="0.1.0" python_template_version="3.5">\n    <macros>\n        <import>macros.xml</import>\n    </macros>\n    <expand macro="requirements" />\n    <command detect_errors="exit_code"><![CDATA[\n        seqtk seq -A \'$input1\' > \'$output1\'\n    ]]></command>\n    <inputs>\n        <param type="data" name="input1" format="fastq" />\n    </inputs>\n    <outputs>\n        <data name="output1" format="fasta" />\n    </outputs>\n    <tests>\n        <test>\n            <param name="input1" value="2.fastq"/>\n            <output name="output1" file="2.fasta"/>\n        </test>\n    </tests>\n    <help><![CDATA[\n\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n\n\n    ]]></help>\n    <expand macro="citations" />\n</tool>\n<macros>\n    <xml name="requirements">\n        <requirements>\n        <requirement type="package" version="1.2">seqtk</requirement>\n            <yield/>\n        </requirements>\n    </xml>\n    <xml name="citations">\n        <citations>\n            <yield />\n        </citations>\n    </xml>\n</macros>\n如您在上面的代码中所看到的，宏是可重用的 XML 块，它们使避免重复和保持 XML 简洁变得更加容易。\n参考资料\n\nMacros syntax on the Galaxy Wiki.\nGATK tools (example tools making extensive use of macros)\ngemini tools (example tools making extensive use of macros)\nbedtools tools (example tools making extensive use of macros)\nMacros implementation details - Pull Request #129 and Pull Request #140\nGalaxy’s Tool XML Syntax\nBig List of Tool Development Resources\nCheetah templating', 'bodyHTML': '<blockquote>\n<p dir="auto">说明：本文章原文发布于 《<a href="https://www.yuque.com/shenweiyan/biox/planemo-for-galaxy" rel="nofollow">使用 Planemo 进行 Galaxy 工具开发 - 语雀</a>》，部分内容已更新。</p>\n</blockquote>\n<p dir="auto">文章开始前，我们先了解一下 Planemo 到底是个什么东西。</p>\n<blockquote>\n<p dir="auto">Command-line utilities to assist in developing <a href="http://galaxyproject.org/" rel="nofollow">Galaxy</a> and <a href="https://www.commonwl.org/" rel="nofollow">Common Workflow Language</a> artifacts - including tools, workflows, and training materials.</p>\n</blockquote>\n<p dir="auto">说白了，Planemo 就是用于 Galaxy 平台工具和 WDL 通用工作流语言相关产品辅助开发的一个命令行工具，这个程序集可以用于工具、流程，以及培训教材的开发。</p>\n\n<h2 dir="auto">安装 Planemo</h2>\n<p dir="auto">无论是 pip 还是 conda 都可以安装 Planemo：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ pip install planemo\n$ pip install -U git+git://github.com/galaxyproject/planemo.git"><pre class="notranslate">$ pip install planemo\n$ pip install -U git+git://github.com/galaxyproject/planemo.git</pre></div>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n$ conda install planemo"><pre class="notranslate">$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n$ conda install planemo</pre></div>\n<p dir="auto">接下来，进入今天的正题，我们来详细介绍一下怎么使用 Planemo 进行 Galaxy 工具开发。</p>\n<h2 dir="auto">基础用法</h2>\n<p dir="auto">本指南将演示如何使用 Heng Li 的 <code class="notranslate">Seqtk</code> 软件包构建命令工具，该软件包用于处理 FASTA 和 FASTQ 文件中的序列数据。</p>\n<p dir="auto">首先，我们需要先安装 <code class="notranslate">Seqtk</code> 。在这里，我们使用 <code class="notranslate">conda</code> 来安装 <code class="notranslate">Seqtk</code> (你也可以使用其他的方法安装)。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ conda install --force --yes -c conda-forge -c bioconda seqtk=1.2\n    ... seqtk installation ...\n$ seqtk seq\n        Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n        Options: -q INT    mask bases with quality lower than INT [0]\n                 -X INT    mask bases with quality higher than INT [255]\n                 -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n                 -l INT    number of residues per line; 0 for 2^32-1 [0]\n                 -Q INT    quality shift: ASCII-INT gives base quality [33]\n                 -s INT    random seed (effective with -f) [11]\n                 -f FLOAT  sample FLOAT fraction of sequences [1]\n                 -M FILE   mask regions in BED or name list FILE [null]\n                 -L INT    drop sequences with length shorter than INT [0]\n                 -c        mask complement region (effective with -M)\n                 -r        reverse complement\n                 -A        force FASTA output (discard quality)\n                 -C        drop comments at the header lines\n                 -N        drop sequences containing ambiguous bases\n                 -1        output the 2n-1 reads only\n                 -2        output the 2n reads only\n                 -V        shift quality by \'(-Q) - 33\'"><pre class="notranslate">$ conda install --force --yes -c conda-forge -c bioconda seqtk=1.2\n    ... seqtk installation ...\n$ seqtk seq\n        Usage:   seqtk seq [options] <span class="pl-k">&lt;</span>in.fq<span class="pl-k">&gt;</span><span class="pl-k">|</span><span class="pl-k">&lt;</span>in.fa<span class="pl-k">&gt;</span>\n        Options: -q INT    mask bases with quality lower than INT [0]\n                 -X INT    mask bases with quality higher than INT [255]\n                 -n CHAR   masked bases converted to CHAR<span class="pl-k">;</span> 0 <span class="pl-k">for</span> lowercase [0]\n                 -l INT    number of residues per line<span class="pl-k">;</span> 0 <span class="pl-k">for</span> 2^32-1 [0]\n                 -Q INT    quality shift: ASCII-INT gives base quality [33]\n                 -s INT    random seed (effective with -f) [11]\n                 -f FLOAT  sample FLOAT fraction of sequences [1]\n                 -M FILE   mask regions <span class="pl-k">in</span> BED or name list FILE [null]\n                 -L INT    drop sequences with length shorter than INT [0]\n                 -c        mask complement region (effective with -M)\n                 -r        reverse complement\n                 -A        force FASTA output (discard quality)\n                 -C        drop comments at the header lines\n                 -N        drop sequences containing ambiguous bases\n                 -1        output the 2n-1 reads only\n                 -2        output the 2n reads only\n                 -V        <span class="pl-c1">shift</span> quality by <span class="pl-s"><span class="pl-pds">\'</span>(-Q) - 33<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto">接下来，我们将下载一个 FASTQ 示例文件，并测试一个简单的 Seqtk 命令 <code class="notranslate">seq</code> ，该命令将 FASTQ 文件转换为 FASTA。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\n$ seqtk seq -A 2.fastq &gt; 2.fasta\n$ cat 2.fasta\n&gt;EAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC\n&gt;EAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA\n&gt;EAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG"><pre class="notranslate">$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\n$ seqtk seq -A 2.fastq <span class="pl-k">&gt;</span> 2.fasta\n$ cat 2.fasta\n<span class="pl-k">&gt;</span>EAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC\n<span class="pl-k">&gt;</span>EAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA\n<span class="pl-k">&gt;</span>EAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG</pre></div>\n<p dir="auto">有关功能齐全的 Seqtk 包封装，可以在 GitHub 上查看 <a href="https://github.com/galaxyproject/tools-iuc/tree/master/tools/seqtk">Helena Rasche\'s wrappers</a>。</p>\n<p dir="auto">Galaxy 工具文件只是 XML 文件，因此此时可以打开文本编辑器并开始编写工具。Planemo 有一个命令 <code class="notranslate">tool_init</code> 可以快速生成一些样板 XML，因此首先开始。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo tool_init --id \'seqtk_seq\' --name \'Convert to FASTA (seqtk)\'"><pre class="notranslate">$ planemo tool_init --id <span class="pl-s"><span class="pl-pds">\'</span>seqtk_seq<span class="pl-pds">\'</span></span> --name <span class="pl-s"><span class="pl-pds">\'</span>Convert to FASTA (seqtk)<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto"><code class="notranslate">tool_init</code> 命令可以采用各种复杂的参数，但如上面展示的 <code class="notranslate">--id</code> 和 <code class="notranslate">--name</code> 是其中两个最基本的参数。每个 Galaxy 工具都需要一个 ID（这是 Galaxy 自身用来标识该工具的简短标识符）和一个名称（此名称会显示给 Galaxy 用户，并且应该是该工具的简短描述）。工具名称可以包含空格，但其 ID 不能包含空格。</p>\n<p dir="auto">上面的命令将生成一个 seqtk_seq.xml 文件，这个文件看起来像这样：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        TODO: Fill in command template.\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n    &lt;/outputs&gt;\n    &lt;help&gt;&lt;![CDATA[\n        TODO: Fill in help.\n    ]]&gt;&lt;/help&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        TODO: Fill in command template.</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        TODO: Fill in help.</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<p dir="auto">这个生成的模板 XML 文件具有了 Galaxy 工具所需的公共部分内容，但你仍然需要打开编辑器并填写命令模板、输入参数描述、工具输出信息、帮助部分信息等。</p>\n<p dir="auto"><code class="notranslate">tool_init</code> 命令也可以做得更好。 们可以使用在 <code class="notranslate">seqtk seq -a 2.fastq&gt; 2.fasta</code> 上面尝试过的测试命令作为示例，通过指定输入和输出来生成命令块，如下所示。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo tool_init --force \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -a 2.fastq &gt; 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta"><pre class="notranslate">$ planemo tool_init --force \\\n                    --id <span class="pl-s"><span class="pl-pds">\'</span>seqtk_seq<span class="pl-pds">\'</span></span> \\\n                    --name <span class="pl-s"><span class="pl-pds">\'</span>Convert to FASTA (seqtk)<span class="pl-pds">\'</span></span> \\\n                    --requirement seqtk@1.2 \\\n                    --example_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq -a 2.fastq &gt; 2.fasta<span class="pl-pds">\'</span></span> \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta</pre></div>\n<p dir="auto">这将生成以下 XML 文件- 该文件具有正确的输入和输出定义以及实际的命令模板。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;help&gt;&lt;![CDATA[\n        TODO: Fill in help.\n    ]]&gt;&lt;/help&gt;\n&lt;/tool&gt;("><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        TODO: Fill in help.</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;(</pre></div>\n<p dir="auto">如本节开头所示，命令 <code class="notranslate">seqtk seq</code> 会为 <code class="notranslate">seq</code> 命令生成帮助消息。 <code class="notranslate">tool_init</code> 可以获取该帮助消息，并使用 <code class="notranslate">help_from_command</code> 选项将其正确粘贴在生成的工具 XML 文件中。</p>\n<p dir="auto">通常，命令帮助消息并不完全适用于工具，因为它们会提到参数名称和由工具抽象出来的类似细节，但它们可能是一个很好的起点。</p>\n<p dir="auto">以下 Planemo 的 <code class="notranslate">tool_init</code> 的调用已增强为使用 <code class="notranslate">--help_from_command</code>。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo tool_init --force \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -a 2.fastq &gt; 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --cite_url \'https://github.com/lh3/seqtk\' \\\n                    --help_from_command \'seqtk seq\'"><pre class="notranslate">$ planemo tool_init --force \\\n                    --id <span class="pl-s"><span class="pl-pds">\'</span>seqtk_seq<span class="pl-pds">\'</span></span> \\\n                    --name <span class="pl-s"><span class="pl-pds">\'</span>Convert to FASTA (seqtk)<span class="pl-pds">\'</span></span> \\\n                    --requirement seqtk@1.2 \\\n                    --example_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq -a 2.fastq &gt; 2.fasta<span class="pl-pds">\'</span></span> \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --cite_url <span class="pl-s"><span class="pl-pds">\'</span>https://github.com/lh3/seqtk<span class="pl-pds">\'</span></span> \\\n                    --help_from_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto">除了演示 <code class="notranslate">--help_from_command</code> 之外，这还演示了使用 <code class="notranslate">--test_case</code> 从我们的示例生成测试用例并为基础工具添加引用。生成的工具 XML 文件为：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n\nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;citations&gt;\n        &lt;citation type=&quot;bibtex&quot;&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/citation&gt;\n    &lt;/citations&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s"></span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s">         -S        strip of white spaces in sequences</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">citations</span>&gt;\n        &lt;<span class="pl-ent">citation</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>bibtex<span class="pl-pds">"</span></span>&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/<span class="pl-ent">citation</span>&gt;\n    &lt;/<span class="pl-ent">citations</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<p dir="auto">至此，我们有了一个功能相当齐全的 Galaxy 工具，它带有测试和帮助。这是一个非常简单的示例——通常，您需要在工具中投入更多工作才能实现这一点， <code class="notranslate">tool_init</code> 实际上只是为了让您入门而设计的。</p>\n<p dir="auto">现在让我们检查并测试我们开发的工具。Planemo的 <code class="notranslate">lint</code>（或仅 <code class="notranslate">l</code> ）命令将检查工具的 XML 有效性，检查是否有明显的错误以及是否符合 IUC 的最佳做法。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo l\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\nApplying linter tests... CHECK\n.. CHECK: 1 test(s) found.\nApplying linter output... CHECK\n.. INFO: 1 outputs found.\nApplying linter inputs... CHECK\n.. INFO: Found 1 input parameters.\nApplying linter help... CHECK\n.. CHECK: Tool contains help section.\n.. CHECK: Help contains valid reStructuredText.\nApplying linter general... CHECK\n.. CHECK: Tool defines a version [0.1.0].\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\n.. CHECK: Tool defines an id [seqtk_seq].\n.. CHECK: Tool targets 16.01 Galaxy profile.\nApplying linter command... CHECK\n.. INFO: Tool contains a command.\nApplying linter citations... CHECK\n.. CHECK: Found 1 likely valid citations.\nApplying linter tool_xsd... CHECK\n.. INFO: File validates against XML schema."><pre class="notranslate">$ planemo l\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\nApplying linter tests... CHECK\n.. CHECK: 1 test(s) found.\nApplying linter output... CHECK\n.. INFO: 1 outputs found.\nApplying linter inputs... CHECK\n.. INFO: Found 1 input parameters.\nApplying linter help... CHECK\n.. CHECK: Tool contains <span class="pl-c1">help</span> section.\n.. CHECK: Help contains valid reStructuredText.\nApplying linter general... CHECK\n.. CHECK: Tool defines a version [0.1.0].\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\n.. CHECK: Tool defines an id [seqtk_seq].\n.. CHECK: Tool targets 16.01 Galaxy profile.\nApplying linter command... CHECK\n.. INFO: Tool contains a command.\nApplying linter citations... CHECK\n.. CHECK: Found 1 likely valid citations.\nApplying linter tool_xsd... CHECK\n.. INFO: File validates against XML schema.</pre></div>\n<p dir="auto">默认情况下， <code class="notranslate">lint</code> 会在您当前的工作目录中找到所有工具，但是我们可以使用 <code class="notranslate">planemo lint seqtk_seq.xml</code> 指定一个特定的工具。</p>\n<p dir="auto">接下来，我们可以使用 <code class="notranslate">test</code>（或仅执行 <code class="notranslate">t</code> ）命令运行工具的功能测试。这将打印很多输出（因为它启动了 Galaxy 实例），但最终应该显示我们通过的一项测试。</p>\n<blockquote>\n<p dir="auto">如果你的服务器已经安装了 Galaxy 实例，你可以编辑 ~/.planemo.yml 文件，指定 Galaxy 实例路径。</p>\n</blockquote>\n<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="## Specify a default galaxy_root for the `test` and `serve` commands here.\ngalaxy_root: /home/user/galaxy"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span># Specify a default galaxy_root for the `test` and `serve` commands here.</span>\n<span class="pl-ent">galaxy_root</span>: <span class="pl-s">/home/user/galaxy</span></pre></div>\n<blockquote>\n<p dir="auto">完整的 <code class="notranslate">~/.planemo.yml</code> 示例，参考：<a href="https://planemo.readthedocs.io/en/latest/configuration.html" rel="nofollow">https://planemo.readthedocs.io/en/latest/configuration.html</a></p>\n</blockquote>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo t\n...\nAll 1 test(s) executed passed.\nseqtk_seq[0]: passed"><pre class="notranslate">$ planemo t\n...\nAll 1 test(s) executed passed.\nseqtk_seq[0]: passed</pre></div>\n<p dir="auto">除了在控制台中将测试结果显示为红色（失败）或绿色（通过）外，Planemo 还默认为测试结果创建 HTML 报告。 还有更多测试报告选项可用，例如 <code class="notranslate">--test_output_xunit</code>，在某些持续集成环境中很有用。有关更多选项，请参见 <code class="notranslate">planemo test --help</code> ，以及 <code class="notranslate">test_reports</code> 命令。</p>\n<p dir="auto">现在，我们可以使用 <code class="notranslate">serve</code>（或仅使用 <code class="notranslate">s</code> ）命令打开 Galaxy。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo s\n...\nserving on http://127.0.0.1:9090"><pre class="notranslate">$ planemo s\n...\nserving on http://127.0.0.1:9090</pre></div>\n<p dir="auto">在网络浏览器中打开 <a href="http://127.0.0.1:9090" rel="nofollow">http://127.0.0.1:9090</a> 以查看您的新工具。</p>\n<p dir="auto">服务和测试可以通过各种命令行参数传递，例如 <code class="notranslate">--galaxy_root</code>，以指定要使用的 Galaxy 实例（默认情况下，planemo 将仅为 planemo 下载和管理实例）。</p>\n<h2 dir="auto">简单参数</h2>\n<p dir="auto">我们为 <code class="notranslate">seqtk seq</code> 命令构建了一个工具包的封装，但是该工具实际上具有我们可能希望向 Galaxy 用户公开的其他选项。</p>\n<p dir="auto">让我们从 <code class="notranslate">help</code> 命令中获取一些参数，并构建 Galaxy 的 <code class="notranslate">param</code> 块以粘贴到该工具的 <code class="notranslate">input</code> 块中。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-V        shift quality by \'(-Q) - 33\'"><pre class="notranslate">-V        <span class="pl-c1">shift</span> quality by <span class="pl-s"><span class="pl-pds">\'</span>(-Q) - 33<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto">在上一节中，我们看到了输入文件在 <code class="notranslate">param</code> 块中是一个 <code class="notranslate">data</code> 的类型，除此之外我们还可以使用许多不同种类的参数。如标志参数（例如以上 <code class="notranslate">-V</code> 参数），通常在 Galaxy 工具的 XML 文件中由 <code class="notranslate">boolean</code> 来表示。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;param name=&quot;shift_quality&quot; type=&quot;boolean&quot; label=&quot;Shift quality&quot;\n       truevalue=&quot;-V&quot; falsevalue=&quot;&quot;\n       help=&quot;shift quality by \'(-Q) - 33\' (-V)&quot; /&gt;"><pre class="notranslate">&lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>shift_quality<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Shift quality<span class="pl-pds">"</span></span>\n       <span class="pl-e">truevalue</span>=<span class="pl-s"><span class="pl-pds">"</span>-V<span class="pl-pds">"</span></span> <span class="pl-e">falsevalue</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n       <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>shift quality by \'(-Q) - 33\' (-V)<span class="pl-pds">"</span></span> /&gt;</pre></div>\n<p dir="auto">然后，我们可以将 <code class="notranslate">$shift_quality</code> 粘贴在 <code class="notranslate">command</code> 块中，如果用户选择了此选项，它将扩展为 <code class="notranslate">-V</code> （因为我们已将其定义为 <code class="notranslate">truevalue</code> ）。如果用户未选择此选项，则 <code class="notranslate">$shift_quality</code> 将仅扩展为空字符串，而不会影响生成的命令行。</p>\n<p dir="auto">现在考虑以下的 <code class="notranslate">seqtk seq</code> 参数：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-q INT    mask bases with quality lower than INT [0]\n-X INT    mask bases with quality higher than INT [255]"><pre class="notranslate">-q INT    mask bases with quality lower than INT [0]\n-X INT    mask bases with quality higher than INT [255]</pre></div>\n<p dir="auto">这些可以转换为 Galaxy 参数，如下所示：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;param name=&quot;quality_min&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality lower than&quot;\n       value=&quot;0&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-q)&quot; /&gt;\n&lt;param name=&quot;quality_max&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality higher than&quot;\n       value=&quot;255&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-X)&quot; /&gt;"><pre class="notranslate">&lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_min<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality lower than<span class="pl-pds">"</span></span>\n       <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-q)<span class="pl-pds">"</span></span> /&gt;\n&lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_max<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality higher than<span class="pl-pds">"</span></span>\n       <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-X)<span class="pl-pds">"</span></span> /&gt;</pre></div>\n<p dir="auto">这些可以作为 <code class="notranslate">-q $quality_min -X $quality_max</code> 添加到命令标签中。</p>\n<p dir="auto">此时，该工具将如下所示：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq\n              $shift_quality\n              -q $quality_min\n              -X $quality_max\n              -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n        &lt;param name=&quot;shift_quality&quot; type=&quot;boolean&quot; label=&quot;Shift quality&quot; \n               truevalue=&quot;-V&quot; falsevalue=&quot;&quot;\n               help=&quot;shift quality by \'(-Q) - 33\' (-V)&quot; /&gt;\n        &lt;param name=&quot;quality_min&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality lower than&quot; \n               value=&quot;0&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-q)&quot; /&gt;\n        &lt;param name=&quot;quality_max&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality higher than&quot; \n               value=&quot;255&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-X)&quot; /&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n        \nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;citations&gt;\n        &lt;citation type=&quot;bibtex&quot;&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/citation&gt;\n    &lt;/citations&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq</span>\n<span class="pl-s">              $shift_quality</span>\n<span class="pl-s">              -q $quality_min</span>\n<span class="pl-s">              -X $quality_max</span>\n<span class="pl-s">              -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>shift_quality<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Shift quality<span class="pl-pds">"</span></span> \n               <span class="pl-e">truevalue</span>=<span class="pl-s"><span class="pl-pds">"</span>-V<span class="pl-pds">"</span></span> <span class="pl-e">falsevalue</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>shift quality by \'(-Q) - 33\' (-V)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_min<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality lower than<span class="pl-pds">"</span></span> \n               <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-q)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_max<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality higher than<span class="pl-pds">"</span></span> \n               <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-X)<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        </span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">citations</span>&gt;\n        &lt;<span class="pl-ent">citation</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>bibtex<span class="pl-pds">"</span></span>&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/<span class="pl-ent">citation</span>&gt;\n    &lt;/<span class="pl-ent">citations</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<h2 dir="auto">条件参数</h2>\n<p dir="auto">以前的参数很简单，因为它们总是出现，现在考虑一下下面的参数。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-M FILE   mask regions in BED or name list FILE [null]"><pre class="notranslate">-M FILE   mask regions <span class="pl-k">in</span> BED or name list FILE [null]</pre></div>\n<p dir="auto">我们可以通过添加属性 <code class="notranslate">optional ="true"</code> 将该数据类型参数标记为可选。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;param name=&quot;mask_regions&quot; type=&quot;data&quot; label=&quot;Mask regions in BED&quot;\n       format=&quot;bed&quot; help=&quot;(-M)&quot; optional=&quot;true&quot; /&gt;"><pre class="notranslate">&lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>mask_regions<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask regions in BED<span class="pl-pds">"</span></span>\n       <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>bed<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-M)<span class="pl-pds">"</span></span> <span class="pl-e">optional</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span> /&gt;</pre></div>\n<p dir="auto">然后，不仅可以直接在命令块中使用 <code class="notranslate">$mask_regions</code>，还可以将其包装在 <code class="notranslate">if</code> 语句中（因为工具 XML 文件支持 <a href="https://cheetahtemplate.org/users_guide/index.html" rel="nofollow">Cheetah</a>）。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#if $mask_regions\n-M \'$mask_regions\'\n#end if"><pre class="notranslate">#if $mask_regions\n-M \'$mask_regions\'\n#end if</pre></div>\n<p dir="auto">接着，我们考虑这一组参数：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-s INT    random seed (effective with -f) [11]\n-f FLOAT  sample FLOAT fraction of sequences [1]"><pre class="notranslate">-s INT    random seed (effective with -f) [11]\n-f FLOAT  sample FLOAT fraction of sequences [1]</pre></div>\n<p dir="auto">在这种情况下，只有在设置了样本参数的情况下，才能看到或使用 <code class="notranslate">-s</code> 随机种子参数。我们可以使用 <code class="notranslate">conditional</code> 条件块来表达这一点。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;conditional name=&quot;sample&quot;&gt;\n    &lt;param name=&quot;sample_selector&quot; type=&quot;boolean&quot; label=&quot;Sample fraction of sequences&quot; /&gt;\n    &lt;when value=&quot;true&quot;&gt;\n        &lt;param name=&quot;fraction&quot; label=&quot;Fraction&quot; type=&quot;float&quot; value=&quot;1.0&quot;\n               help=&quot;(-f)&quot; /&gt;\n        &lt;param name=&quot;seed&quot; label=&quot;Random seed&quot; type=&quot;integer&quot; value=&quot;11&quot;\n               help=&quot;(-s)&quot; /&gt;\n    &lt;/when&gt;\n    &lt;when value=&quot;false&quot;&gt;\n    &lt;/when&gt;\n&lt;/conditional&gt;"><pre class="notranslate">&lt;<span class="pl-ent">conditional</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample_selector<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Sample fraction of sequences<span class="pl-pds">"</span></span> /&gt;\n    &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>fraction<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Fraction<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>\n               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-f)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>seed<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Random seed<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>11<span class="pl-pds">"</span></span>\n               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-s)<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">when</span>&gt;\n    &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;\n    &lt;/<span class="pl-ent">when</span>&gt;\n&lt;/<span class="pl-ent">conditional</span>&gt;</pre></div>\n<p dir="auto">在命令块中，我们可以再次使用 <code class="notranslate">if</code> 语句包括这些参数。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#if $sample.sample_selector\n-f $sample.fraction -s $sample.seed\n#end if"><pre class="notranslate">#if $sample.sample_selector\n-f $sample.fraction -s $sample.seed\n#end if</pre></div>\n<p dir="auto">注意，我们必须使用 <code class="notranslate">sample.</code> 的前缀来引用这个参数，因为它们是在 <code class="notranslate">sample</code> 的条件块内定义的。</p>\n<p dir="auto">现在该工具的最新版本如下：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq\n              $shift_quality\n              -q $quality_min\n              -X $quality_max\n              #if $mask_regions\n                  -M \'$mask_regions\'\n              #end if\n              #if $sample.sample\n                  -f $sample.fraction\n                  -s $sample.seed\n              #end if\n              -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n        &lt;param name=&quot;shift_quality&quot; type=&quot;boolean&quot; label=&quot;Shift quality&quot; \n               truevalue=&quot;-V&quot; falsevalue=&quot;&quot;\n               help=&quot;shift quality by \'(-Q) - 33\' (-V)&quot; /&gt;\n        &lt;param name=&quot;quality_min&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality lower than&quot; \n               value=&quot;0&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-q)&quot; /&gt;\n        &lt;param name=&quot;quality_max&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality higher than&quot; \n               value=&quot;255&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-X)&quot; /&gt;\n        &lt;param name=&quot;mask_regions&quot; type=&quot;data&quot; label=&quot;Mask regions in BED&quot; \n               format=&quot;bed&quot; help=&quot;(-M)&quot; optional=&quot;true&quot; /&gt;\n        &lt;conditional name=&quot;sample&quot;&gt;\n            &lt;param name=&quot;sample&quot; type=&quot;boolean&quot; label=&quot;Sample fraction of sequences&quot; /&gt;\n            &lt;when value=&quot;true&quot;&gt;\n                &lt;param name=&quot;fraction&quot; label=&quot;Fraction&quot; type=&quot;float&quot; value=&quot;1.0&quot;\n                       help=&quot;(-f)&quot; /&gt;\n                &lt;param name=&quot;seed&quot; label=&quot;Random seed&quot; type=&quot;integer&quot; value=&quot;11&quot;\n                       help=&quot;(-s)&quot; /&gt;\n            &lt;/when&gt;\n            &lt;when value=&quot;false&quot;&gt;\n            &lt;/when&gt;\n        &lt;/conditional&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n        \nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;citations&gt;\n        &lt;citation type=&quot;bibtex&quot;&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/citation&gt;\n    &lt;/citations&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq</span>\n<span class="pl-s">              $shift_quality</span>\n<span class="pl-s">              -q $quality_min</span>\n<span class="pl-s">              -X $quality_max</span>\n<span class="pl-s">              #if $mask_regions</span>\n<span class="pl-s">                  -M \'$mask_regions\'</span>\n<span class="pl-s">              #end if</span>\n<span class="pl-s">              #if $sample.sample</span>\n<span class="pl-s">                  -f $sample.fraction</span>\n<span class="pl-s">                  -s $sample.seed</span>\n<span class="pl-s">              #end if</span>\n<span class="pl-s">              -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>shift_quality<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Shift quality<span class="pl-pds">"</span></span> \n               <span class="pl-e">truevalue</span>=<span class="pl-s"><span class="pl-pds">"</span>-V<span class="pl-pds">"</span></span> <span class="pl-e">falsevalue</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>shift quality by \'(-Q) - 33\' (-V)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_min<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality lower than<span class="pl-pds">"</span></span> \n               <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-q)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_max<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality higher than<span class="pl-pds">"</span></span> \n               <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-X)<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>mask_regions<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask regions in BED<span class="pl-pds">"</span></span> \n               <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>bed<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-M)<span class="pl-pds">"</span></span> <span class="pl-e">optional</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">conditional</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Sample fraction of sequences<span class="pl-pds">"</span></span> /&gt;\n            &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>fraction<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Fraction<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>\n                       <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-f)<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>seed<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Random seed<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>11<span class="pl-pds">"</span></span>\n                       <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-s)<span class="pl-pds">"</span></span> /&gt;\n            &lt;/<span class="pl-ent">when</span>&gt;\n            &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;\n            &lt;/<span class="pl-ent">when</span>&gt;\n        &lt;/<span class="pl-ent">conditional</span>&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        </span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">citations</span>&gt;\n        &lt;<span class="pl-ent">citation</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>bibtex<span class="pl-pds">"</span></span>&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/<span class="pl-ent">citation</span>&gt;\n    &lt;/<span class="pl-ent">citations</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<p dir="auto">对于这样的工具，这些工具有很多选项，但在大多数情况下使用默认值是首选——一个常见的习惯用法是使用条件将参数分为简单部分和高级部分。</p>\n<p dir="auto">使用惯用法，更新此工具后的 XML 如下所示：</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n    &lt;/requirements&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq\n              #if $settings.advanced == &quot;advanced&quot;\n                  $settings.shift_quality\n                  -q $settings.quality_min\n                  -X $settings.quality_max\n                  #if $settings.mask_regions\n                      -M \'$settings.mask_regions\'\n                  #end if\n                  #if $settings.sample.sample\n                      -f $settings.sample.fraction\n                      -s $settings.sample.seed\n                  #end if\n              #end if\n              -a \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n        &lt;conditional name=&quot;settings&quot;&gt;\n            &lt;param name=&quot;advanced&quot; type=&quot;select&quot; label=&quot;Specify advanced parameters&quot;&gt;\n                &lt;option value=&quot;simple&quot; selected=&quot;true&quot;&gt;No, use program defaults.&lt;/option&gt;\n                &lt;option value=&quot;advanced&quot;&gt;Yes, see full parameter list.&lt;/option&gt;\n            &lt;/param&gt;\n            &lt;when value=&quot;simple&quot;&gt;\n            &lt;/when&gt;\n            &lt;when value=&quot;advanced&quot;&gt;\n                &lt;param name=&quot;shift_quality&quot; type=&quot;boolean&quot; label=&quot;Shift quality&quot; \n                       truevalue=&quot;-V&quot; falsevalue=&quot;&quot;\n                       help=&quot;shift quality by \'(-Q) - 33\' (-V)&quot; /&gt;\n                &lt;param name=&quot;quality_min&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality lower than&quot; \n                       value=&quot;0&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-q)&quot; /&gt;\n                &lt;param name=&quot;quality_max&quot; type=&quot;integer&quot; label=&quot;Mask bases with quality higher than&quot; \n                       value=&quot;255&quot; min=&quot;0&quot; max=&quot;255&quot; help=&quot;(-X)&quot; /&gt;\n                &lt;param name=&quot;mask_regions&quot; type=&quot;data&quot; label=&quot;Mask regions in BED&quot; \n                       format=&quot;bed&quot; help=&quot;(-M)&quot; optional=&quot;true&quot; /&gt;\n                &lt;conditional name=&quot;sample&quot;&gt;\n                    &lt;param name=&quot;sample&quot; type=&quot;boolean&quot; label=&quot;Sample fraction of sequences&quot; /&gt;\n                    &lt;when value=&quot;true&quot;&gt;\n                        &lt;param name=&quot;fraction&quot; label=&quot;Fraction&quot; type=&quot;float&quot; value=&quot;1.0&quot;\n                               help=&quot;(-f)&quot; /&gt;\n                        &lt;param name=&quot;seed&quot; label=&quot;Random seed&quot; type=&quot;integer&quot; value=&quot;11&quot;\n                               help=&quot;(-s)&quot; /&gt;\n                    &lt;/when&gt;\n                    &lt;when value=&quot;false&quot;&gt;\n                    &lt;/when&gt;\n                &lt;/conditional&gt;\n            &lt;/when&gt;\n        &lt;/conditional&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n        \nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;citations&gt;\n        &lt;citation type=&quot;bibtex&quot;&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/citation&gt;\n    &lt;/citations&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n    &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq</span>\n<span class="pl-s">              #if $settings.advanced == "advanced"</span>\n<span class="pl-s">                  $settings.shift_quality</span>\n<span class="pl-s">                  -q $settings.quality_min</span>\n<span class="pl-s">                  -X $settings.quality_max</span>\n<span class="pl-s">                  #if $settings.mask_regions</span>\n<span class="pl-s">                      -M \'$settings.mask_regions\'</span>\n<span class="pl-s">                  #end if</span>\n<span class="pl-s">                  #if $settings.sample.sample</span>\n<span class="pl-s">                      -f $settings.sample.fraction</span>\n<span class="pl-s">                      -s $settings.sample.seed</span>\n<span class="pl-s">                  #end if</span>\n<span class="pl-s">              #end if</span>\n<span class="pl-s">              -a \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n        &lt;<span class="pl-ent">conditional</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>settings<span class="pl-pds">"</span></span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>advanced<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>select<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Specify advanced parameters<span class="pl-pds">"</span></span>&gt;\n                &lt;<span class="pl-ent">option</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>simple<span class="pl-pds">"</span></span> <span class="pl-e">selected</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;No, use program defaults.&lt;/<span class="pl-ent">option</span>&gt;\n                &lt;<span class="pl-ent">option</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>advanced<span class="pl-pds">"</span></span>&gt;Yes, see full parameter list.&lt;/<span class="pl-ent">option</span>&gt;\n            &lt;/<span class="pl-ent">param</span>&gt;\n            &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>simple<span class="pl-pds">"</span></span>&gt;\n            &lt;/<span class="pl-ent">when</span>&gt;\n            &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>advanced<span class="pl-pds">"</span></span>&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>shift_quality<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Shift quality<span class="pl-pds">"</span></span> \n                       <span class="pl-e">truevalue</span>=<span class="pl-s"><span class="pl-pds">"</span>-V<span class="pl-pds">"</span></span> <span class="pl-e">falsevalue</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n                       <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>shift quality by \'(-Q) - 33\' (-V)<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_min<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality lower than<span class="pl-pds">"</span></span> \n                       <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-q)<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>quality_max<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask bases with quality higher than<span class="pl-pds">"</span></span> \n                       <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">min</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">max</span>=<span class="pl-s"><span class="pl-pds">"</span>255<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-X)<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>mask_regions<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Mask regions in BED<span class="pl-pds">"</span></span> \n                       <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>bed<span class="pl-pds">"</span></span> <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-M)<span class="pl-pds">"</span></span> <span class="pl-e">optional</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span> /&gt;\n                &lt;<span class="pl-ent">conditional</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span>&gt;\n                    &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>sample<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>boolean<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Sample fraction of sequences<span class="pl-pds">"</span></span> /&gt;\n                    &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>&gt;\n                        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>fraction<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Fraction<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>\n                               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-f)<span class="pl-pds">"</span></span> /&gt;\n                        &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>seed<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Random seed<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>11<span class="pl-pds">"</span></span>\n                               <span class="pl-e">help</span>=<span class="pl-s"><span class="pl-pds">"</span>(-s)<span class="pl-pds">"</span></span> /&gt;\n                    &lt;/<span class="pl-ent">when</span>&gt;\n                    &lt;<span class="pl-ent">when</span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;\n                    &lt;/<span class="pl-ent">when</span>&gt;\n                &lt;/<span class="pl-ent">conditional</span>&gt;\n            &lt;/<span class="pl-ent">when</span>&gt;\n        &lt;/<span class="pl-ent">conditional</span>&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        </span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">citations</span>&gt;\n        &lt;<span class="pl-ent">citation</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>bibtex<span class="pl-pds">"</span></span>&gt;\n@misc{githubseqtk,\n  author = {LastTODO, FirstTODO},\n  year = {TODO},\n  title = {seqtk},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/lh3/seqtk},\n}&lt;/<span class="pl-ent">citation</span>&gt;\n    &lt;/<span class="pl-ent">citations</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<h2 dir="auto">脚本封装</h2>\n<p dir="auto">Tool Shed 上已经提供了许多常见的生物信息学应用程序，因此一项常见的开发任务是将各种复杂程度的脚本集成到 Galaxy 中。</p>\n<p dir="auto">考虑以下小型 Perl 脚本。</p>\n<div class="highlight highlight-source-perl notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#!/usr/bin/perl -w\n\n# usage : perl toolExample.pl &lt;FASTA file&gt; &lt;output file&gt;\n\nopen (IN, &quot;&lt;$ARGV[0]&quot;);\nopen (OUT, &quot;&gt;$ARGV[1]&quot;);\nwhile (&lt;IN&gt;) {\n    chop;\n    if (m/^&gt;/) {\n        s/^&gt;//;\n        if ($. &gt; 1) {\n            print OUT sprintf(&quot;%.3f&quot;, $gc/$length) . &quot;\\n&quot;;\n        }\n        $gc = 0;\n        $length = 0;\n    } else {\n        ++$gc while m/[gc]/ig;\n        $length += length $_;\n    }\n}\nprint OUT sprintf(&quot;%.3f&quot;, $gc/$length) . &quot;\\n&quot;;\nclose( IN );\nclose( OUT );"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span>!/usr/bin/perl -w</span>\n\n<span class="pl-c"><span class="pl-c">#</span> usage : perl toolExample.pl &lt;FASTA file&gt; &lt;output file&gt;</span>\n\n<span class="pl-c1">open</span> (IN, <span class="pl-s"><span class="pl-pds">"</span>&lt;<span class="pl-smi">$ARGV</span>[0]<span class="pl-pds">"</span></span>);\n<span class="pl-c1">open</span> (OUT, <span class="pl-s"><span class="pl-pds">"</span>&gt;<span class="pl-smi">$ARGV</span>[1]<span class="pl-pds">"</span></span>);\n<span class="pl-k">while</span> (&lt;IN&gt;) {\n    <span class="pl-c1">chop</span>;\n    <span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds"><span class="pl-c1">m</span>/</span>^&gt;<span class="pl-pds">/</span></span>) {\n        <span class="pl-sr"><span class="pl-pds"><span class="pl-c1">s</span>/</span>^&gt;</span><span class="pl-sr"><span class="pl-pds">//</span></span>;\n        <span class="pl-k">if</span> (<span class="pl-smi">$.</span> &gt; 1) {\n            <span class="pl-c1">print</span> OUT <span class="pl-c1">sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%.3f<span class="pl-pds">"</span></span>, <span class="pl-smi">$gc</span>/<span class="pl-smi">$length</span>) . <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\n</span><span class="pl-pds">"</span></span>;\n        }\n        <span class="pl-smi">$gc</span> = 0;\n        <span class="pl-smi">$length</span> = 0;\n    } <span class="pl-k">else</span> {\n        ++<span class="pl-smi">$gc</span> <span class="pl-k">while</span> <span class="pl-sr"><span class="pl-pds"><span class="pl-c1">m</span>/</span><span class="pl-c1">[gc]</span><span class="pl-pds">/</span></span><span class="pl-sr"><span class="pl-pds"><span class="pl-k">ig</span></span></span>;\n        <span class="pl-smi">$length</span> += <span class="pl-c1">length</span> <span class="pl-smi">$_</span>;\n    }\n}\n<span class="pl-c1">print</span> OUT <span class="pl-c1">sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%.3f<span class="pl-pds">"</span></span>, <span class="pl-smi">$gc</span>/<span class="pl-smi">$length</span>) . <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\n</span><span class="pl-pds">"</span></span>;\n<span class="pl-c1">close</span>( IN );\n<span class="pl-c1">close</span>( OUT );</pre></div>\n<p dir="auto">可以按照以下步骤为此脚本构建 Galaxy 工具，并将脚本与工具 XML 文件本身放在同一目录中。这里的特殊值 <code class="notranslate">$__ tool_directory__</code> 是指工具（即 xml 文件）所在的目录。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;gc_content&quot; name=&quot;Compute GC content&quot;&gt;\n  &lt;description&gt;for each sequence in a file&lt;/description&gt;\n  &lt;command&gt;perl \'$__tool_directory__/gc_content.pl\' \'$input\' output.tsv&lt;/command&gt;\n  &lt;inputs&gt;\n    &lt;param name=&quot;input&quot; type=&quot;data&quot; format=&quot;fasta&quot; label=&quot;Source file&quot;/&gt;\n  &lt;/inputs&gt;\n  &lt;outputs&gt;\n    &lt;data name=&quot;output&quot; format=&quot;tabular&quot; from_work_dir=&quot;output.tsv&quot; /&gt;\n  &lt;/outputs&gt;\n  &lt;help&gt;\nThis tool computes GC content from a FASTA file.\n  &lt;/help&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>gc_content<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Compute GC content<span class="pl-pds">"</span></span>&gt;\n  &lt;<span class="pl-ent">description</span>&gt;for each sequence in a file&lt;/<span class="pl-ent">description</span>&gt;\n  &lt;<span class="pl-ent">command</span>&gt;perl \'$__tool_directory__/gc_content.pl\' \'$input\' output.tsv&lt;/<span class="pl-ent">command</span>&gt;\n  &lt;<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input<span class="pl-pds">"</span></span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> <span class="pl-e">label</span>=<span class="pl-s"><span class="pl-pds">"</span>Source file<span class="pl-pds">"</span></span>/&gt;\n  &lt;/<span class="pl-ent">inputs</span>&gt;\n  &lt;<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>tabular<span class="pl-pds">"</span></span> <span class="pl-e">from_work_dir</span>=<span class="pl-s"><span class="pl-pds">"</span>output.tsv<span class="pl-pds">"</span></span> /&gt;\n  &lt;/<span class="pl-ent">outputs</span>&gt;\n  &lt;<span class="pl-ent">help</span>&gt;\nThis tool computes GC content from a FASTA file.\n  &lt;/<span class="pl-ent">help</span>&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<h2 dir="auto">Macros 宏集</h2>\n<p dir="auto">如果您希望为单个相对简单的应用程序或脚本编写工具，则应跳过本节。如果您希望维护一系列相关工具——经验表明，您将意识到有很多重复的 XML 可以很好地做到这一点。Galaxy工具 XML 宏可以帮助减少这种重复。</p>\n<p dir="auto">通过使用 <code class="notranslate">--macros</code> 标志，Planemo 的 <code class="notranslate">tool_init</code> 命令可用于生成适合工具套件的宏文件。我们看一下以前的 <code class="notranslate">tool_init</code> 命令的变体（唯一的区别是现在我们添加了 <code class="notranslate">--macros</code> 标志）。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ planemo tool_init --force \\\n                    --macros \\\n                    --id \'seqtk_seq\' \\\n                    --name \'Convert to FASTA (seqtk)\' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command \'seqtk seq -A 2.fastq &gt; 2.fasta\' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --help_from_command \'seqtk seq\'"><pre class="notranslate">$ planemo tool_init --force \\\n                    --macros \\\n                    --id <span class="pl-s"><span class="pl-pds">\'</span>seqtk_seq<span class="pl-pds">\'</span></span> \\\n                    --name <span class="pl-s"><span class="pl-pds">\'</span>Convert to FASTA (seqtk)<span class="pl-pds">\'</span></span> \\\n                    --requirement seqtk@1.2 \\\n                    --example_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq -A 2.fastq &gt; 2.fasta<span class="pl-pds">\'</span></span> \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --help_from_command <span class="pl-s"><span class="pl-pds">\'</span>seqtk seq<span class="pl-pds">\'</span></span></pre></div>\n<p dir="auto">这将在当前目录中产生两个文件（ <code class="notranslate">seqtk_seq.xml</code> 和 <code class="notranslate">macros.xml</code>），而不是一个。</p>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;tool id=&quot;seqtk_seq&quot; name=&quot;Convert to FASTA (seqtk)&quot; version=&quot;0.1.0&quot; python_template_version=&quot;3.5&quot;&gt;\n    &lt;macros&gt;\n        &lt;import&gt;macros.xml&lt;/import&gt;\n    &lt;/macros&gt;\n    &lt;expand macro=&quot;requirements&quot; /&gt;\n    &lt;command detect_errors=&quot;exit_code&quot;&gt;&lt;![CDATA[\n        seqtk seq -A \'$input1\' &gt; \'$output1\'\n    ]]&gt;&lt;/command&gt;\n    &lt;inputs&gt;\n        &lt;param type=&quot;data&quot; name=&quot;input1&quot; format=&quot;fastq&quot; /&gt;\n    &lt;/inputs&gt;\n    &lt;outputs&gt;\n        &lt;data name=&quot;output1&quot; format=&quot;fasta&quot; /&gt;\n    &lt;/outputs&gt;\n    &lt;tests&gt;\n        &lt;test&gt;\n            &lt;param name=&quot;input1&quot; value=&quot;2.fastq&quot;/&gt;\n            &lt;output name=&quot;output1&quot; file=&quot;2.fasta&quot;/&gt;\n        &lt;/test&gt;\n    &lt;/tests&gt;\n    &lt;help&gt;&lt;![CDATA[\n\nUsage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n         -Q INT    quality shift: ASCII-INT gives base quality [33]\n         -s INT    random seed (effective with -f) [11]\n         -f FLOAT  sample FLOAT fraction of sequences [1]\n         -M FILE   mask regions in BED or name list FILE [null]\n         -L INT    drop sequences with length shorter than INT [0]\n         -c        mask complement region (effective with -M)\n         -r        reverse complement\n         -A        force FASTA output (discard quality)\n         -C        drop comments at the header lines\n         -N        drop sequences containing ambiguous bases\n         -1        output the 2n-1 reads only\n         -2        output the 2n reads only\n         -V        shift quality by \'(-Q) - 33\'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n\n\n    ]]&gt;&lt;/help&gt;\n    &lt;expand macro=&quot;citations&quot; /&gt;\n&lt;/tool&gt;"><pre class="notranslate">&lt;<span class="pl-ent">tool</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>seqtk_seq<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>Convert to FASTA (seqtk)<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>0.1.0<span class="pl-pds">"</span></span> <span class="pl-e">python_template_version</span>=<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>&gt;\n    &lt;<span class="pl-ent">macros</span>&gt;\n        &lt;<span class="pl-ent">import</span>&gt;macros.xml&lt;/<span class="pl-ent">import</span>&gt;\n    &lt;/<span class="pl-ent">macros</span>&gt;\n    &lt;<span class="pl-ent">expand</span> <span class="pl-e">macro</span>=<span class="pl-s"><span class="pl-pds">"</span>requirements<span class="pl-pds">"</span></span> /&gt;\n    &lt;<span class="pl-ent">command</span> <span class="pl-e">detect_errors</span>=<span class="pl-s"><span class="pl-pds">"</span>exit_code<span class="pl-pds">"</span></span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s">        seqtk seq -A \'$input1\' &gt; \'$output1\'</span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">command</span>&gt;\n    &lt;<span class="pl-ent">inputs</span>&gt;\n        &lt;<span class="pl-ent">param</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fastq<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">inputs</span>&gt;\n    &lt;<span class="pl-ent">outputs</span>&gt;\n        &lt;<span class="pl-ent">data</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">format</span>=<span class="pl-s"><span class="pl-pds">"</span>fasta<span class="pl-pds">"</span></span> /&gt;\n    &lt;/<span class="pl-ent">outputs</span>&gt;\n    &lt;<span class="pl-ent">tests</span>&gt;\n        &lt;<span class="pl-ent">test</span>&gt;\n            &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>input1<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fastq<span class="pl-pds">"</span></span>/&gt;\n            &lt;<span class="pl-ent">output</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>output1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>2.fasta<span class="pl-pds">"</span></span>/&gt;\n        &lt;/<span class="pl-ent">test</span>&gt;\n    &lt;/<span class="pl-ent">tests</span>&gt;\n    &lt;<span class="pl-ent">help</span>&gt;<span class="pl-s"><span class="pl-pds">&lt;![CDATA[</span></span>\n<span class="pl-s"></span>\n<span class="pl-s">Usage:   seqtk seq [options] &lt;in.fq&gt;|&lt;in.fa&gt;</span>\n<span class="pl-s"></span>\n<span class="pl-s">Options: -q INT    mask bases with quality lower than INT [0]</span>\n<span class="pl-s">         -X INT    mask bases with quality higher than INT [255]</span>\n<span class="pl-s">         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]</span>\n<span class="pl-s">         -l INT    number of residues per line; 0 for 2^32-1 [0]</span>\n<span class="pl-s">         -Q INT    quality shift: ASCII-INT gives base quality [33]</span>\n<span class="pl-s">         -s INT    random seed (effective with -f) [11]</span>\n<span class="pl-s">         -f FLOAT  sample FLOAT fraction of sequences [1]</span>\n<span class="pl-s">         -M FILE   mask regions in BED or name list FILE [null]</span>\n<span class="pl-s">         -L INT    drop sequences with length shorter than INT [0]</span>\n<span class="pl-s">         -c        mask complement region (effective with -M)</span>\n<span class="pl-s">         -r        reverse complement</span>\n<span class="pl-s">         -A        force FASTA output (discard quality)</span>\n<span class="pl-s">         -C        drop comments at the header lines</span>\n<span class="pl-s">         -N        drop sequences containing ambiguous bases</span>\n<span class="pl-s">         -1        output the 2n-1 reads only</span>\n<span class="pl-s">         -2        output the 2n reads only</span>\n<span class="pl-s">         -V        shift quality by \'(-Q) - 33\'</span>\n<span class="pl-s">         -U        convert all bases to uppercases</span>\n<span class="pl-s">         -S        strip of white spaces in sequences</span>\n<span class="pl-s"></span>\n<span class="pl-s"></span>\n<span class="pl-s">    <span class="pl-pds">]]&gt;</span></span>&lt;/<span class="pl-ent">help</span>&gt;\n    &lt;<span class="pl-ent">expand</span> <span class="pl-e">macro</span>=<span class="pl-s"><span class="pl-pds">"</span>citations<span class="pl-pds">"</span></span> /&gt;\n&lt;/<span class="pl-ent">tool</span>&gt;</pre></div>\n<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;macros&gt;\n    &lt;xml name=&quot;requirements&quot;&gt;\n        &lt;requirements&gt;\n        &lt;requirement type=&quot;package&quot; version=&quot;1.2&quot;&gt;seqtk&lt;/requirement&gt;\n            &lt;yield/&gt;\n        &lt;/requirements&gt;\n    &lt;/xml&gt;\n    &lt;xml name=&quot;citations&quot;&gt;\n        &lt;citations&gt;\n            &lt;yield /&gt;\n        &lt;/citations&gt;\n    &lt;/xml&gt;\n&lt;/macros&gt;"><pre class="notranslate">&lt;<span class="pl-ent">macros</span>&gt;\n    &lt;<span class="pl-ent">xml</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>requirements<span class="pl-pds">"</span></span>&gt;\n        &lt;<span class="pl-ent">requirements</span>&gt;\n        &lt;<span class="pl-ent">requirement</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.2<span class="pl-pds">"</span></span>&gt;seqtk&lt;/<span class="pl-ent">requirement</span>&gt;\n            &lt;<span class="pl-ent">yield</span>/&gt;\n        &lt;/<span class="pl-ent">requirements</span>&gt;\n    &lt;/<span class="pl-ent">xml</span>&gt;\n    &lt;<span class="pl-ent">xml</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>citations<span class="pl-pds">"</span></span>&gt;\n        &lt;<span class="pl-ent">citations</span>&gt;\n            &lt;<span class="pl-ent">yield</span> /&gt;\n        &lt;/<span class="pl-ent">citations</span>&gt;\n    &lt;/<span class="pl-ent">xml</span>&gt;\n&lt;/<span class="pl-ent">macros</span>&gt;</pre></div>\n<p dir="auto">如您在上面的代码中所看到的，宏是可重用的 XML 块，它们使避免重复和保持 XML 简洁变得更加容易。</p>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li><a href="https://wiki.galaxyproject.org/Admin/Tools/ToolConfigSyntax#Reusing_Repeated_Configuration_Elements" rel="nofollow">Macros syntax</a> on the Galaxy Wiki.</li>\n<li><a href="https://github.com/galaxyproject/tools-iuc/tree/master/tools/gatk2">GATK tools</a> (example tools making extensive use of macros)</li>\n<li><a href="https://github.com/galaxyproject/tools-iuc/tree/master/tools/gemini">gemini tools</a> (example tools making extensive use of macros)</li>\n<li><a href="https://github.com/galaxyproject/tools-iuc/tree/master/tools/bedtools">bedtools tools</a> (example tools making extensive use of macros)</li>\n<li>Macros implementation details - <a href="https://bitbucket.org/galaxy/galaxy-central/pull-request/129/implement-macro-engine-to-reduce-tool/diff" rel="nofollow">Pull Request #129</a> and <a href="https://bitbucket.org/galaxy/galaxy-central/pull-request/140/improvements-to-tool-xml-macroing-system/diff" rel="nofollow">Pull Request #140</a></li>\n<li><a href="https://docs.galaxyproject.org/en/latest/dev/schema.html" rel="nofollow">Galaxy’s Tool XML Syntax</a></li>\n<li><a href="https://galaxyproject.org/develop/resources-tools/" rel="nofollow">Big List of Tool Development Resources</a></li>\n<li><a href="https://cheetahtemplate.org/users_guide/index.html" rel="nofollow">Cheetah templating</a></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.4-其他文章'}, 'labels': {'nodes': [{'name': '3.4.1-GalaxyOther'}]}, 'comments': {'nodes': []}}, {'title': '越来越难用的国内代码托管平台', 'number': 56, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/56', 'createdAt': '2024-02-02T03:26:02Z', 'lastEditedAt': '2024-02-04T00:48:19Z', 'updatedAt': '2024-02-04T00:48:19Z', 'body': '国内的代码平台对个人用户极其不友好，GitHub 可用的情况下，还是继续用着 GitHub 吧。\r\n\r\n<!-- more -->\r\n\r\n## 码云\r\n\r\nGitee 的 Issues 永远都无法搜索内容 - <https://gitee.com/oschina/git-osc/issues/I7T4W6>，感觉社区版本已经在摆烂了，现在他们的重点已经放在了企业版本，但是企业版本又难用的要死！\r\n\r\n## 扣钉\r\n\r\nCoding 现在的页面逻辑我是已经搞不明白了，注销的组织名称永远无法释放不说，在代码仓库更是连 Issues 都去掉了......\r\n\r\n## 极狐\r\n\r\n单是从体验上来说，背靠着 Gitlab 的 [极狐(GitLab)](https://gitlab.cn/) 其实做的还不错，虽然也还没有 APP。        \r\n- [极狐 GitLab 怎么样好不好_极狐 GitLab 优势有哪些-极狐 GitLab](https://gitlab.cn/is-it-any-good/)        \r\n- [极狐 GitLab vs GitLab vs GitHub vs Gitee](https://gitlab.cn/comparison/)        \r\n![gitlab-jh](https://shub.weiyan.tech/kgarden/2024/02/jihulab-vs-github-gitee.png)\r\n\r\n但是，现在问题来了，极狐从[2024年1月2日起开始要收费了](https://gitlab.cn/blog/2023/11/29/saas-adjustment/)，这又是一个昙花一现可以放弃的托管平台，即使付费也总让人感觉这个平台套路不少。\r\n\r\n## 最后\r\n\r\n最后，对于国内的代码托管平台的一个感受 —— 对个人用户极其不友好，都热衷去倒腾企业的版本了，所以，GitHub 可用的情况下，还是继续用着 GitHub 吧；某些情况下登录不上 GitHub 了，国内的 GitCode 作为备用暂时凑合着用吧；至于 Gitee/Coding/Jihulab，还是不要浪费时间去折腾了。', 'bodyText': '国内的代码平台对个人用户极其不友好，GitHub 可用的情况下，还是继续用着 GitHub 吧。\n\n码云\nGitee 的 Issues 永远都无法搜索内容 - https://gitee.com/oschina/git-osc/issues/I7T4W6，感觉社区版本已经在摆烂了，现在他们的重点已经放在了企业版本，但是企业版本又难用的要死！\n扣钉\nCoding 现在的页面逻辑我是已经搞不明白了，注销的组织名称永远无法释放不说，在代码仓库更是连 Issues 都去掉了......\n极狐\n单是从体验上来说，背靠着 Gitlab 的 极狐(GitLab) 其实做的还不错，虽然也还没有 APP。\n\n极狐 GitLab 怎么样好不好_极狐 GitLab 优势有哪些-极狐 GitLab\n极狐 GitLab vs GitLab vs GitHub vs Gitee\n\n\n但是，现在问题来了，极狐从2024年1月2日起开始要收费了，这又是一个昙花一现可以放弃的托管平台，即使付费也总让人感觉这个平台套路不少。\n最后\n最后，对于国内的代码托管平台的一个感受 —— 对个人用户极其不友好，都热衷去倒腾企业的版本了，所以，GitHub 可用的情况下，还是继续用着 GitHub 吧；某些情况下登录不上 GitHub 了，国内的 GitCode 作为备用暂时凑合着用吧；至于 Gitee/Coding/Jihulab，还是不要浪费时间去折腾了。', 'bodyHTML': '<p dir="auto">国内的代码平台对个人用户极其不友好，GitHub 可用的情况下，还是继续用着 GitHub 吧。</p>\n\n<h2 dir="auto">码云</h2>\n<p dir="auto">Gitee 的 Issues 永远都无法搜索内容 - <a href="https://gitee.com/oschina/git-osc/issues/I7T4W6" rel="nofollow">https://gitee.com/oschina/git-osc/issues/I7T4W6</a>，感觉社区版本已经在摆烂了，现在他们的重点已经放在了企业版本，但是企业版本又难用的要死！</p>\n<h2 dir="auto">扣钉</h2>\n<p dir="auto">Coding 现在的页面逻辑我是已经搞不明白了，注销的组织名称永远无法释放不说，在代码仓库更是连 Issues 都去掉了......</p>\n<h2 dir="auto">极狐</h2>\n<p dir="auto">单是从体验上来说，背靠着 Gitlab 的 <a href="https://gitlab.cn/" rel="nofollow">极狐(GitLab)</a> 其实做的还不错，虽然也还没有 APP。</p>\n<ul dir="auto">\n<li><a href="https://gitlab.cn/is-it-any-good/" rel="nofollow">极狐 GitLab 怎么样好不好_极狐 GitLab 优势有哪些-极狐 GitLab</a></li>\n<li><a href="https://gitlab.cn/comparison/" rel="nofollow">极狐 GitLab vs GitLab vs GitHub vs Gitee</a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8658ab216dd3f909664013699e2fa00e9171e1df2e9c04fb4d49daaede42fee5/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30322f6a6968756c61622d76732d6769746875622d67697465652e706e67"><img src="https://camo.githubusercontent.com/8658ab216dd3f909664013699e2fa00e9171e1df2e9c04fb4d49daaede42fee5/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30322f6a6968756c61622d76732d6769746875622d67697465652e706e67" alt="gitlab-jh" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/02/jihulab-vs-github-gitee.png" style="max-width: 100%;"></a></li>\n</ul>\n<p dir="auto">但是，现在问题来了，极狐从<a href="https://gitlab.cn/blog/2023/11/29/saas-adjustment/" rel="nofollow">2024年1月2日起开始要收费了</a>，这又是一个昙花一现可以放弃的托管平台，即使付费也总让人感觉这个平台套路不少。</p>\n<h2 dir="auto">最后</h2>\n<p dir="auto">最后，对于国内的代码托管平台的一个感受 —— 对个人用户极其不友好，都热衷去倒腾企业的版本了，所以，GitHub 可用的情况下，还是继续用着 GitHub 吧；某些情况下登录不上 GitHub 了，国内的 GitCode 作为备用暂时凑合着用吧；至于 Gitee/Coding/Jihulab，还是不要浪费时间去折腾了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '从公众号到个人独立站点', 'number': 55, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/55', 'createdAt': '2024-01-25T12:28:05Z', 'lastEditedAt': '2024-01-25T12:29:50Z', 'updatedAt': '2024-01-25T12:29:50Z', 'body': '从 2023 年下半年以来 "**BioIT爱好者**" 这个公众号基本上很少更新了，这一点在《[公众号许久没有更新了](https://github.com/shenweiyan/Knowledge-Garden/discussions/28)》就提到过，现在唯一有所区别的是在 [GitHub Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions/) 的基础上又多了一个个人的独立站点。\r\n\r\n<!-- more -->\r\n\r\n![weiyan-cc-home](https://shub.weiyan.tech/kgarden/2024/01/weiyan-cc-home.png)\r\n\r\n![weiyan-cc-hblog](https://shub.weiyan.tech/kgarden/2024/01/weiyan-cc-blog.png)\r\n\r\n全面拥抱 GitHub 的感觉真的很好，加上手机 APP 的加持，更加如虎添翼。回归了最原始 markdown 的编辑和写作，也终于不用再担心在《[富文本编辑器与 md 语法的一些困惑](https://github.com/shenweiyan/Knowledge-Garden/discussions/26)》中所顾虑的问题。\r\n\r\n从 GitHub 到选择 Material for MkDocs 作为个人博客+文档独立站点，有很多的影响因素，但数据可控算是比较核心的一个出发点。这半年来混迹 GitHub 的确也收获良多，发现了很多[有意思的博客和站点](https://github.com/shenweiyan/Knowledge-Garden/discussions/41)，学习到了很多优秀的项目。很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。\r\n\r\n2023 年被[椒盐豆豉](https://blog.douchi.space/)的一篇《[2023 年了你为什么需要写博客](https://blog.douchi.space/2023-why-you-need-a-blog/)》所吸引，尤其是 "博客是赛博空间的另一个你，也能反过来定义你" 这一句，写出了很多心声。\r\n\r\n> 比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。\r\n\r\n虽然期间尝试过《[飞书文档初体验](https://github.com/shenweiyan/Knowledge-Garden/discussions/11)》，从国内版本的飞书到 LarkSuite，但终究不如 GitHub + Material for MkDocs 组合来得顺畅。GitHub 也好，飞书也罢，各种五花八门的奇淫巧技和折腾组合，总有能玩出花来的一波人，找到自己喜欢的并持之以恒就已经足够。\r\n\r\n趁着今天有时间，在公众号同步了这一篇，希望我们不忘初心，做到最好。', 'bodyText': '从 2023 年下半年以来 "BioIT爱好者" 这个公众号基本上很少更新了，这一点在《公众号许久没有更新了》就提到过，现在唯一有所区别的是在 GitHub Discussions 的基础上又多了一个个人的独立站点。\n\n\n\n全面拥抱 GitHub 的感觉真的很好，加上手机 APP 的加持，更加如虎添翼。回归了最原始 markdown 的编辑和写作，也终于不用再担心在《富文本编辑器与 md 语法的一些困惑》中所顾虑的问题。\n从 GitHub 到选择 Material for MkDocs 作为个人博客+文档独立站点，有很多的影响因素，但数据可控算是比较核心的一个出发点。这半年来混迹 GitHub 的确也收获良多，发现了很多有意思的博客和站点，学习到了很多优秀的项目。很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。\n2023 年被椒盐豆豉的一篇《2023 年了你为什么需要写博客》所吸引，尤其是 "博客是赛博空间的另一个你，也能反过来定义你" 这一句，写出了很多心声。\n\n比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。\n\n虽然期间尝试过《飞书文档初体验》，从国内版本的飞书到 LarkSuite，但终究不如 GitHub + Material for MkDocs 组合来得顺畅。GitHub 也好，飞书也罢，各种五花八门的奇淫巧技和折腾组合，总有能玩出花来的一波人，找到自己喜欢的并持之以恒就已经足够。\n趁着今天有时间，在公众号同步了这一篇，希望我们不忘初心，做到最好。', 'bodyHTML': '<p dir="auto">从 2023 年下半年以来 "<strong>BioIT爱好者</strong>" 这个公众号基本上很少更新了，这一点在《<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/28" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Knowledge-Garden/discussions/28/hovercard">公众号许久没有更新了</a>》就提到过，现在唯一有所区别的是在 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/">GitHub Discussions</a> 的基础上又多了一个个人的独立站点。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4f3af099333a6a922d1289a9b8e19cc2592a07e4d0967714c923a95549502746/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f77656979616e2d63632d686f6d652e706e67"><img src="https://camo.githubusercontent.com/4f3af099333a6a922d1289a9b8e19cc2592a07e4d0967714c923a95549502746/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f77656979616e2d63632d686f6d652e706e67" alt="weiyan-cc-home" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/weiyan-cc-home.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f218705606b202aa2d6b020ed6adf1c58b763332975297805fc46477fa381de3/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f77656979616e2d63632d626c6f672e706e67"><img src="https://camo.githubusercontent.com/f218705606b202aa2d6b020ed6adf1c58b763332975297805fc46477fa381de3/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f77656979616e2d63632d626c6f672e706e67" alt="weiyan-cc-hblog" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/weiyan-cc-blog.png" style="max-width: 100%;"></a></p>\n<p dir="auto">全面拥抱 GitHub 的感觉真的很好，加上手机 APP 的加持，更加如虎添翼。回归了最原始 markdown 的编辑和写作，也终于不用再担心在《<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/26" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Knowledge-Garden/discussions/26/hovercard">富文本编辑器与 md 语法的一些困惑</a>》中所顾虑的问题。</p>\n<p dir="auto">从 GitHub 到选择 Material for MkDocs 作为个人博客+文档独立站点，有很多的影响因素，但数据可控算是比较核心的一个出发点。这半年来混迹 GitHub 的确也收获良多，发现了很多<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/41" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Knowledge-Garden/discussions/41/hovercard">有意思的博客和站点</a>，学习到了很多优秀的项目。很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。</p>\n<p dir="auto">2023 年被<a href="https://blog.douchi.space/" rel="nofollow">椒盐豆豉</a>的一篇《<a href="https://blog.douchi.space/2023-why-you-need-a-blog/" rel="nofollow">2023 年了你为什么需要写博客</a>》所吸引，尤其是 "博客是赛博空间的另一个你，也能反过来定义你" 这一句，写出了很多心声。</p>\n<blockquote>\n<p dir="auto">比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。</p>\n</blockquote>\n<p dir="auto">虽然期间尝试过《<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/11" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Knowledge-Garden/discussions/11/hovercard">飞书文档初体验</a>》，从国内版本的飞书到 LarkSuite，但终究不如 GitHub + Material for MkDocs 组合来得顺畅。GitHub 也好，飞书也罢，各种五花八门的奇淫巧技和折腾组合，总有能玩出花来的一波人，找到自己喜欢的并持之以恒就已经足够。</p>\n<p dir="auto">趁着今天有时间，在公众号同步了这一篇，希望我们不忘初心，做到最好。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': 'Mkdocs material 使用自定义 slug 和 url', 'number': 54, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/54', 'createdAt': '2024-01-23T06:53:45Z', 'lastEditedAt': None, 'updatedAt': '2024-01-23T06:53:46Z', 'body': 'Mkdocs material 默认使用目录+文件名作为 post 展示的 URL，如果目录名/文件名太长的话，你的 URL 就会显得非常长。尤其是当你从浏览器地址栏中复制某一篇文档的链接时候，如果你的 URL 同时包含了中文，URL 转码后会导致你复制后粘贴的链接变得更加长。\r\n\r\n<!-- more -->\r\n\r\nMkdocs material 目前我是没看到有什么具体的插件解决这个问题，只不过有人在 [squidfunk/mkdocs-material#5161](https://github.com/squidfunk/mkdocs-material/discussions/5161) 基于 hook 提供了一个解决的方案。这个方案基本上能满足我们的需求，但也有一些限制。\r\n\r\n- slug 必须是不能以 `/` 作为开头，且必须以 `/` 作为结尾。\r\n- 可能会导致内部链接引用出现问题。\r\n- 会重复读取任务，如果文件非常多，会降低相对于文件量的整体性能。', 'bodyText': 'Mkdocs material 默认使用目录+文件名作为 post 展示的 URL，如果目录名/文件名太长的话，你的 URL 就会显得非常长。尤其是当你从浏览器地址栏中复制某一篇文档的链接时候，如果你的 URL 同时包含了中文，URL 转码后会导致你复制后粘贴的链接变得更加长。\n\nMkdocs material 目前我是没看到有什么具体的插件解决这个问题，只不过有人在 squidfunk/mkdocs-material#5161 基于 hook 提供了一个解决的方案。这个方案基本上能满足我们的需求，但也有一些限制。\n\nslug 必须是不能以 / 作为开头，且必须以 / 作为结尾。\n可能会导致内部链接引用出现问题。\n会重复读取任务，如果文件非常多，会降低相对于文件量的整体性能。', 'bodyHTML': '<p dir="auto">Mkdocs material 默认使用目录+文件名作为 post 展示的 URL，如果目录名/文件名太长的话，你的 URL 就会显得非常长。尤其是当你从浏览器地址栏中复制某一篇文档的链接时候，如果你的 URL 同时包含了中文，URL 转码后会导致你复制后粘贴的链接变得更加长。</p>\n\n<p dir="auto">Mkdocs material 目前我是没看到有什么具体的插件解决这个问题，只不过有人在 <a href="https://github.com/squidfunk/mkdocs-material/discussions/5161" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/5161/hovercard">squidfunk/mkdocs-material#5161</a> 基于 hook 提供了一个解决的方案。这个方案基本上能满足我们的需求，但也有一些限制。</p>\n<ul dir="auto">\n<li>slug 必须是不能以 <code class="notranslate">/</code> 作为开头，且必须以 <code class="notranslate">/</code> 作为结尾。</li>\n<li>可能会导致内部链接引用出现问题。</li>\n<li>会重复读取任务，如果文件非常多，会降低相对于文件量的整体性能。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Mkdocs material 对指定页面隐藏 H1 标题', 'number': 53, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/53', 'createdAt': '2024-01-19T03:42:11Z', 'lastEditedAt': None, 'updatedAt': '2024-01-19T03:42:12Z', 'body': '主要记录一下在 Mkdocs material 中对指定页面隐藏标题，尤其是指在 Home 页面把 H1 级别的标题隐藏的一些解决方法。\r\n\r\n<!-- more -->\r\n\r\n## 背景\r\n\r\n对于一些特定的页面，不想显示顶级的标题，尤其是 H1 标题。Mkdocs material 讨论区给出了几个方案：\r\n\r\n1. 内联 CSS 的方法，参考 [squidfunk/mkdocs-material#2163](https://github.com/squidfunk/mkdocs-material/issues/2163)。    \r\n   这个方法的确能解决隐藏当前页面的 H1 标题，但**同时会把搜索栏搜索结果的 H1 标题给隐藏了**。有点治标不治本！\r\n2. 自定义页面模板，参考 [squidfunk/mkdocs-material#6185](https://github.com/squidfunk/mkdocs-material/discussions/6185)。\r\n   这个参考的讨论里面没有给出具体的解决方法，本文章来详细介绍一下。\r\n\r\n## 创建模板\r\n\r\n首先，在 `overrides` 目录下创建一个名为 `home.html` 的文件(文件名可以随意命名)，内容可以参考 [`blog.html`](https://github.com/squidfunk/mkdocs-material/blob/master/material/templates/blog.html) 的内容。\r\n```\r\n{% extends "base.html" %}\r\n{% block htmltitle %}\r\n      {% if page.meta and page.meta.title %}\r\n        <title>{{ page.meta.title }}</title>\r\n      {% elif page.title and not page.is_homepage %}\r\n        <title>{{ page.title | striptags }}</title>\r\n      {% else %}\r\n        <title>{{ config.site_name }}</title>\r\n      {% endif %}\r\n{% endblock %}\r\n\r\n{% block container %}\r\n    <div class="md-content" data-md-component="content">\r\n      <article class="md-content__inner md-typeset">\r\n        {% block content %}\r\n          {% include "partials/mycontent.html" %}\r\n        {% endblock %}\r\n      </article>\r\n    </div>\r\n{% endblock %}\r\n\r\n{% block extrahead %}\r\n      <!--style>.md-typeset h1,.md-content__button {display:none !important}; </style-->\r\n      <style>.md-header__topic {font-weight:700 !important}</style>\r\n{% endblock %}\r\n```\r\n\r\n第二，创建 `overrides/partials/mycontent.html` 文件，内容参考 [`content.html`](https://github.com/squidfunk/mkdocs-material/blob/master/material/templates/partials/content.html) 文件，注意把 h1 的元素注释掉。\r\n```\r\n{#-\r\n  This file was automatically generated - do not edit\r\n-#}\r\n{% if "material/tags" in config.plugins and tags %}\r\n  {% include "partials/tags.html" %}\r\n{% endif %}\r\n{% include "partials/actions.html" %}\r\n{% if "\\x3ch1" not in page.content %}\r\n  <!--h1>{{ page.title | d(config.site_name, true)}}</h1-->\r\n{% endif %}\r\n{{ page.content }}\r\n{% include "partials/source-file.html" %}\r\n{% include "partials/feedback.html" %}\r\n{% include "partials/comments.html" %}\r\n```\r\n\r\n## 在页面中使用模板\r\n\r\n例如，在个人站点的主页文件 `docs/index.md` 中头部，使用 `template` 指定使用的模板。\r\n```\r\n---\r\ntitle: 维燕的知识花园\r\ntemplate: home.html\r\n---\r\n```\r\n\r\n最后，重新启动 mkdocs 就可以看到对应页面 H1 隐藏后的效果。\r\n', 'bodyText': '主要记录一下在 Mkdocs material 中对指定页面隐藏标题，尤其是指在 Home 页面把 H1 级别的标题隐藏的一些解决方法。\n\n背景\n对于一些特定的页面，不想显示顶级的标题，尤其是 H1 标题。Mkdocs material 讨论区给出了几个方案：\n\n内联 CSS 的方法，参考 squidfunk/mkdocs-material#2163。\n这个方法的确能解决隐藏当前页面的 H1 标题，但同时会把搜索栏搜索结果的 H1 标题给隐藏了。有点治标不治本！\n自定义页面模板，参考 squidfunk/mkdocs-material#6185。\n这个参考的讨论里面没有给出具体的解决方法，本文章来详细介绍一下。\n\n创建模板\n首先，在 overrides 目录下创建一个名为 home.html 的文件(文件名可以随意命名)，内容可以参考 blog.html 的内容。\n{% extends "base.html" %}\n{% block htmltitle %}\n      {% if page.meta and page.meta.title %}\n        <title>{{ page.meta.title }}</title>\n      {% elif page.title and not page.is_homepage %}\n        <title>{{ page.title | striptags }}</title>\n      {% else %}\n        <title>{{ config.site_name }}</title>\n      {% endif %}\n{% endblock %}\n\n{% block container %}\n    <div class="md-content" data-md-component="content">\n      <article class="md-content__inner md-typeset">\n        {% block content %}\n          {% include "partials/mycontent.html" %}\n        {% endblock %}\n      </article>\n    </div>\n{% endblock %}\n\n{% block extrahead %}\n      <!--style>.md-typeset h1,.md-content__button {display:none !important}; </style-->\n      <style>.md-header__topic {font-weight:700 !important}</style>\n{% endblock %}\n\n第二，创建 overrides/partials/mycontent.html 文件，内容参考 content.html 文件，注意把 h1 的元素注释掉。\n{#-\n  This file was automatically generated - do not edit\n-#}\n{% if "material/tags" in config.plugins and tags %}\n  {% include "partials/tags.html" %}\n{% endif %}\n{% include "partials/actions.html" %}\n{% if "\\x3ch1" not in page.content %}\n  <!--h1>{{ page.title | d(config.site_name, true)}}</h1-->\n{% endif %}\n{{ page.content }}\n{% include "partials/source-file.html" %}\n{% include "partials/feedback.html" %}\n{% include "partials/comments.html" %}\n\n在页面中使用模板\n例如，在个人站点的主页文件 docs/index.md 中头部，使用 template 指定使用的模板。\n---\ntitle: 维燕的知识花园\ntemplate: home.html\n---\n\n最后，重新启动 mkdocs 就可以看到对应页面 H1 隐藏后的效果。', 'bodyHTML': '<p dir="auto">主要记录一下在 Mkdocs material 中对指定页面隐藏标题，尤其是指在 Home 页面把 H1 级别的标题隐藏的一些解决方法。</p>\n\n<h2 dir="auto">背景</h2>\n<p dir="auto">对于一些特定的页面，不想显示顶级的标题，尤其是 H1 标题。Mkdocs material 讨论区给出了几个方案：</p>\n<ol dir="auto">\n<li>内联 CSS 的方法，参考 <a href="https://github.com/squidfunk/mkdocs-material/issues/2163" data-hovercard-type="issue" data-hovercard-url="/squidfunk/mkdocs-material/issues/2163/hovercard">squidfunk/mkdocs-material#2163</a>。<br>\n这个方法的确能解决隐藏当前页面的 H1 标题，但<strong>同时会把搜索栏搜索结果的 H1 标题给隐藏了</strong>。有点治标不治本！</li>\n<li>自定义页面模板，参考 <a href="https://github.com/squidfunk/mkdocs-material/discussions/6185" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6185/hovercard">squidfunk/mkdocs-material#6185</a>。<br>\n这个参考的讨论里面没有给出具体的解决方法，本文章来详细介绍一下。</li>\n</ol>\n<h2 dir="auto">创建模板</h2>\n<p dir="auto">首先，在 <code class="notranslate">overrides</code> 目录下创建一个名为 <code class="notranslate">home.html</code> 的文件(文件名可以随意命名)，内容可以参考 <a href="https://github.com/squidfunk/mkdocs-material/blob/master/material/templates/blog.html"><code class="notranslate">blog.html</code></a> 的内容。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{% extends &quot;base.html&quot; %}\n{% block htmltitle %}\n      {% if page.meta and page.meta.title %}\n        &lt;title&gt;{{ page.meta.title }}&lt;/title&gt;\n      {% elif page.title and not page.is_homepage %}\n        &lt;title&gt;{{ page.title | striptags }}&lt;/title&gt;\n      {% else %}\n        &lt;title&gt;{{ config.site_name }}&lt;/title&gt;\n      {% endif %}\n{% endblock %}\n\n{% block container %}\n    &lt;div class=&quot;md-content&quot; data-md-component=&quot;content&quot;&gt;\n      &lt;article class=&quot;md-content__inner md-typeset&quot;&gt;\n        {% block content %}\n          {% include &quot;partials/mycontent.html&quot; %}\n        {% endblock %}\n      &lt;/article&gt;\n    &lt;/div&gt;\n{% endblock %}\n\n{% block extrahead %}\n      &lt;!--style&gt;.md-typeset h1,.md-content__button {display:none !important}; &lt;/style--&gt;\n      &lt;style&gt;.md-header__topic {font-weight:700 !important}&lt;/style&gt;\n{% endblock %}"><pre class="notranslate"><code class="notranslate">{% extends "base.html" %}\n{% block htmltitle %}\n      {% if page.meta and page.meta.title %}\n        &lt;title&gt;{{ page.meta.title }}&lt;/title&gt;\n      {% elif page.title and not page.is_homepage %}\n        &lt;title&gt;{{ page.title | striptags }}&lt;/title&gt;\n      {% else %}\n        &lt;title&gt;{{ config.site_name }}&lt;/title&gt;\n      {% endif %}\n{% endblock %}\n\n{% block container %}\n    &lt;div class="md-content" data-md-component="content"&gt;\n      &lt;article class="md-content__inner md-typeset"&gt;\n        {% block content %}\n          {% include "partials/mycontent.html" %}\n        {% endblock %}\n      &lt;/article&gt;\n    &lt;/div&gt;\n{% endblock %}\n\n{% block extrahead %}\n      &lt;!--style&gt;.md-typeset h1,.md-content__button {display:none !important}; &lt;/style--&gt;\n      &lt;style&gt;.md-header__topic {font-weight:700 !important}&lt;/style&gt;\n{% endblock %}\n</code></pre></div>\n<p dir="auto">第二，创建 <code class="notranslate">overrides/partials/mycontent.html</code> 文件，内容参考 <a href="https://github.com/squidfunk/mkdocs-material/blob/master/material/templates/partials/content.html"><code class="notranslate">content.html</code></a> 文件，注意把 h1 的元素注释掉。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{#-\n  This file was automatically generated - do not edit\n-#}\n{% if &quot;material/tags&quot; in config.plugins and tags %}\n  {% include &quot;partials/tags.html&quot; %}\n{% endif %}\n{% include &quot;partials/actions.html&quot; %}\n{% if &quot;\\x3ch1&quot; not in page.content %}\n  &lt;!--h1&gt;{{ page.title | d(config.site_name, true)}}&lt;/h1--&gt;\n{% endif %}\n{{ page.content }}\n{% include &quot;partials/source-file.html&quot; %}\n{% include &quot;partials/feedback.html&quot; %}\n{% include &quot;partials/comments.html&quot; %}"><pre class="notranslate"><code class="notranslate">{#-\n  This file was automatically generated - do not edit\n-#}\n{% if "material/tags" in config.plugins and tags %}\n  {% include "partials/tags.html" %}\n{% endif %}\n{% include "partials/actions.html" %}\n{% if "\\x3ch1" not in page.content %}\n  &lt;!--h1&gt;{{ page.title | d(config.site_name, true)}}&lt;/h1--&gt;\n{% endif %}\n{{ page.content }}\n{% include "partials/source-file.html" %}\n{% include "partials/feedback.html" %}\n{% include "partials/comments.html" %}\n</code></pre></div>\n<h2 dir="auto">在页面中使用模板</h2>\n<p dir="auto">例如，在个人站点的主页文件 <code class="notranslate">docs/index.md</code> 中头部，使用 <code class="notranslate">template</code> 指定使用的模板。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="---\ntitle: 维燕的知识花园\ntemplate: home.html\n---"><pre class="notranslate"><code class="notranslate">---\ntitle: 维燕的知识花园\ntemplate: home.html\n---\n</code></pre></div>\n<p dir="auto">最后，重新启动 mkdocs 就可以看到对应页面 H1 隐藏后的效果。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'MkDocs Material  的一些使用与问题汇总', 'number': 52, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/52', 'createdAt': '2024-01-18T07:51:11Z', 'lastEditedAt': None, 'updatedAt': '2024-01-18T07:51:12Z', 'body': '记录一下 MkDocs Material 在使用过程中遇到的一些问题。\r\n\r\n<!-- more -->\r\n\r\n1. 如何避免锚点链接的非英文字符转换成数字    \r\n   - [How to disable converting non-english header links to numbers?#4682](https://github.com/squidfunk/mkdocs-material/discussions/4682)', 'bodyText': '记录一下 MkDocs Material 在使用过程中遇到的一些问题。\n\n\n如何避免锚点链接的非英文字符转换成数字\n\nHow to disable converting non-english header links to numbers?#4682', 'bodyHTML': '<p dir="auto">记录一下 MkDocs Material 在使用过程中遇到的一些问题。</p>\n\n<ol dir="auto">\n<li>如何避免锚点链接的非英文字符转换成数字\n<ul dir="auto">\n<li><a href="https://github.com/squidfunk/mkdocs-material/discussions/4682" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/4682/hovercard">How to disable converting non-english header links to numbers?#4682</a></li>\n</ul>\n</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'MkDocs 主题 awesome-pages 使用', 'number': 51, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/51', 'createdAt': '2024-01-11T09:24:34Z', 'lastEditedAt': '2024-01-12T02:12:55Z', 'updatedAt': '2024-01-12T02:12:55Z', 'body': '很长一段时间都在使用 [mkdocs_include_dir_to_nav](https://github.com/mysiki/mkdocs_include_dir_to_nav) 这个插件来自动包含目录下的所有 md 文件，但随着新需求的出现 —— **如何给某一个指定的子目录使用 `reverse_sort_file`，即升序排列展示子目录相应的 markdown 内容**。这才开始接触到 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 这个插件。\r\n\r\n<!-- more -->\r\n\r\n## 开始\r\n\r\n从 GitHub 可以很直观看到的是 [mkdocs_include_dir_to_nav](https://github.com/mysiki/mkdocs_include_dir_to_nav) 自从 2022-05-01 更新了 [V1.2.0](https://github.com/mysiki/mkdocs_include_dir_to_nav/releases/tag/v1.2.0) 版本后基本就已经停止了更新，Star 也才 20 多人。       \r\n![mkdocs-include-dir-to-nav](https://shub.weiyan.tech/kgarden/2024/01/mkdocs-include-dir-to-nav.png)\r\n\r\n反而是 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 一直保持着非常积极的更新频率，而且维护者和关注和使用用户也远远比 [mkdocs_include_dir_to_nav](https://github.com/mysiki/mkdocs_include_dir_to_nav) 多得多。     \r\n![mkdocs-awesome-pages-plugin](https://shub.weiyan.tech/kgarden/2024/01/mkdocs-awesome-pages-plugin.png)\r\n\r\n于是，开始着入手 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin)。不得不说，Awesome-Pages 这个插件的功能很强大，可以很好解决我"指定子目录自定义文档排序"的需求。但不可否认的是 Awesome-Pages 的文档写的的确有点糙，不认真看还真不知道应该如何上手，这也是花费我最多时间的地方。\r\n\r\n## 使用\r\n\r\n使用 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 有两个很重要的前提：\r\n\r\n1. 如果你在 `mkdocs.yml` 定义了 `nav` 或 `pages` 条目，则此插件不会执行任何操作。要使用该插件列出的功能，我们必须完全删除该条目或向其中添加 `...` 条目 ([add a `...` entry to it](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin?tab=readme-ov-file#combine-custom-navigation--file-structure))。\r\n2. 自定义导航时，在目录(或者子目录)中创建一个名为 `.pages` 的文件时，使用 `nav` 属性只能自定义**该级别的导航**！然后，按照文件和子目录在导航中出现的顺序列出文件和子目录。\r\n\r\n```\r\ndocs/\r\n├── README.md\r\n├── dirNamedA\r\n│   ├── dirA-page01.md\r\n│   ├── dirA-page02.md\r\n│   └── subDirNamedA1\r\n│   │   ├── subDirA1-page01.md\r\n│   │   └── subDirA1-page02.md\r\n│   └── subDirNamedA2\r\n│       ├── subDirA2-page01.md\r\n│       └── subDirA2-page02.md\r\n├── dirNamedB\r\n│   ├── dirB-page01.md\r\n│   ├── dirB-page02.md\r\n│   └── subDirNamedB1\r\n│       ├── subDirB1-page01.md\r\n│       └── subDirB1-page02.md\r\n└── emptyDir\r\n```\r\n\r\n这就发现了 [MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 和 MkDocs  、[mkdocs_include_dir_to_nav](https://github.com/mysiki/mkdocs_include_dir_to_nav) 在设置 navigation 时候的区别：[MkDocs Awesome Pages Plugin](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) 的 `nav` 属性只能自定义**该级别的导航**！即无法只通过一个 `.pages` 实现所有目录+子目录的 navigation 排序配置。\r\n\r\n所以，最好的做法就是在 `docs` 目录下(包含 `docs`) 给每个目录增加一个 `.pages` 文件，用于控制当前目录的所有子目录(或者 Posts) 的排序和展示。\r\n\r\n', 'bodyText': '很长一段时间都在使用 mkdocs_include_dir_to_nav 这个插件来自动包含目录下的所有 md 文件，但随着新需求的出现 —— 如何给某一个指定的子目录使用 reverse_sort_file，即升序排列展示子目录相应的 markdown 内容。这才开始接触到 MkDocs Awesome Pages Plugin 这个插件。\n\n开始\n从 GitHub 可以很直观看到的是 mkdocs_include_dir_to_nav 自从 2022-05-01 更新了 V1.2.0 版本后基本就已经停止了更新，Star 也才 20 多人。\n\n反而是 MkDocs Awesome Pages Plugin 一直保持着非常积极的更新频率，而且维护者和关注和使用用户也远远比 mkdocs_include_dir_to_nav 多得多。\n\n于是，开始着入手 MkDocs Awesome Pages Plugin。不得不说，Awesome-Pages 这个插件的功能很强大，可以很好解决我"指定子目录自定义文档排序"的需求。但不可否认的是 Awesome-Pages 的文档写的的确有点糙，不认真看还真不知道应该如何上手，这也是花费我最多时间的地方。\n使用\n使用 MkDocs Awesome Pages Plugin 有两个很重要的前提：\n\n如果你在 mkdocs.yml 定义了 nav 或 pages 条目，则此插件不会执行任何操作。要使用该插件列出的功能，我们必须完全删除该条目或向其中添加 ... 条目 (add a ... entry to it)。\n自定义导航时，在目录(或者子目录)中创建一个名为 .pages 的文件时，使用 nav 属性只能自定义该级别的导航！然后，按照文件和子目录在导航中出现的顺序列出文件和子目录。\n\ndocs/\n├── README.md\n├── dirNamedA\n│   ├── dirA-page01.md\n│   ├── dirA-page02.md\n│   └── subDirNamedA1\n│   │   ├── subDirA1-page01.md\n│   │   └── subDirA1-page02.md\n│   └── subDirNamedA2\n│       ├── subDirA2-page01.md\n│       └── subDirA2-page02.md\n├── dirNamedB\n│   ├── dirB-page01.md\n│   ├── dirB-page02.md\n│   └── subDirNamedB1\n│       ├── subDirB1-page01.md\n│       └── subDirB1-page02.md\n└── emptyDir\n\n这就发现了 MkDocs Awesome Pages Plugin 和 MkDocs  、mkdocs_include_dir_to_nav 在设置 navigation 时候的区别：MkDocs Awesome Pages Plugin 的 nav 属性只能自定义该级别的导航！即无法只通过一个 .pages 实现所有目录+子目录的 navigation 排序配置。\n所以，最好的做法就是在 docs 目录下(包含 docs) 给每个目录增加一个 .pages 文件，用于控制当前目录的所有子目录(或者 Posts) 的排序和展示。', 'bodyHTML': '<p dir="auto">很长一段时间都在使用 <a href="https://github.com/mysiki/mkdocs_include_dir_to_nav">mkdocs_include_dir_to_nav</a> 这个插件来自动包含目录下的所有 md 文件，但随着新需求的出现 —— <strong>如何给某一个指定的子目录使用 <code class="notranslate">reverse_sort_file</code>，即升序排列展示子目录相应的 markdown 内容</strong>。这才开始接触到 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 这个插件。</p>\n\n<h2 dir="auto">开始</h2>\n<p dir="auto">从 GitHub 可以很直观看到的是 <a href="https://github.com/mysiki/mkdocs_include_dir_to_nav">mkdocs_include_dir_to_nav</a> 自从 2022-05-01 更新了 <a href="https://github.com/mysiki/mkdocs_include_dir_to_nav/releases/tag/v1.2.0">V1.2.0</a> 版本后基本就已经停止了更新，Star 也才 20 多人。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fd8205e653ed08974c37aa53a5412e53dc1618c5b6f50928fa091510e11d29b7/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6b646f63732d696e636c7564652d6469722d746f2d6e61762e706e67"><img src="https://camo.githubusercontent.com/fd8205e653ed08974c37aa53a5412e53dc1618c5b6f50928fa091510e11d29b7/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6b646f63732d696e636c7564652d6469722d746f2d6e61762e706e67" alt="mkdocs-include-dir-to-nav" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/mkdocs-include-dir-to-nav.png" style="max-width: 100%;"></a></p>\n<p dir="auto">反而是 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 一直保持着非常积极的更新频率，而且维护者和关注和使用用户也远远比 <a href="https://github.com/mysiki/mkdocs_include_dir_to_nav">mkdocs_include_dir_to_nav</a> 多得多。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/804c7e8ff23a3f76657a111987c635dd947df098ee074177c20e554fdf05acd9/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6b646f63732d617765736f6d652d70616765732d706c7567696e2e706e67"><img src="https://camo.githubusercontent.com/804c7e8ff23a3f76657a111987c635dd947df098ee074177c20e554fdf05acd9/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6b646f63732d617765736f6d652d70616765732d706c7567696e2e706e67" alt="mkdocs-awesome-pages-plugin" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/mkdocs-awesome-pages-plugin.png" style="max-width: 100%;"></a></p>\n<p dir="auto">于是，开始着入手 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a>。不得不说，Awesome-Pages 这个插件的功能很强大，可以很好解决我"指定子目录自定义文档排序"的需求。但不可否认的是 Awesome-Pages 的文档写的的确有点糙，不认真看还真不知道应该如何上手，这也是花费我最多时间的地方。</p>\n<h2 dir="auto">使用</h2>\n<p dir="auto">使用 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 有两个很重要的前提：</p>\n<ol dir="auto">\n<li>如果你在 <code class="notranslate">mkdocs.yml</code> 定义了 <code class="notranslate">nav</code> 或 <code class="notranslate">pages</code> 条目，则此插件不会执行任何操作。要使用该插件列出的功能，我们必须完全删除该条目或向其中添加 <code class="notranslate">...</code> 条目 (<a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin?tab=readme-ov-file#combine-custom-navigation--file-structure">add a <code class="notranslate">...</code> entry to it</a>)。</li>\n<li>自定义导航时，在目录(或者子目录)中创建一个名为 <code class="notranslate">.pages</code> 的文件时，使用 <code class="notranslate">nav</code> 属性只能自定义<strong>该级别的导航</strong>！然后，按照文件和子目录在导航中出现的顺序列出文件和子目录。</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="docs/\n├── README.md\n├── dirNamedA\n│   ├── dirA-page01.md\n│   ├── dirA-page02.md\n│   └── subDirNamedA1\n│   │   ├── subDirA1-page01.md\n│   │   └── subDirA1-page02.md\n│   └── subDirNamedA2\n│       ├── subDirA2-page01.md\n│       └── subDirA2-page02.md\n├── dirNamedB\n│   ├── dirB-page01.md\n│   ├── dirB-page02.md\n│   └── subDirNamedB1\n│       ├── subDirB1-page01.md\n│       └── subDirB1-page02.md\n└── emptyDir"><pre class="notranslate"><code class="notranslate">docs/\n├── README.md\n├── dirNamedA\n│   ├── dirA-page01.md\n│   ├── dirA-page02.md\n│   └── subDirNamedA1\n│   │   ├── subDirA1-page01.md\n│   │   └── subDirA1-page02.md\n│   └── subDirNamedA2\n│       ├── subDirA2-page01.md\n│       └── subDirA2-page02.md\n├── dirNamedB\n│   ├── dirB-page01.md\n│   ├── dirB-page02.md\n│   └── subDirNamedB1\n│       ├── subDirB1-page01.md\n│       └── subDirB1-page02.md\n└── emptyDir\n</code></pre></div>\n<p dir="auto">这就发现了 <a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 和 MkDocs  、<a href="https://github.com/mysiki/mkdocs_include_dir_to_nav">mkdocs_include_dir_to_nav</a> 在设置 navigation 时候的区别：<a href="https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin">MkDocs Awesome Pages Plugin</a> 的 <code class="notranslate">nav</code> 属性只能自定义<strong>该级别的导航</strong>！即无法只通过一个 <code class="notranslate">.pages</code> 实现所有目录+子目录的 navigation 排序配置。</p>\n<p dir="auto">所以，最好的做法就是在 <code class="notranslate">docs</code> 目录下(包含 <code class="notranslate">docs</code>) 给每个目录增加一个 <code class="notranslate">.pages</code> 文件，用于控制当前目录的所有子目录(或者 Posts) 的排序和展示。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '2023 年年终总结', 'number': 50, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/50', 'createdAt': '2024-01-10T05:34:20Z', 'lastEditedAt': '2024-01-10T09:10:58Z', 'updatedAt': '2024-01-10T09:10:58Z', 'body': '本来没想着写年终总结 —— 主要是最近对于码字没太多的欲望，但翻到了 2021/2022 的一些年终记录，也看了不少其他网友博主 2023 年的总结，所以对自己说，还是写一写吧。\r\n\r\n2023 年对个人来说是变动的一年，这个变动主要体现在工作上。反观生活，除去家庭的一些琐事基本上也就是波澜不惊的一个状态。\r\n\r\n<!-- more -->\r\n\r\n## 工作\r\n\r\n2023 年工作最大的变动之一就是公司搬迁新的厂区。随之而来是上下班通勤的变更，这一切让原本相对充裕的时间变得更加紧凑。但时间是最大的习惯，久而久之这就成了生活的一部分，朝九晚五体现的淋漓尽致。\r\n\r\n第二个变动最大的是新办公地点新办公规章。这一点影响很大，以至于让我不得不放弃了很多以前形成的一部分工具习惯，转身去重新接纳一些新的工具和平台。于是，有了现在的[个人知识站点](https://weiyan.cc)，有了[飞书的使用体验](https://www.weiyan.cc/blog/2023/10/24/discussion-11/)，GitHub 更是一瞬间成为了个人最常逛和依赖的平台 —— 这也让我重新认识了这个平台的强大和无可替代。    \r\n<p align="center">\r\n    <img src="https://shub.weiyan.tech/kgarden/2024/01/github-contributions.png" alt="github-contributions-2023">\r\n</p>\r\n\r\n职业方向上探索了一把 AI，浅尝辄止又摸不着门道；mRNA 到 Protein 的优化道路上才刚刚看到入口，任重道远；只能背靠着老本行，在不断优化的道路上踉踉跄跄走着。\r\n\r\n职业生涯的道路上人来人往，铁打的营盘流水的兵，走了就走了，无需留念。\r\n\r\n## 生活\r\n\r\n生活上其实没什么太多说的，感觉到微妙变化的是比以前更加注意到自己和身边人的健康问题了。从老婆孩子，到母亲的腰椎问题，再到自己，再加上这一年的流感、肺炎(尤其是支原体肺炎)，2023 年在健康这个问题上的确投入了很大的一部分时间和精力。\r\n\r\n家庭琐事上，家人彼此磕磕碰碰的事情总会有，生活无律，人生无常，我们更需要的是相互之间相互理解与包容。对于老婆和孩子，需要更多的关心和陪伴。\r\n\r\n运动这件事情上，基本还能保持着每周至少一场羽毛球，这是值得肯定的。虽然变换了新的地方，融入了新的面孔，但至少我们还能在一起用羽毛球找到属于彼此的快乐，那也足够了。\r\n\r\n孩子的事情上，这一年约着她的同班同学打卡了不少地方，这也让集体一起遛娃成为了周末值得期待的活动之一。\r\n\r\n## 最后\r\n\r\n最后，2024 年就要搬进新的房子了，这是值得期待和努力的一件大事。希望自己和家人在新的环境中能收获新的惊喜，身体健康，和和美满。\r\n\r\n', 'bodyText': '本来没想着写年终总结 —— 主要是最近对于码字没太多的欲望，但翻到了 2021/2022 的一些年终记录，也看了不少其他网友博主 2023 年的总结，所以对自己说，还是写一写吧。\n2023 年对个人来说是变动的一年，这个变动主要体现在工作上。反观生活，除去家庭的一些琐事基本上也就是波澜不惊的一个状态。\n\n工作\n2023 年工作最大的变动之一就是公司搬迁新的厂区。随之而来是上下班通勤的变更，这一切让原本相对充裕的时间变得更加紧凑。但时间是最大的习惯，久而久之这就成了生活的一部分，朝九晚五体现的淋漓尽致。\n第二个变动最大的是新办公地点新办公规章。这一点影响很大，以至于让我不得不放弃了很多以前形成的一部分工具习惯，转身去重新接纳一些新的工具和平台。于是，有了现在的个人知识站点，有了飞书的使用体验，GitHub 更是一瞬间成为了个人最常逛和依赖的平台 —— 这也让我重新认识了这个平台的强大和无可替代。\n\n    \n\n职业方向上探索了一把 AI，浅尝辄止又摸不着门道；mRNA 到 Protein 的优化道路上才刚刚看到入口，任重道远；只能背靠着老本行，在不断优化的道路上踉踉跄跄走着。\n职业生涯的道路上人来人往，铁打的营盘流水的兵，走了就走了，无需留念。\n生活\n生活上其实没什么太多说的，感觉到微妙变化的是比以前更加注意到自己和身边人的健康问题了。从老婆孩子，到母亲的腰椎问题，再到自己，再加上这一年的流感、肺炎(尤其是支原体肺炎)，2023 年在健康这个问题上的确投入了很大的一部分时间和精力。\n家庭琐事上，家人彼此磕磕碰碰的事情总会有，生活无律，人生无常，我们更需要的是相互之间相互理解与包容。对于老婆和孩子，需要更多的关心和陪伴。\n运动这件事情上，基本还能保持着每周至少一场羽毛球，这是值得肯定的。虽然变换了新的地方，融入了新的面孔，但至少我们还能在一起用羽毛球找到属于彼此的快乐，那也足够了。\n孩子的事情上，这一年约着她的同班同学打卡了不少地方，这也让集体一起遛娃成为了周末值得期待的活动之一。\n最后\n最后，2024 年就要搬进新的房子了，这是值得期待和努力的一件大事。希望自己和家人在新的环境中能收获新的惊喜，身体健康，和和美满。', 'bodyHTML': '<p dir="auto">本来没想着写年终总结 —— 主要是最近对于码字没太多的欲望，但翻到了 2021/2022 的一些年终记录，也看了不少其他网友博主 2023 年的总结，所以对自己说，还是写一写吧。</p>\n<p dir="auto">2023 年对个人来说是变动的一年，这个变动主要体现在工作上。反观生活，除去家庭的一些琐事基本上也就是波澜不惊的一个状态。</p>\n\n<h2 dir="auto">工作</h2>\n<p dir="auto">2023 年工作最大的变动之一就是公司搬迁新的厂区。随之而来是上下班通勤的变更，这一切让原本相对充裕的时间变得更加紧凑。但时间是最大的习惯，久而久之这就成了生活的一部分，朝九晚五体现的淋漓尽致。</p>\n<p dir="auto">第二个变动最大的是新办公地点新办公规章。这一点影响很大，以至于让我不得不放弃了很多以前形成的一部分工具习惯，转身去重新接纳一些新的工具和平台。于是，有了现在的<a href="https://weiyan.cc" rel="nofollow">个人知识站点</a>，有了<a href="https://www.weiyan.cc/blog/2023/10/24/discussion-11/" rel="nofollow">飞书的使用体验</a>，GitHub 更是一瞬间成为了个人最常逛和依赖的平台 —— 这也让我重新认识了这个平台的强大和无可替代。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bd17c283c56e966d3dcdbbd341b8b0807b59fcba50547e01dfa80eaaa5c9228e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6769746875622d636f6e747269627574696f6e732e706e67"><img src="https://camo.githubusercontent.com/bd17c283c56e966d3dcdbbd341b8b0807b59fcba50547e01dfa80eaaa5c9228e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6769746875622d636f6e747269627574696f6e732e706e67" alt="github-contributions-2023" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/github-contributions.png" style="max-width: 100%;"></a>\n</p>\n<p dir="auto">职业方向上探索了一把 AI，浅尝辄止又摸不着门道；mRNA 到 Protein 的优化道路上才刚刚看到入口，任重道远；只能背靠着老本行，在不断优化的道路上踉踉跄跄走着。</p>\n<p dir="auto">职业生涯的道路上人来人往，铁打的营盘流水的兵，走了就走了，无需留念。</p>\n<h2 dir="auto">生活</h2>\n<p dir="auto">生活上其实没什么太多说的，感觉到微妙变化的是比以前更加注意到自己和身边人的健康问题了。从老婆孩子，到母亲的腰椎问题，再到自己，再加上这一年的流感、肺炎(尤其是支原体肺炎)，2023 年在健康这个问题上的确投入了很大的一部分时间和精力。</p>\n<p dir="auto">家庭琐事上，家人彼此磕磕碰碰的事情总会有，生活无律，人生无常，我们更需要的是相互之间相互理解与包容。对于老婆和孩子，需要更多的关心和陪伴。</p>\n<p dir="auto">运动这件事情上，基本还能保持着每周至少一场羽毛球，这是值得肯定的。虽然变换了新的地方，融入了新的面孔，但至少我们还能在一起用羽毛球找到属于彼此的快乐，那也足够了。</p>\n<p dir="auto">孩子的事情上，这一年约着她的同班同学打卡了不少地方，这也让集体一起遛娃成为了周末值得期待的活动之一。</p>\n<h2 dir="auto">最后</h2>\n<p dir="auto">最后，2024 年就要搬进新的房子了，这是值得期待和努力的一件大事。希望自己和家人在新的环境中能收获新的惊喜，身体健康，和和美满。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '苹果字体 PingFang SC 的一些踩坑记录', 'number': 49, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/49', 'createdAt': '2024-01-09T05:43:52Z', 'lastEditedAt': '2024-01-29T02:24:34Z', 'updatedAt': '2024-01-29T02:24:34Z', 'body': '曾经在 《[为 Windows 系统替换优雅的苹果字体](https://www.weiyan.cc/cookbook/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/windows/2021-02-19-win-font/)》中提到可在 Windows 中使用苹方字体替代默认的微软雅黑，这里就有一个问题即需要在 Wondows 下安装苹方字体 —— 如果你的字体安装错误，很有可能导致你的浏览器或其他应用出现乱码。\r\n\r\n## 浏览器乱码\r\n\r\n出现这个的原因主要是站点使用了 `PingFang SC` 的字体设置。\r\n```\r\nbody {\r\n    font-family: PingFang SC,microsoft yahei,sans-serif;\r\n}\r\n```\r\n\r\n我们可以看到使用 F12 检查源码模式把 `font-family` 中的 `PingFang SC` 去掉后即可显示正常。\r\n\r\n## 字体安装后不起作用\r\n\r\n这里就涉及一个 **萍方** vs **苹方** vs **PingFang** 区别的一个问题。\r\n\r\n> 猛地看上去，萍方/苹方/PingFang 应该是同一个字体。但是，实际上的效果，却并不相同。那么，到底谁是真正的 pingfang sc呢？    \r\n>     \r\n> 这里以能否**以 PingFang SC 为名称识别出来，作为标准**。为什么这么说呢？因为网页里面的 font-family，写的都是 pingfang sc，也许萍方/苹方都是差不多的字体，但是不能在网页里面自动识别出来。所以，就等于零。\r\n> \r\n> ```\r\n> body {\r\n>    font-family: PingFang SC,microsoft yahei,sans-serif;\r\n> }\r\n> ```\r\n> 比如，上述 css 定义，就来自于腾讯云主页。在实际的应用过程中，只有安装好的 pingfang sc 系列字体才能被识别【如下图中的右侧字体】。**注意：萍方/苹方，在安装的时候，文件名也都是 pingfang-sc 之类的文件名。但是，安装完成的真正成品，可不是这个拼音名字。进而导致字体不能识别。**\r\n> ![pingfang sc 区别](https://shub.weiyan.tech/kgarden/2024/01/fingfang-sc.png)\r\n>     \r\n> From 《[由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则](https://newsn.net/say/css-font-family-pingfang.html)》\r\n\r\n## 解决方案\r\n\r\n参考 《[由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则](https://newsn.net/say/css-font-family-pingfang.html)》 一文的方案。\r\n\r\n### 安装 PingFang SC\r\n\r\n名称为 **PingFang SC** (英文) 的字体找了很久才在 GitHub 翻到一个：[shenweiyan/PingFangSC-Fonts](https://github.com/shenweiyan/PingFangSC-Fonts)，如有需要可以直接下载安装。\r\n\r\n> 国内大多数网页，在定义网页字体的时候，都是先定义 PingFang SC，然后定义微软雅黑。那么：\r\n> - 正常来说，win 系统是不会安装 PingFang SC 字体的，所以，显示微软雅黑，页面正常。\r\n> - 但是，一旦单独安装了 PingFang SC Light，页面就会识别出这个 Light 字体，页面不正常。\r\n> - 解决方案是：再安装一个 PingFang SC Regular，页面会在 Light 之前优先识别 Regular，页面正常。\r\n\r\n>    \r\n> 如果您非要在 win 下面安装 pingfang sc 字体，可能要三思而后安装了。李鬼似乎有点多...\r\n\r\n>    \r\n> ![PingFang SC Regular](https://shub.weiyan.tech/kgarden/2024/01/pingfang-sc-regular.png)\r\n\r\n### 删除 PingFang SC\r\n\r\n个人用的就是这一个方法，但是在 `C:\\Windows\\Fonts` 中删除的时候会提示 **该字体正在使用无法删除！所以，必须要关闭使用苹方字体的程序。**\r\n\r\n因此，我们需要：\r\n\r\n参考：《[电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体](https://www.bilibili.com/video/BV1nc411575s/)》 - 哔哩哔哩\r\n\r\n- 在 Windows 任务管理的进程中把浏览器相关的全部结束掉，如 360 浏览器相关的进程、Microsoft edge、Google Chrome 等等，全部选择结束任务。\r\n- 把其他可能使用苹方字体的，如 OneNote、WPS、微信、... 这些的进程也全部结束掉。\r\n\r\n最后，回到 `C:\\Windows\\Fonts` 中再次删除相应的苹方字体，发现即可成功删除。删除了这些苹方字体，浏览器上的字体显示也就恢复正常了。\r\n\r\n## 参考资料\r\n\r\n1. 苏南大叔，《[由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则](https://newsn.net/say/css-font-family-pingfang.html)》\r\n2. 科技猎手2023，《[电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体](https://www.bilibili.com/video/BV1nc411575s/)》 - 哔哩哔哩', 'bodyText': '曾经在 《为 Windows 系统替换优雅的苹果字体》中提到可在 Windows 中使用苹方字体替代默认的微软雅黑，这里就有一个问题即需要在 Wondows 下安装苹方字体 —— 如果你的字体安装错误，很有可能导致你的浏览器或其他应用出现乱码。\n浏览器乱码\n出现这个的原因主要是站点使用了 PingFang SC 的字体设置。\nbody {\n    font-family: PingFang SC,microsoft yahei,sans-serif;\n}\n\n我们可以看到使用 F12 检查源码模式把 font-family 中的 PingFang SC 去掉后即可显示正常。\n字体安装后不起作用\n这里就涉及一个 萍方 vs 苹方 vs PingFang 区别的一个问题。\n\n猛地看上去，萍方/苹方/PingFang 应该是同一个字体。但是，实际上的效果，却并不相同。那么，到底谁是真正的 pingfang sc呢？\n这里以能否以 PingFang SC 为名称识别出来，作为标准。为什么这么说呢？因为网页里面的 font-family，写的都是 pingfang sc，也许萍方/苹方都是差不多的字体，但是不能在网页里面自动识别出来。所以，就等于零。\nbody {\n   font-family: PingFang SC,microsoft yahei,sans-serif;\n}\n\n比如，上述 css 定义，就来自于腾讯云主页。在实际的应用过程中，只有安装好的 pingfang sc 系列字体才能被识别【如下图中的右侧字体】。注意：萍方/苹方，在安装的时候，文件名也都是 pingfang-sc 之类的文件名。但是，安装完成的真正成品，可不是这个拼音名字。进而导致字体不能识别。\n\nFrom 《由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则》\n\n解决方案\n参考 《由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则》 一文的方案。\n安装 PingFang SC\n名称为 PingFang SC (英文) 的字体找了很久才在 GitHub 翻到一个：shenweiyan/PingFangSC-Fonts，如有需要可以直接下载安装。\n\n国内大多数网页，在定义网页字体的时候，都是先定义 PingFang SC，然后定义微软雅黑。那么：\n\n正常来说，win 系统是不会安装 PingFang SC 字体的，所以，显示微软雅黑，页面正常。\n但是，一旦单独安装了 PingFang SC Light，页面就会识别出这个 Light 字体，页面不正常。\n解决方案是：再安装一个 PingFang SC Regular，页面会在 Light 之前优先识别 Regular，页面正常。\n\n\n\n如果您非要在 win 下面安装 pingfang sc 字体，可能要三思而后安装了。李鬼似乎有点多...\n\n\n\n\n删除 PingFang SC\n个人用的就是这一个方法，但是在 C:\\Windows\\Fonts 中删除的时候会提示 该字体正在使用无法删除！所以，必须要关闭使用苹方字体的程序。\n因此，我们需要：\n参考：《电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体》 - 哔哩哔哩\n\n在 Windows 任务管理的进程中把浏览器相关的全部结束掉，如 360 浏览器相关的进程、Microsoft edge、Google Chrome 等等，全部选择结束任务。\n把其他可能使用苹方字体的，如 OneNote、WPS、微信、... 这些的进程也全部结束掉。\n\n最后，回到 C:\\Windows\\Fonts 中再次删除相应的苹方字体，发现即可成功删除。删除了这些苹方字体，浏览器上的字体显示也就恢复正常了。\n参考资料\n\n苏南大叔，《由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则》\n科技猎手2023，《电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体》 - 哔哩哔哩', 'bodyHTML': '<p dir="auto">曾经在 《<a href="https://www.weiyan.cc/cookbook/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/windows/2021-02-19-win-font/" rel="nofollow">为 Windows 系统替换优雅的苹果字体</a>》中提到可在 Windows 中使用苹方字体替代默认的微软雅黑，这里就有一个问题即需要在 Wondows 下安装苹方字体 —— 如果你的字体安装错误，很有可能导致你的浏览器或其他应用出现乱码。</p>\n<h2 dir="auto">浏览器乱码</h2>\n<p dir="auto">出现这个的原因主要是站点使用了 <code class="notranslate">PingFang SC</code> 的字体设置。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="body {\n    font-family: PingFang SC,microsoft yahei,sans-serif;\n}"><pre class="notranslate"><code class="notranslate">body {\n    font-family: PingFang SC,microsoft yahei,sans-serif;\n}\n</code></pre></div>\n<p dir="auto">我们可以看到使用 F12 检查源码模式把 <code class="notranslate">font-family</code> 中的 <code class="notranslate">PingFang SC</code> 去掉后即可显示正常。</p>\n<h2 dir="auto">字体安装后不起作用</h2>\n<p dir="auto">这里就涉及一个 <strong>萍方</strong> vs <strong>苹方</strong> vs <strong>PingFang</strong> 区别的一个问题。</p>\n<blockquote>\n<p dir="auto">猛地看上去，萍方/苹方/PingFang 应该是同一个字体。但是，实际上的效果，却并不相同。那么，到底谁是真正的 pingfang sc呢？</p>\n<p dir="auto">这里以能否<strong>以 PingFang SC 为名称识别出来，作为标准</strong>。为什么这么说呢？因为网页里面的 font-family，写的都是 pingfang sc，也许萍方/苹方都是差不多的字体，但是不能在网页里面自动识别出来。所以，就等于零。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="body {\n   font-family: PingFang SC,microsoft yahei,sans-serif;\n}"><pre class="notranslate"><code class="notranslate">body {\n   font-family: PingFang SC,microsoft yahei,sans-serif;\n}\n</code></pre></div>\n<p dir="auto">比如，上述 css 定义，就来自于腾讯云主页。在实际的应用过程中，只有安装好的 pingfang sc 系列字体才能被识别【如下图中的右侧字体】。<strong>注意：萍方/苹方，在安装的时候，文件名也都是 pingfang-sc 之类的文件名。但是，安装完成的真正成品，可不是这个拼音名字。进而导致字体不能识别。</strong><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7e543cdea780a10f951affde75b25a0c1b94ca72cf34f21f15295b4e799b8df0/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f66696e6766616e672d73632e706e67"><img src="https://camo.githubusercontent.com/7e543cdea780a10f951affde75b25a0c1b94ca72cf34f21f15295b4e799b8df0/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f66696e6766616e672d73632e706e67" alt="pingfang sc 区别" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/fingfang-sc.png" style="max-width: 100%;"></a></p>\n<p dir="auto">From 《<a href="https://newsn.net/say/css-font-family-pingfang.html" rel="nofollow">由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则</a>》</p>\n</blockquote>\n<h2 dir="auto">解决方案</h2>\n<p dir="auto">参考 《<a href="https://newsn.net/say/css-font-family-pingfang.html" rel="nofollow">由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则</a>》 一文的方案。</p>\n<h3 dir="auto">安装 PingFang SC</h3>\n<p dir="auto">名称为 <strong>PingFang SC</strong> (英文) 的字体找了很久才在 GitHub 翻到一个：<a href="https://github.com/shenweiyan/PingFangSC-Fonts">shenweiyan/PingFangSC-Fonts</a>，如有需要可以直接下载安装。</p>\n<blockquote>\n<p dir="auto">国内大多数网页，在定义网页字体的时候，都是先定义 PingFang SC，然后定义微软雅黑。那么：</p>\n<ul dir="auto">\n<li>正常来说，win 系统是不会安装 PingFang SC 字体的，所以，显示微软雅黑，页面正常。</li>\n<li>但是，一旦单独安装了 PingFang SC Light，页面就会识别出这个 Light 字体，页面不正常。</li>\n<li>解决方案是：再安装一个 PingFang SC Regular，页面会在 Light 之前优先识别 Regular，页面正常。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p dir="auto">如果您非要在 win 下面安装 pingfang sc 字体，可能要三思而后安装了。李鬼似乎有点多...</p>\n</blockquote>\n<blockquote>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bc502ce1abae21e2b501f3cdf923e64f54063399f31c08b295aa21a73deb17e2/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f70696e6766616e672d73632d726567756c61722e706e67"><img src="https://camo.githubusercontent.com/bc502ce1abae21e2b501f3cdf923e64f54063399f31c08b295aa21a73deb17e2/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f70696e6766616e672d73632d726567756c61722e706e67" alt="PingFang SC Regular" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/pingfang-sc-regular.png" style="max-width: 100%;"></a></p>\n</blockquote>\n<h3 dir="auto">删除 PingFang SC</h3>\n<p dir="auto">个人用的就是这一个方法，但是在 <code class="notranslate">C:\\Windows\\Fonts</code> 中删除的时候会提示 <strong>该字体正在使用无法删除！所以，必须要关闭使用苹方字体的程序。</strong></p>\n<p dir="auto">因此，我们需要：</p>\n<p dir="auto">参考：《<a href="https://www.bilibili.com/video/BV1nc411575s/" rel="nofollow">电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体</a>》 - 哔哩哔哩</p>\n<ul dir="auto">\n<li>在 Windows 任务管理的进程中把浏览器相关的全部结束掉，如 360 浏览器相关的进程、Microsoft edge、Google Chrome 等等，全部选择结束任务。</li>\n<li>把其他可能使用苹方字体的，如 OneNote、WPS、微信、... 这些的进程也全部结束掉。</li>\n</ul>\n<p dir="auto">最后，回到 <code class="notranslate">C:\\Windows\\Fonts</code> 中再次删除相应的苹方字体，发现即可成功删除。删除了这些苹方字体，浏览器上的字体显示也就恢复正常了。</p>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li>苏南大叔，《<a href="https://newsn.net/say/css-font-family-pingfang.html" rel="nofollow">由 pingfang sc 字体缺失，所暴露的字体加载顺序的潜规则</a>》</li>\n<li>科技猎手2023，《<a href="https://www.bilibili.com/video/BV1nc411575s/" rel="nofollow">电脑安装新字体，浏览器字体全变了，如何删除正在使用的苹方字体</a>》 - 哔哩哔哩</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '公众号'}, {'name': '1.3.10-Windows'}]}, 'comments': {'nodes': []}}, {'title': '3212-框架依赖', 'number': 48, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/48', 'createdAt': '2024-01-08T03:49:03Z', 'lastEditedAt': '2024-01-12T07:11:22Z', 'updatedAt': '2024-01-12T07:11:22Z', 'body': '> 编译：[Shen Weiyan](https://www.weiyan.cc)      \r\n> 原文：<https://docs.galaxyproject.org/en/master/admin/python.html>      ', 'bodyText': '编译：Shen Weiyan\n原文：https://docs.galaxyproject.org/en/master/admin/python.html', 'bodyHTML': '<blockquote>\n<p dir="auto">编译：<a href="https://www.weiyan.cc" rel="nofollow">Shen Weiyan</a><br>\n原文：<a href="https://docs.galaxyproject.org/en/master/admin/python.html" rel="nofollow">https://docs.galaxyproject.org/en/master/admin/python.html</a></p>\n</blockquote>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.2-管理员文档'}, 'labels': {'nodes': [{'name': '3.2.1-GalaxyAdmin'}]}, 'comments': {'nodes': []}}, {'title': '3211-支持的 Python 版本', 'number': 47, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/47', 'createdAt': '2024-01-08T02:21:30Z', 'lastEditedAt': '2024-01-12T07:11:40Z', 'updatedAt': '2024-01-12T07:11:40Z', 'body': '> 编译：[沈维燕](https://www.weiyan.cc)     \r\n> 原文：<https://docs.galaxyproject.org/en/master/admin/python.html>       \r\n\r\nGalaxy 的核心功能目前支持 Python >=3.7。\r\n\r\n如果 Galaxy 排斥你正在使用的 Python 版本：\r\n\r\n1. 完全删除 Galaxy 使用的 Python virtualenv（可以使用 `GALAXY_VIRTUAL_ENV` 环境变量配置，默认为 `.venv` ），例如： `rm -rf /path/to/galaxy/.venv`。\r\n2. 如果您在 conda 环境中使用 Python（可以使用 `GALAXY_CONDA_ENV` 环境变量进行配置，默认为 `_galaxy_`），请将其删除，例如： `conda env remove -n _galaxy_`。\r\n3. 让 Galaxy 知道要使用哪个 Python 的方法有以下几种：    \r\n   - 如果您想从 conda 使用 Python，只需激活 `base` 环境，Galaxy 将为自己创建一个新的 conda 环境。\r\n   - 否则：    \r\n     - 确保安装了受支持的 Python 版本。\r\n     - 验证您要使用的 Python 解释器是否位于 `which -a python3 python` 输出中的第一个位置（如果您使用的是 Galaxy <=19.09，则为 `which -a python` ）。如果不是这种情况：     \r\n       - 如果您使用的是 Galaxy >= 20.01，只需执行： `export GALAXY_PYTHON=/path/to/python`。\r\n       - 如果你使用的是较旧版本的 Galaxy，你可以操控你的 shell 的 `PATH` 变量，将正确的版本置于首位。你可以通过创建一个新目录，将 python 的符号链接添加到其中，并将该目录置于 PATH 的最前面来完成此操作：\r\n         ```bash\r\n         % mkdir ~/galaxy-python\r\n         % ln -s /path/to/python ~/galaxy-python/python\r\n         % export PATH=~/galaxy-python:$PATH\r\n         ```\r\n\r\n4. 从 Python 2 升级时，删除已编译的 `mako` 模板：\r\n   ```basn\r\n   % rm -rf /path/to/galaxy/database/compiled_templates/\r\n   ```\r\n   这些模板将在启动 Galaxy 时自动重新生成。\r\n\r\n5. 再次启动 Galaxy。\r\n\r\n!!! abstract "注意"\r\n\r\n    如果您从源代码编译自己的 Python 解释器，请确保构建了 `ssl`、`sqlite3`、`curses` 和 `bz2` 模块，并且安装后可导入。这些 "额外" 模块是在编译过程的最后阶段构建的，并且是 Galaxy 框架所需的。如果在 Linux 上进行编译，您可能需要安装适用于 OpenSSL 和 Bzip2 的 `-dev` 包。您可能还需要使用共享库 (`--enable-shared`) 构建 Python。', 'bodyText': '编译：沈维燕\n原文：https://docs.galaxyproject.org/en/master/admin/python.html\n\nGalaxy 的核心功能目前支持 Python >=3.7。\n如果 Galaxy 排斥你正在使用的 Python 版本：\n\n\n完全删除 Galaxy 使用的 Python virtualenv（可以使用 GALAXY_VIRTUAL_ENV 环境变量配置，默认为 .venv ），例如： rm -rf /path/to/galaxy/.venv。\n\n\n如果您在 conda 环境中使用 Python（可以使用 GALAXY_CONDA_ENV 环境变量进行配置，默认为 _galaxy_），请将其删除，例如： conda env remove -n _galaxy_。\n\n\n让 Galaxy 知道要使用哪个 Python 的方法有以下几种：\n\n如果您想从 conda 使用 Python，只需激活 base 环境，Galaxy 将为自己创建一个新的 conda 环境。\n否则：\n\n确保安装了受支持的 Python 版本。\n验证您要使用的 Python 解释器是否位于 which -a python3 python 输出中的第一个位置（如果您使用的是 Galaxy <=19.09，则为 which -a python ）。如果不是这种情况：\n\n如果您使用的是 Galaxy >= 20.01，只需执行： export GALAXY_PYTHON=/path/to/python。\n如果你使用的是较旧版本的 Galaxy，你可以操控你的 shell 的 PATH 变量，将正确的版本置于首位。你可以通过创建一个新目录，将 python 的符号链接添加到其中，并将该目录置于 PATH 的最前面来完成此操作：\n% mkdir ~/galaxy-python\n% ln -s /path/to/python ~/galaxy-python/python\n% export PATH=~/galaxy-python:$PATH\n\n\n\n\n\n\n\n\n从 Python 2 升级时，删除已编译的 mako 模板：\n% rm -rf /path/to/galaxy/database/compiled_templates/\n\n这些模板将在启动 Galaxy 时自动重新生成。\n\n\n再次启动 Galaxy。\n\n\n!!! abstract "注意"\n如果您从源代码编译自己的 Python 解释器，请确保构建了 `ssl`、`sqlite3`、`curses` 和 `bz2` 模块，并且安装后可导入。这些 "额外" 模块是在编译过程的最后阶段构建的，并且是 Galaxy 框架所需的。如果在 Linux 上进行编译，您可能需要安装适用于 OpenSSL 和 Bzip2 的 `-dev` 包。您可能还需要使用共享库 (`--enable-shared`) 构建 Python。', 'bodyHTML': '<blockquote>\n<p dir="auto">编译：<a href="https://www.weiyan.cc" rel="nofollow">沈维燕</a><br>\n原文：<a href="https://docs.galaxyproject.org/en/master/admin/python.html" rel="nofollow">https://docs.galaxyproject.org/en/master/admin/python.html</a></p>\n</blockquote>\n<p dir="auto">Galaxy 的核心功能目前支持 Python &gt;=3.7。</p>\n<p dir="auto">如果 Galaxy 排斥你正在使用的 Python 版本：</p>\n<ol dir="auto">\n<li>\n<p dir="auto">完全删除 Galaxy 使用的 Python virtualenv（可以使用 <code class="notranslate">GALAXY_VIRTUAL_ENV</code> 环境变量配置，默认为 <code class="notranslate">.venv</code> ），例如： <code class="notranslate">rm -rf /path/to/galaxy/.venv</code>。</p>\n</li>\n<li>\n<p dir="auto">如果您在 conda 环境中使用 Python（可以使用 <code class="notranslate">GALAXY_CONDA_ENV</code> 环境变量进行配置，默认为 <code class="notranslate">_galaxy_</code>），请将其删除，例如： <code class="notranslate">conda env remove -n _galaxy_</code>。</p>\n</li>\n<li>\n<p dir="auto">让 Galaxy 知道要使用哪个 Python 的方法有以下几种：</p>\n<ul dir="auto">\n<li>如果您想从 conda 使用 Python，只需激活 <code class="notranslate">base</code> 环境，Galaxy 将为自己创建一个新的 conda 环境。</li>\n<li>否则：\n<ul dir="auto">\n<li>确保安装了受支持的 Python 版本。</li>\n<li>验证您要使用的 Python 解释器是否位于 <code class="notranslate">which -a python3 python</code> 输出中的第一个位置（如果您使用的是 Galaxy &lt;=19.09，则为 <code class="notranslate">which -a python</code> ）。如果不是这种情况：\n<ul dir="auto">\n<li>如果您使用的是 Galaxy &gt;= 20.01，只需执行： <code class="notranslate">export GALAXY_PYTHON=/path/to/python</code>。</li>\n<li>如果你使用的是较旧版本的 Galaxy，你可以操控你的 shell 的 <code class="notranslate">PATH</code> 变量，将正确的版本置于首位。你可以通过创建一个新目录，将 python 的符号链接添加到其中，并将该目录置于 PATH 的最前面来完成此操作：\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="% mkdir ~/galaxy-python\n% ln -s /path/to/python ~/galaxy-python/python\n% export PATH=~/galaxy-python:$PATH"><pre class="notranslate">% mkdir <span class="pl-k">~</span>/galaxy-python\n% ln -s /path/to/python <span class="pl-k">~</span>/galaxy-python/python\n% <span class="pl-k">export</span> PATH=<span class="pl-k">~</span>/galaxy-python:<span class="pl-smi">$PATH</span></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir="auto">从 Python 2 升级时，删除已编译的 <code class="notranslate">mako</code> 模板：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="% rm -rf /path/to/galaxy/database/compiled_templates/"><pre lang="basn" class="notranslate"><code class="notranslate">% rm -rf /path/to/galaxy/database/compiled_templates/\n</code></pre></div>\n<p dir="auto">这些模板将在启动 Galaxy 时自动重新生成。</p>\n</li>\n<li>\n<p dir="auto">再次启动 Galaxy。</p>\n</li>\n</ol>\n<p dir="auto">!!! abstract "注意"</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="如果您从源代码编译自己的 Python 解释器，请确保构建了 `ssl`、`sqlite3`、`curses` 和 `bz2` 模块，并且安装后可导入。这些 &quot;额外&quot; 模块是在编译过程的最后阶段构建的，并且是 Galaxy 框架所需的。如果在 Linux 上进行编译，您可能需要安装适用于 OpenSSL 和 Bzip2 的 `-dev` 包。您可能还需要使用共享库 (`--enable-shared`) 构建 Python。"><pre class="notranslate"><code class="notranslate">如果您从源代码编译自己的 Python 解释器，请确保构建了 `ssl`、`sqlite3`、`curses` 和 `bz2` 模块，并且安装后可导入。这些 "额外" 模块是在编译过程的最后阶段构建的，并且是 Galaxy 框架所需的。如果在 Linux 上进行编译，您可能需要安装适用于 OpenSSL 和 Bzip2 的 `-dev` 包。您可能还需要使用共享库 (`--enable-shared`) 构建 Python。\n</code></pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.2-管理员文档'}, 'labels': {'nodes': [{'name': '3.2.1-GalaxyAdmin'}]}, 'comments': {'nodes': []}}, {'title': 'Galaxy Project 的 Sphinx 文档部署', 'number': 46, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/46', 'createdAt': '2024-01-05T07:29:59Z', 'lastEditedAt': '2024-02-02T01:23:29Z', 'updatedAt': '2024-02-02T01:23:29Z', 'body': '<https://docs.galaxyproject.org/> 是 Galaxy Project 官方的文档地址链接，这是一个基于 [Sphinx](https://www.sphinx-doc.org/) + [Read the Docs](https://readthedocs.org/) 的文档站点。如果我们也想要创建一个这样一模一样的 Galaxy 文档需要怎么操作呢？\r\n\r\n<!-- more -->\r\n\r\n虽然 [Galaxy 官方文档](https://docs.galaxyproject.org/en/master/#building-this-documentation) 也给出了关于构建该文档的一些说明，但没有太多细节。\r\n\r\n> If you have your own copy of the Galaxy source code, you can also generate your own version of this documentation. Run the following command from the Galaxy’s root:\r\n> ```\r\n> $ make docs\r\n> ```\r\n> The generated documentation will be in `doc/build/html/` and can be viewed with a web browser. Note that you will need to install Sphinx and other module dependencies which are listed in the Makefile in the Galaxy root folder.\r\n\r\n下面我们来详细分解一下 `make docs` 这个命令具体执行的构建步骤。\r\n\r\n首先，在 Galaxy 根目录的执行 `make docs`，主要是执行了该目录下 [Makefile](https://github.com/galaxyproject/galaxy/blob/dev/Makefile) 中的这几句命令：\r\n```\r\ndocs: ## Generate HTML documentation.\r\n# Run following commands to setup the Python portion of the requirements:\r\n#   $ ./scripts/common_startup.sh\r\n#   $ . .venv/bin/activate\r\n#   $ pip install -r requirements.txt -r lib/galaxy/dependencies/dev-requirements.txt\r\n\t$(IN_VENV) $(MAKE) -C doc clean\r\n\t$(IN_VENV) $(MAKE) -C doc html\r\n```\r\n- `$(MAKE)`就是预设的 `make` 这个命令的名称（或者路径）。    \r\n- `-C`：到指定目录下读取 Makefile 文件并执行（给出指定的目录的路径）。     \r\n\r\n第二步，读取 `doc` 目录下的 [Makefile](https://github.com/galaxyproject/galaxy/blob/dev/doc/Makefile) 文件，并执行 `make html`。\r\n```\r\nhtml: $(GENERATED_RST)\r\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\r\n\t@echo\r\n\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."\r\n```\r\n\r\n结合其中的一些参数，其实最终就是执行了下面这个命令完成最终的构建。\r\n```bash\r\nsphinx-build -b html -d build/doctrees source build/html\r\n```\r\n\r\n- sphinx-build [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]\r\n- sourcedir：path to documentation source files\r\n- outputdir：path to output directory\r\n- `-b`：BUILDER，builder to use (default: html)\r\n\r\n了解了以上几个步骤后，我们就可以把 Galaxy 根目录的 doc 目录单独拎出来，通过 Sphinx 的命令实现独立构建部署。\r\n\r\n## 1. 安装必须依赖\r\n\r\n主要包括三个依赖。\r\n```\r\npip3 install Sphinx sphinx_rtd_theme myst_parser\r\n```\r\n\r\n## 2. 修改配置\r\n\r\n由于 `sphinx-build` 会读取 `source/conf.py` 并执行，但这个文件调用了 [`galaxy.version`](https://github.com/galaxyproject/galaxy/blob/dev/lib/galaxy/version.py) 模块：\r\n![No module named \'galaxy\'](https://shub.weiyan.tech/kgarden/2024/01/no-galaxy-version.png)\r\n\r\n所以，如果我们想要把 `galaxy/doc` 和 Galaxy 独立开来进行部署，就需要修改一下 `source/conf.py`：\r\n```python\r\n# The short X.Y version.\r\n#from galaxy.version import (\r\n#    VERSION,\r\n#    VERSION_MAJOR,\r\n#)\r\n\r\nVERSION_MAJOR = "23.1"\r\nVERSION_MINOR = "5.dev0"\r\nVERSION = VERSION_MAJOR + (f".{VERSION_MINOR}" if VERSION_MINOR else "")\r\n```\r\n\r\n## 3. 执行构建\r\n```bash\r\n$ sphinx-build -b html -d build/doctrees   source build/html\r\nRunning Sphinx v7.2.6\r\nmaking output directory... done\r\nmyst v2.0.0: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions={\'deflist\', \'attrs_block\', \'substitution\'}, disable_syntax=[], all_links_external=False, url_schemes=(\'http\', \'https\', \'mailto\', \'ftp\'), ref_domains=None, fence_as_directive=set(), number_code_blocks=[], title_to_header=False, heading_anchors=5, heading_slug_func=<function make_id at 0x7f46201a6a60>, html_meta={}, footnote_transition=True, words_per_minute=200, substitutions={}, linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes=\'tex2jax_process|mathjax_process|math|output_area\', enable_checkboxes=False, suppress_warnings=[], highlight_code_blocks=True)\r\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\r\nloading intersphinx inventory from https://requests.readthedocs.io/en/master/objects.inv...\r\nintersphinx inventory has moved: https://requests.readthedocs.io/en/master/objects.inv -> https://requests.readthedocs.io/en/latest/objects.inv\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nwriting output... \r\nbuilding [html]: targets for 332 source files that are out of date\r\nupdating environment: [new config] 332 added, 0 changed, 0 removed\r\nreading sources... [100%] ts_api_doc\r\n\r\n...\r\n\r\ngenerating indices... genindex done\r\nhighlighting module code... \r\nwriting additional pages... search done\r\ncopying images... [100%] releases/images/23.1-hdf5.png\r\ndumping search index in English (code: en)... done\r\ndumping object inventory... done\r\nbuild succeeded, 1223 warnings.\r\n\r\nThe HTML pages are in build/html.\r\n```\r\n\r\n最后生成的静态文件都保存在了 `build/html` 目录，我们可以借助 NGINX 或者其他 Pages 就可以直接看到一个一模一样对应当前 Repo 版本的 Galaxy Project 文档了。', 'bodyText': 'https://docs.galaxyproject.org/ 是 Galaxy Project 官方的文档地址链接，这是一个基于 Sphinx + Read the Docs 的文档站点。如果我们也想要创建一个这样一模一样的 Galaxy 文档需要怎么操作呢？\n\n虽然 Galaxy 官方文档 也给出了关于构建该文档的一些说明，但没有太多细节。\n\nIf you have your own copy of the Galaxy source code, you can also generate your own version of this documentation. Run the following command from the Galaxy’s root:\n$ make docs\n\nThe generated documentation will be in doc/build/html/ and can be viewed with a web browser. Note that you will need to install Sphinx and other module dependencies which are listed in the Makefile in the Galaxy root folder.\n\n下面我们来详细分解一下 make docs 这个命令具体执行的构建步骤。\n首先，在 Galaxy 根目录的执行 make docs，主要是执行了该目录下 Makefile 中的这几句命令：\ndocs: ## Generate HTML documentation.\n# Run following commands to setup the Python portion of the requirements:\n#   $ ./scripts/common_startup.sh\n#   $ . .venv/bin/activate\n#   $ pip install -r requirements.txt -r lib/galaxy/dependencies/dev-requirements.txt\n\t$(IN_VENV) $(MAKE) -C doc clean\n\t$(IN_VENV) $(MAKE) -C doc html\n\n\n$(MAKE)就是预设的 make 这个命令的名称（或者路径）。\n-C：到指定目录下读取 Makefile 文件并执行（给出指定的目录的路径）。\n\n第二步，读取 doc 目录下的 Makefile 文件，并执行 make html。\nhtml: $(GENERATED_RST)\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."\n\n结合其中的一些参数，其实最终就是执行了下面这个命令完成最终的构建。\nsphinx-build -b html -d build/doctrees source build/html\n\nsphinx-build [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]\nsourcedir：path to documentation source files\noutputdir：path to output directory\n-b：BUILDER，builder to use (default: html)\n\n了解了以上几个步骤后，我们就可以把 Galaxy 根目录的 doc 目录单独拎出来，通过 Sphinx 的命令实现独立构建部署。\n1. 安装必须依赖\n主要包括三个依赖。\npip3 install Sphinx sphinx_rtd_theme myst_parser\n\n2. 修改配置\n由于 sphinx-build 会读取 source/conf.py 并执行，但这个文件调用了 galaxy.version 模块：\n\n所以，如果我们想要把 galaxy/doc 和 Galaxy 独立开来进行部署，就需要修改一下 source/conf.py：\n# The short X.Y version.\n#from galaxy.version import (\n#    VERSION,\n#    VERSION_MAJOR,\n#)\n\nVERSION_MAJOR = "23.1"\nVERSION_MINOR = "5.dev0"\nVERSION = VERSION_MAJOR + (f".{VERSION_MINOR}" if VERSION_MINOR else "")\n3. 执行构建\n$ sphinx-build -b html -d build/doctrees   source build/html\nRunning Sphinx v7.2.6\nmaking output directory... done\nmyst v2.0.0: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions={\'deflist\', \'attrs_block\', \'substitution\'}, disable_syntax=[], all_links_external=False, url_schemes=(\'http\', \'https\', \'mailto\', \'ftp\'), ref_domains=None, fence_as_directive=set(), number_code_blocks=[], title_to_header=False, heading_anchors=5, heading_slug_func=<function make_id at 0x7f46201a6a60>, html_meta={}, footnote_transition=True, words_per_minute=200, substitutions={}, linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes=\'tex2jax_process|mathjax_process|math|output_area\', enable_checkboxes=False, suppress_warnings=[], highlight_code_blocks=True)\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\nloading intersphinx inventory from https://requests.readthedocs.io/en/master/objects.inv...\nintersphinx inventory has moved: https://requests.readthedocs.io/en/master/objects.inv -> https://requests.readthedocs.io/en/latest/objects.inv\nbuilding [mo]: targets for 0 po files that are out of date\nwriting output... \nbuilding [html]: targets for 332 source files that are out of date\nupdating environment: [new config] 332 added, 0 changed, 0 removed\nreading sources... [100%] ts_api_doc\n\n...\n\ngenerating indices... genindex done\nhighlighting module code... \nwriting additional pages... search done\ncopying images... [100%] releases/images/23.1-hdf5.png\ndumping search index in English (code: en)... done\ndumping object inventory... done\nbuild succeeded, 1223 warnings.\n\nThe HTML pages are in build/html.\n最后生成的静态文件都保存在了 build/html 目录，我们可以借助 NGINX 或者其他 Pages 就可以直接看到一个一模一样对应当前 Repo 版本的 Galaxy Project 文档了。', 'bodyHTML': '<p dir="auto"><a href="https://docs.galaxyproject.org/" rel="nofollow">https://docs.galaxyproject.org/</a> 是 Galaxy Project 官方的文档地址链接，这是一个基于 <a href="https://www.sphinx-doc.org/" rel="nofollow">Sphinx</a> + <a href="https://readthedocs.org/" rel="nofollow">Read the Docs</a> 的文档站点。如果我们也想要创建一个这样一模一样的 Galaxy 文档需要怎么操作呢？</p>\n\n<p dir="auto">虽然 <a href="https://docs.galaxyproject.org/en/master/#building-this-documentation" rel="nofollow">Galaxy 官方文档</a> 也给出了关于构建该文档的一些说明，但没有太多细节。</p>\n<blockquote>\n<p dir="auto">If you have your own copy of the Galaxy source code, you can also generate your own version of this documentation. Run the following command from the Galaxy’s root:</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ make docs"><pre class="notranslate"><code class="notranslate">$ make docs\n</code></pre></div>\n<p dir="auto">The generated documentation will be in <code class="notranslate">doc/build/html/</code> and can be viewed with a web browser. Note that you will need to install Sphinx and other module dependencies which are listed in the Makefile in the Galaxy root folder.</p>\n</blockquote>\n<p dir="auto">下面我们来详细分解一下 <code class="notranslate">make docs</code> 这个命令具体执行的构建步骤。</p>\n<p dir="auto">首先，在 Galaxy 根目录的执行 <code class="notranslate">make docs</code>，主要是执行了该目录下 <a href="https://github.com/galaxyproject/galaxy/blob/dev/Makefile">Makefile</a> 中的这几句命令：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="docs: ## Generate HTML documentation.\n# Run following commands to setup the Python portion of the requirements:\n#   $ ./scripts/common_startup.sh\n#   $ . .venv/bin/activate\n#   $ pip install -r requirements.txt -r lib/galaxy/dependencies/dev-requirements.txt\n\t$(IN_VENV) $(MAKE) -C doc clean\n\t$(IN_VENV) $(MAKE) -C doc html"><pre class="notranslate"><code class="notranslate">docs: ## Generate HTML documentation.\n# Run following commands to setup the Python portion of the requirements:\n#   $ ./scripts/common_startup.sh\n#   $ . .venv/bin/activate\n#   $ pip install -r requirements.txt -r lib/galaxy/dependencies/dev-requirements.txt\n\t$(IN_VENV) $(MAKE) -C doc clean\n\t$(IN_VENV) $(MAKE) -C doc html\n</code></pre></div>\n<ul dir="auto">\n<li><code class="notranslate">$(MAKE)</code>就是预设的 <code class="notranslate">make</code> 这个命令的名称（或者路径）。</li>\n<li><code class="notranslate">-C</code>：到指定目录下读取 Makefile 文件并执行（给出指定的目录的路径）。</li>\n</ul>\n<p dir="auto">第二步，读取 <code class="notranslate">doc</code> 目录下的 <a href="https://github.com/galaxyproject/galaxy/blob/dev/doc/Makefile">Makefile</a> 文件，并执行 <code class="notranslate">make html</code>。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="html: $(GENERATED_RST)\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo &quot;Build finished. The HTML pages are in $(BUILDDIR)/html.&quot;"><pre class="notranslate"><code class="notranslate">html: $(GENERATED_RST)\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."\n</code></pre></div>\n<p dir="auto">结合其中的一些参数，其实最终就是执行了下面这个命令完成最终的构建。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sphinx-build -b html -d build/doctrees source build/html"><pre class="notranslate">sphinx-build -b html -d build/doctrees <span class="pl-c1">source</span> build/html</pre></div>\n<ul dir="auto">\n<li>sphinx-build [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]</li>\n<li>sourcedir：path to documentation source files</li>\n<li>outputdir：path to output directory</li>\n<li><code class="notranslate">-b</code>：BUILDER，builder to use (default: html)</li>\n</ul>\n<p dir="auto">了解了以上几个步骤后，我们就可以把 Galaxy 根目录的 doc 目录单独拎出来，通过 Sphinx 的命令实现独立构建部署。</p>\n<h2 dir="auto">1. 安装必须依赖</h2>\n<p dir="auto">主要包括三个依赖。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pip3 install Sphinx sphinx_rtd_theme myst_parser"><pre class="notranslate"><code class="notranslate">pip3 install Sphinx sphinx_rtd_theme myst_parser\n</code></pre></div>\n<h2 dir="auto">2. 修改配置</h2>\n<p dir="auto">由于 <code class="notranslate">sphinx-build</code> 会读取 <code class="notranslate">source/conf.py</code> 并执行，但这个文件调用了 <a href="https://github.com/galaxyproject/galaxy/blob/dev/lib/galaxy/version.py"><code class="notranslate">galaxy.version</code></a> 模块：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/391e3caa3f17be6249da8936a7c9098bebebec3547263875871692e3756ba54e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6e6f2d67616c6178792d76657273696f6e2e706e67"><img src="https://camo.githubusercontent.com/391e3caa3f17be6249da8936a7c9098bebebec3547263875871692e3756ba54e/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6e6f2d67616c6178792d76657273696f6e2e706e67" alt="No module named \'galaxy\'" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/no-galaxy-version.png" style="max-width: 100%;"></a></p>\n<p dir="auto">所以，如果我们想要把 <code class="notranslate">galaxy/doc</code> 和 Galaxy 独立开来进行部署，就需要修改一下 <code class="notranslate">source/conf.py</code>：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# The short X.Y version.\n#from galaxy.version import (\n#    VERSION,\n#    VERSION_MAJOR,\n#)\n\nVERSION_MAJOR = &quot;23.1&quot;\nVERSION_MINOR = &quot;5.dev0&quot;\nVERSION = VERSION_MAJOR + (f&quot;.{VERSION_MINOR}&quot; if VERSION_MINOR else &quot;&quot;)"><pre class="notranslate"><span class="pl-c"># The short X.Y version.</span>\n<span class="pl-c">#from galaxy.version import (</span>\n<span class="pl-c">#    VERSION,</span>\n<span class="pl-c">#    VERSION_MAJOR,</span>\n<span class="pl-c">#)</span>\n\n<span class="pl-v">VERSION_MAJOR</span> <span class="pl-c1">=</span> <span class="pl-s">"23.1"</span>\n<span class="pl-v">VERSION_MINOR</span> <span class="pl-c1">=</span> <span class="pl-s">"5.dev0"</span>\n<span class="pl-v">VERSION</span> <span class="pl-c1">=</span> <span class="pl-v">VERSION_MAJOR</span> <span class="pl-c1">+</span> (<span class="pl-s">f".<span class="pl-s1"><span class="pl-kos">{</span><span class="pl-v">VERSION_MINOR</span><span class="pl-kos">}</span></span>"</span> <span class="pl-k">if</span> <span class="pl-v">VERSION_MINOR</span> <span class="pl-k">else</span> <span class="pl-s">""</span>)</pre></div>\n<h2 dir="auto">3. 执行构建</h2>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ sphinx-build -b html -d build/doctrees   source build/html\nRunning Sphinx v7.2.6\nmaking output directory... done\nmyst v2.0.0: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions={\'deflist\', \'attrs_block\', \'substitution\'}, disable_syntax=[], all_links_external=False, url_schemes=(\'http\', \'https\', \'mailto\', \'ftp\'), ref_domains=None, fence_as_directive=set(), number_code_blocks=[], title_to_header=False, heading_anchors=5, heading_slug_func=&lt;function make_id at 0x7f46201a6a60&gt;, html_meta={}, footnote_transition=True, words_per_minute=200, substitutions={}, linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes=\'tex2jax_process|mathjax_process|math|output_area\', enable_checkboxes=False, suppress_warnings=[], highlight_code_blocks=True)\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\nloading intersphinx inventory from https://requests.readthedocs.io/en/master/objects.inv...\nintersphinx inventory has moved: https://requests.readthedocs.io/en/master/objects.inv -&gt; https://requests.readthedocs.io/en/latest/objects.inv\nbuilding [mo]: targets for 0 po files that are out of date\nwriting output... \nbuilding [html]: targets for 332 source files that are out of date\nupdating environment: [new config] 332 added, 0 changed, 0 removed\nreading sources... [100%] ts_api_doc\n\n...\n\ngenerating indices... genindex done\nhighlighting module code... \nwriting additional pages... search done\ncopying images... [100%] releases/images/23.1-hdf5.png\ndumping search index in English (code: en)... done\ndumping object inventory... done\nbuild succeeded, 1223 warnings.\n\nThe HTML pages are in build/html."><pre class="notranslate">$ sphinx-build -b html -d build/doctrees   <span class="pl-c1">source</span> build/html\nRunning Sphinx v7.2.6\nmaking output directory... <span class="pl-k">done</span>\nmyst v2.0.0: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions={<span class="pl-s"><span class="pl-pds">\'</span>deflist<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>attrs_block<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>substitution<span class="pl-pds">\'</span></span>}, disable_syntax=[], all_links_external=False, url_schemes=(<span class="pl-s"><span class="pl-pds">\'</span>http<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>https<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>mailto<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>ftp<span class="pl-pds">\'</span></span>), ref_domains=None, fence_as_directive=set(), number_code_blocks=[], title_to_header=False, heading_anchors=5, heading_slug_func=<span class="pl-k">&lt;</span>function make_id at 0x7f46201a6a<span class="pl-k">60&gt;</span>, html_meta={}, footnote_transition=True, words_per_minute=200, substitutions={}, linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes=<span class="pl-s"><span class="pl-pds">\'</span>tex2jax_process|mathjax_process|math|output_area<span class="pl-pds">\'</span></span>, enable_checkboxes=False, suppress_warnings=[], highlight_code_blocks=True)\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\nloading intersphinx inventory from https://requests.readthedocs.io/en/master/objects.inv...\nintersphinx inventory has moved: https://requests.readthedocs.io/en/master/objects.inv -<span class="pl-k">&gt;</span> https://requests.readthedocs.io/en/latest/objects.inv\nbuilding [mo]: targets <span class="pl-k">for</span> 0 po files that are out of date\nwriting output... \nbuilding [html]: targets <span class="pl-k">for</span> 332 <span class="pl-c1">source</span> files that are out of date\nupdating environment: [new config] 332 added, 0 changed, 0 removed\nreading sources... [100%] ts_api_doc\n\n...\n\ngenerating indices... genindex <span class="pl-k">done</span>\nhighlighting module code... \nwriting additional pages... search <span class="pl-k">done</span>\ncopying images... [100%] releases/images/23.1-hdf5.png\ndumping search index <span class="pl-k">in</span> English (code: en)... <span class="pl-k">done</span>\ndumping object inventory... <span class="pl-k">done</span>\nbuild succeeded, 1223 warnings.\n\nThe HTML pages are <span class="pl-k">in</span> build/html.</pre></div>\n<p dir="auto">最后生成的静态文件都保存在了 <code class="notranslate">build/html</code> 目录，我们可以借助 NGINX 或者其他 Pages 就可以直接看到一个一模一样对应当前 Repo 版本的 Galaxy Project 文档了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.4-其他文章'}, 'labels': {'nodes': [{'name': '公众号'}, {'name': '3.4.1-GalaxyOther'}]}, 'comments': {'nodes': []}}, {'title': '更新记录', 'number': 45, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/45', 'createdAt': '2024-01-04T05:50:47Z', 'lastEditedAt': '2024-01-04T06:22:22Z', 'updatedAt': '2024-01-04T06:22:22Z', 'body': '记录一下本知识仓库 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden) 的一些主要更新记录。\r\n\r\n<!-- more -->\r\n\r\n#### 2024-01-04   \r\n- 域名 `weiyan.cc` DNS 从 Cloudflare 转回阿里云。        \r\n- 把站点从 [Cloudflare Pages](https://pages.cloudflare.com/) 转移到 [Netlify](https://app.netlify.com/)，绑定 [www.weiyan.cc](https://www.weiyan.cc/)，实现 [weiyan.cc](https://weiyan.cc/) 重定向到 www 主域名 (Redirects automatically to primary domain)。\r\n\r\n#### 2023-11-28    \r\n- 镜像站点（[weiyan.pages.dev](https://weiyan.pages.dev/)）部署到 [Cloudflare Pages](https://pages.cloudflare.com/)，绑定自定义域名 [weiyan.cc](https://weiyan.cc/)。 \r\n\r\n#### 2023-10-16         \r\n- GitHub 正式创建 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden) 仓库，开启 GitHub Pages，绑定 [doc.weiyan.cc](https://doc.weiyan.cc/)。', 'bodyText': '记录一下本知识仓库 Knowledge-Garden 的一些主要更新记录。\n\n2024-01-04\n\n域名 weiyan.cc DNS 从 Cloudflare 转回阿里云。\n把站点从 Cloudflare Pages 转移到 Netlify，绑定 www.weiyan.cc，实现 weiyan.cc 重定向到 www 主域名 (Redirects automatically to primary domain)。\n\n2023-11-28\n\n镜像站点（weiyan.pages.dev）部署到 Cloudflare Pages，绑定自定义域名 weiyan.cc。\n\n2023-10-16\n\nGitHub 正式创建 Knowledge-Garden 仓库，开启 GitHub Pages，绑定 doc.weiyan.cc。', 'bodyHTML': '<p dir="auto">记录一下本知识仓库 <a href="https://github.com/shenweiyan/Knowledge-Garden">Knowledge-Garden</a> 的一些主要更新记录。</p>\n\n<h4 dir="auto">2024-01-04</h4>\n<ul dir="auto">\n<li>域名 <code class="notranslate">weiyan.cc</code> DNS 从 Cloudflare 转回阿里云。</li>\n<li>把站点从 <a href="https://pages.cloudflare.com/" rel="nofollow">Cloudflare Pages</a> 转移到 <a href="https://app.netlify.com/" rel="nofollow">Netlify</a>，绑定 <a href="https://www.weiyan.cc/" rel="nofollow">www.weiyan.cc</a>，实现 <a href="https://weiyan.cc/" rel="nofollow">weiyan.cc</a> 重定向到 www 主域名 (Redirects automatically to primary domain)。</li>\n</ul>\n<h4 dir="auto">2023-11-28</h4>\n<ul dir="auto">\n<li>镜像站点（<a href="https://weiyan.pages.dev/" rel="nofollow">weiyan.pages.dev</a>）部署到 <a href="https://pages.cloudflare.com/" rel="nofollow">Cloudflare Pages</a>，绑定自定义域名 <a href="https://weiyan.cc/" rel="nofollow">weiyan.cc</a>。</li>\n</ul>\n<h4 dir="auto">2023-10-16</h4>\n<ul dir="auto">\n<li>GitHub 正式创建 <a href="https://github.com/shenweiyan/Knowledge-Garden">Knowledge-Garden</a> 仓库，开启 GitHub Pages，绑定 <a href="https://doc.weiyan.cc/" rel="nofollow">doc.weiyan.cc</a>。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '不要使用 requirements.txt', 'number': 44, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/44', 'createdAt': '2024-01-03T07:50:27Z', 'lastEditedAt': '2024-01-03T07:55:06Z', 'updatedAt': '2024-01-03T07:55:06Z', 'body': '> 作者：[Miikka Koskinen](https://miikka.me/)       \r\n> 编译：[沈维燕](https://weiyan.cc)       \r\n> 时间：原文发表于 2023-10-31       \r\n> 原文：[Do not use requirements.txt](https://quanttype.net/posts/2023-10-31-do-not-use-requirements.txt.html)\r\n\r\n你是否在用 Python 开发后端服务？我有两条建议：\r\n\r\n- 不要使用 `pip` 和 `requirements.txt` 来管理 Python 依赖。它们缺乏一些应该内置的关键功能。\r\n- 改用 [Poetry](https://python-poetry.org/)。\r\n\r\n<!-- more -->\r\n\r\n对我来说，第一条建议毋庸置疑。第二条则更具有暂时性：Poetry 是一个很好的选择，但并非唯一值得考虑的选择。\r\n\r\n我将在下面进行解释。\r\n\r\n请注意：如果你使用 Python 做其他事情而不是构建后端服务，那么本文中的建议可能并不适用于你。例如，如果你是[一个正在迁移 `setup.py` 的库开发者](https://gregoryszorc.com/blog/2023/10/30/my-user-experience-porting-off-setup.py/)，Poetry 并不明显是一个完美的选择。\r\n\r\n## PIP 缺失的功能\r\n[pip](https://pypi.org/project/pip/) 是一个工具，你可以用它从 [The Python Package Index (PyPI)](https://pypi.org/) 中安装软件包。它随 Python 一起安装，如果你是 Python 开发者，你可能已经多次使用过它。\r\n\r\n管理 Python 项目依赖的传统方式是将它们列在一个名为 `requirements.txt` 的文件中，并使用 `pip install -r requirements.txt` 进行安装。然而，`pip` 被设计成一个软件包安装工具，而不是一个功能齐全的项目工作流工具。**pip 缺乏两个关键功能，即依赖的锁定文件 (dependency lockfiles) 和虚拟环境的自动管理(automatic management of virtualenvs)。**\r\n\r\n## 依赖锁定文件\r\n如果你希望在所有环境中（比如你的笔记本电脑、持续集成(CI)、生产环境）获得相同的行为，你需要锁定你的依赖项及其传递依赖的版本。你可以在 `requirements.txt` 中锁定你直接依赖的版本，例如，使用 `requests==2.31.0` 而不是 `requests`。\r\n\r\n然而，pip 不会锁定传递依赖的版本。这可以通过使用 [pip-tools](https://github.com/jazzband/pip-tools) 来解决，将 `requirements.txt` 扩展成一个列出完整依赖图的文件，包括准确版本和构件的校验和(checksums for the artifacts)。pip-tools 很不错，但你需要自行设置并弄清楚它如何适应你的工作流程。\r\n\r\n在其他编程语言中，这个功能是基本要求的 - 例如，npm 多年来一直有 `package-lock.json`，Cargo 也有 `Cargo.lock`。这个功能实在应该是一个项目工作流工具中的内置功能。\r\n\r\n## 虚拟环境的自动管理\r\n\r\n在 Python 中创建隔离环境的方式是使用 [virtualenvs](https://docs.python.org/3/library/venv.html)。传统上，你需要手动管理它们：通过一个 shell 命令创建一个（比如 `python -m venv example` 来创建名为 `example` 的虚拟环境），当你想要使用它时，需要用另一个 shell 命令来激活它。\r\n\r\n这容易出错：忘记激活虚拟环境或者激活错误的虚拟环境是常见的错误。有一堆的解决方法。例如，你可以使用 [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)，在进入项目目录时让你的 shell 自动激活一个虚拟环境。[direnv](https://github.com/direnv/direnv/wiki/Python) 也可以做到。\r\n\r\n同样，这也应该成为工作流工具中的一个内置功能。你不应该需要将多个工具粘合在一起。你不会听到 npm 或 Cargo 用户在虚拟环境上遇到问题的。\r\n\r\n## Poetry 及其他选择\r\n\r\n幸运的是，许多人已经意识到这些问题并努力解决它们。不太幸运的是，这导致了大量的 Python 项目工作流工具涌现。那么该如何选择呢？\r\n\r\n我的建议是：**选择 [Poetry](https://python-poetry.org/docs/)**。它有锁定文件，有虚拟环境管理，而且很受欢迎且在积极开发中。根据我的经验，它并不完美，但是它起作用。\r\n\r\n你也可以考虑 [Hatch](https://hatch.pypa.io/latest/) 或 [PDM](https://github.com/pdm-project/pdm)。它们与 Poetry 相似。我自己没有使用过它们，但我听说其他人成功地使用了它们。Hatch 似乎在库作者 (library authors) 中特别受欢迎。\r\n\r\n如果你正在寻找一个更强大的选项，可以处理多个子项目，[Pants 构建系统](https://www.pantsbuild.org/)在 Python 支持方面做得很好。然而，它的学习曲线相对陡峭。\r\n\r\n最后，如果你正在寻找一个类似 rustup 那样可以为你安装 Python 的解决方案，那么有 [rye](https://github.com/mitsuhiko/rye)。它是新的实验性工具，但也许它对你来说是正确的选择？\r\n\r\n## 哪个是权威的工作流工具？\r\n\r\n如果 Python 自带一个权威的项目工作流工具会很好。很多人希望 pip 成为这样一个工具。Node.js 自带 npm，Rust 自带 Cargo，那么为什么 Python 就不能有一个呢？为什么会有这么多竞争的选择呢？\r\n\r\n据我所知，最大的障碍是，由于 Python 被广泛使用且用于许多不同的用例，制定一个通用的官方解决方案是困难且缓慢的（并且资金不足的）工作。另外，也不清楚 pip 是否适合这些功能。\r\n\r\n如果你想了解更多信息，请阅读和听取这些与我不同、深度参与 Python 社区的人的意见：    \r\n- Stargirl (Thea Flowers) on Fediverse：《[所以你想解决 Python 打包问题：一个实用指南](https://hachyderm.io/@stargirl/109697057391904145)》\r\n- Pradyun Gedam：《[关于 Python 打包生态系统的思考](https://pradyunsg.me/blog/2023/01/21/thoughts-on-python-packaging/)》\r\n- Talk Python to Me (podcast)：《[重新构想 Python 的打包工作流程](https://talkpython.fm/episodes/show/406/reimagining-pythons-packaging-workflows)》\r\n\r\n## 关于 Clojure \r\n\r\n阅读我的博客的 Clojure 开发者可能会问：嘿，Clojure 怎么样？为什么我们没有锁定文件呢？这是一个很好的问题！\r\n\r\nClojure 社区通过始终使用明确的版本而不是版本范围来解决了这个问题，即使在库中也是如此。版本描述实际上支持范围，但没有人会使用它们。这样，只要版本解析算法稳定，你总是会得到相同的版本。\r\n\r\n理论上，传递依赖项版本不匹配可能是一个问题，但 Clojure 支持一种编码风格，很少引起问题。\r\n\r\n相比之下，在 Python 和 Node.js 社区，通常期望库列出其依赖项的版本范围，而软件包管理工具会抱怨版本不匹配的问题。', 'bodyText': '作者：Miikka Koskinen\n编译：沈维燕\n时间：原文发表于 2023-10-31\n原文：Do not use requirements.txt\n\n你是否在用 Python 开发后端服务？我有两条建议：\n\n不要使用 pip 和 requirements.txt 来管理 Python 依赖。它们缺乏一些应该内置的关键功能。\n改用 Poetry。\n\n\n对我来说，第一条建议毋庸置疑。第二条则更具有暂时性：Poetry 是一个很好的选择，但并非唯一值得考虑的选择。\n我将在下面进行解释。\n请注意：如果你使用 Python 做其他事情而不是构建后端服务，那么本文中的建议可能并不适用于你。例如，如果你是一个正在迁移 setup.py 的库开发者，Poetry 并不明显是一个完美的选择。\nPIP 缺失的功能\npip 是一个工具，你可以用它从 The Python Package Index (PyPI) 中安装软件包。它随 Python 一起安装，如果你是 Python 开发者，你可能已经多次使用过它。\n管理 Python 项目依赖的传统方式是将它们列在一个名为 requirements.txt 的文件中，并使用 pip install -r requirements.txt 进行安装。然而，pip 被设计成一个软件包安装工具，而不是一个功能齐全的项目工作流工具。pip 缺乏两个关键功能，即依赖的锁定文件 (dependency lockfiles) 和虚拟环境的自动管理(automatic management of virtualenvs)。\n依赖锁定文件\n如果你希望在所有环境中（比如你的笔记本电脑、持续集成(CI)、生产环境）获得相同的行为，你需要锁定你的依赖项及其传递依赖的版本。你可以在 requirements.txt 中锁定你直接依赖的版本，例如，使用 requests==2.31.0 而不是 requests。\n然而，pip 不会锁定传递依赖的版本。这可以通过使用 pip-tools 来解决，将 requirements.txt 扩展成一个列出完整依赖图的文件，包括准确版本和构件的校验和(checksums for the artifacts)。pip-tools 很不错，但你需要自行设置并弄清楚它如何适应你的工作流程。\n在其他编程语言中，这个功能是基本要求的 - 例如，npm 多年来一直有 package-lock.json，Cargo 也有 Cargo.lock。这个功能实在应该是一个项目工作流工具中的内置功能。\n虚拟环境的自动管理\n在 Python 中创建隔离环境的方式是使用 virtualenvs。传统上，你需要手动管理它们：通过一个 shell 命令创建一个（比如 python -m venv example 来创建名为 example 的虚拟环境），当你想要使用它时，需要用另一个 shell 命令来激活它。\n这容易出错：忘记激活虚拟环境或者激活错误的虚拟环境是常见的错误。有一堆的解决方法。例如，你可以使用 pyenv-virtualenv，在进入项目目录时让你的 shell 自动激活一个虚拟环境。direnv 也可以做到。\n同样，这也应该成为工作流工具中的一个内置功能。你不应该需要将多个工具粘合在一起。你不会听到 npm 或 Cargo 用户在虚拟环境上遇到问题的。\nPoetry 及其他选择\n幸运的是，许多人已经意识到这些问题并努力解决它们。不太幸运的是，这导致了大量的 Python 项目工作流工具涌现。那么该如何选择呢？\n我的建议是：选择 Poetry。它有锁定文件，有虚拟环境管理，而且很受欢迎且在积极开发中。根据我的经验，它并不完美，但是它起作用。\n你也可以考虑 Hatch 或 PDM。它们与 Poetry 相似。我自己没有使用过它们，但我听说其他人成功地使用了它们。Hatch 似乎在库作者 (library authors) 中特别受欢迎。\n如果你正在寻找一个更强大的选项，可以处理多个子项目，Pants 构建系统在 Python 支持方面做得很好。然而，它的学习曲线相对陡峭。\n最后，如果你正在寻找一个类似 rustup 那样可以为你安装 Python 的解决方案，那么有 rye。它是新的实验性工具，但也许它对你来说是正确的选择？\n哪个是权威的工作流工具？\n如果 Python 自带一个权威的项目工作流工具会很好。很多人希望 pip 成为这样一个工具。Node.js 自带 npm，Rust 自带 Cargo，那么为什么 Python 就不能有一个呢？为什么会有这么多竞争的选择呢？\n据我所知，最大的障碍是，由于 Python 被广泛使用且用于许多不同的用例，制定一个通用的官方解决方案是困难且缓慢的（并且资金不足的）工作。另外，也不清楚 pip 是否适合这些功能。\n如果你想了解更多信息，请阅读和听取这些与我不同、深度参与 Python 社区的人的意见：\n\nStargirl (Thea Flowers) on Fediverse：《所以你想解决 Python 打包问题：一个实用指南》\nPradyun Gedam：《关于 Python 打包生态系统的思考》\nTalk Python to Me (podcast)：《重新构想 Python 的打包工作流程》\n\n关于 Clojure\n阅读我的博客的 Clojure 开发者可能会问：嘿，Clojure 怎么样？为什么我们没有锁定文件呢？这是一个很好的问题！\nClojure 社区通过始终使用明确的版本而不是版本范围来解决了这个问题，即使在库中也是如此。版本描述实际上支持范围，但没有人会使用它们。这样，只要版本解析算法稳定，你总是会得到相同的版本。\n理论上，传递依赖项版本不匹配可能是一个问题，但 Clojure 支持一种编码风格，很少引起问题。\n相比之下，在 Python 和 Node.js 社区，通常期望库列出其依赖项的版本范围，而软件包管理工具会抱怨版本不匹配的问题。', 'bodyHTML': '<blockquote>\n<p dir="auto">作者：<a href="https://miikka.me/" rel="nofollow">Miikka Koskinen</a><br>\n编译：<a href="https://weiyan.cc" rel="nofollow">沈维燕</a><br>\n时间：原文发表于 2023-10-31<br>\n原文：<a href="https://quanttype.net/posts/2023-10-31-do-not-use-requirements.txt.html" rel="nofollow">Do not use requirements.txt</a></p>\n</blockquote>\n<p dir="auto">你是否在用 Python 开发后端服务？我有两条建议：</p>\n<ul dir="auto">\n<li>不要使用 <code class="notranslate">pip</code> 和 <code class="notranslate">requirements.txt</code> 来管理 Python 依赖。它们缺乏一些应该内置的关键功能。</li>\n<li>改用 <a href="https://python-poetry.org/" rel="nofollow">Poetry</a>。</li>\n</ul>\n\n<p dir="auto">对我来说，第一条建议毋庸置疑。第二条则更具有暂时性：Poetry 是一个很好的选择，但并非唯一值得考虑的选择。</p>\n<p dir="auto">我将在下面进行解释。</p>\n<p dir="auto">请注意：如果你使用 Python 做其他事情而不是构建后端服务，那么本文中的建议可能并不适用于你。例如，如果你是<a href="https://gregoryszorc.com/blog/2023/10/30/my-user-experience-porting-off-setup.py/" rel="nofollow">一个正在迁移 <code class="notranslate">setup.py</code> 的库开发者</a>，Poetry 并不明显是一个完美的选择。</p>\n<h2 dir="auto">PIP 缺失的功能</h2>\n<p dir="auto"><a href="https://pypi.org/project/pip/" rel="nofollow">pip</a> 是一个工具，你可以用它从 <a href="https://pypi.org/" rel="nofollow">The Python Package Index (PyPI)</a> 中安装软件包。它随 Python 一起安装，如果你是 Python 开发者，你可能已经多次使用过它。</p>\n<p dir="auto">管理 Python 项目依赖的传统方式是将它们列在一个名为 <code class="notranslate">requirements.txt</code> 的文件中，并使用 <code class="notranslate">pip install -r requirements.txt</code> 进行安装。然而，<code class="notranslate">pip</code> 被设计成一个软件包安装工具，而不是一个功能齐全的项目工作流工具。<strong>pip 缺乏两个关键功能，即依赖的锁定文件 (dependency lockfiles) 和虚拟环境的自动管理(automatic management of virtualenvs)。</strong></p>\n<h2 dir="auto">依赖锁定文件</h2>\n<p dir="auto">如果你希望在所有环境中（比如你的笔记本电脑、持续集成(CI)、生产环境）获得相同的行为，你需要锁定你的依赖项及其传递依赖的版本。你可以在 <code class="notranslate">requirements.txt</code> 中锁定你直接依赖的版本，例如，使用 <code class="notranslate">requests==2.31.0</code> 而不是 <code class="notranslate">requests</code>。</p>\n<p dir="auto">然而，pip 不会锁定传递依赖的版本。这可以通过使用 <a href="https://github.com/jazzband/pip-tools">pip-tools</a> 来解决，将 <code class="notranslate">requirements.txt</code> 扩展成一个列出完整依赖图的文件，包括准确版本和构件的校验和(checksums for the artifacts)。pip-tools 很不错，但你需要自行设置并弄清楚它如何适应你的工作流程。</p>\n<p dir="auto">在其他编程语言中，这个功能是基本要求的 - 例如，npm 多年来一直有 <code class="notranslate">package-lock.json</code>，Cargo 也有 <code class="notranslate">Cargo.lock</code>。这个功能实在应该是一个项目工作流工具中的内置功能。</p>\n<h2 dir="auto">虚拟环境的自动管理</h2>\n<p dir="auto">在 Python 中创建隔离环境的方式是使用 <a href="https://docs.python.org/3/library/venv.html" rel="nofollow">virtualenvs</a>。传统上，你需要手动管理它们：通过一个 shell 命令创建一个（比如 <code class="notranslate">python -m venv example</code> 来创建名为 <code class="notranslate">example</code> 的虚拟环境），当你想要使用它时，需要用另一个 shell 命令来激活它。</p>\n<p dir="auto">这容易出错：忘记激活虚拟环境或者激活错误的虚拟环境是常见的错误。有一堆的解决方法。例如，你可以使用 <a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a>，在进入项目目录时让你的 shell 自动激活一个虚拟环境。<a href="https://github.com/direnv/direnv/wiki/Python">direnv</a> 也可以做到。</p>\n<p dir="auto">同样，这也应该成为工作流工具中的一个内置功能。你不应该需要将多个工具粘合在一起。你不会听到 npm 或 Cargo 用户在虚拟环境上遇到问题的。</p>\n<h2 dir="auto">Poetry 及其他选择</h2>\n<p dir="auto">幸运的是，许多人已经意识到这些问题并努力解决它们。不太幸运的是，这导致了大量的 Python 项目工作流工具涌现。那么该如何选择呢？</p>\n<p dir="auto">我的建议是：<strong>选择 <a href="https://python-poetry.org/docs/" rel="nofollow">Poetry</a></strong>。它有锁定文件，有虚拟环境管理，而且很受欢迎且在积极开发中。根据我的经验，它并不完美，但是它起作用。</p>\n<p dir="auto">你也可以考虑 <a href="https://hatch.pypa.io/latest/" rel="nofollow">Hatch</a> 或 <a href="https://github.com/pdm-project/pdm">PDM</a>。它们与 Poetry 相似。我自己没有使用过它们，但我听说其他人成功地使用了它们。Hatch 似乎在库作者 (library authors) 中特别受欢迎。</p>\n<p dir="auto">如果你正在寻找一个更强大的选项，可以处理多个子项目，<a href="https://www.pantsbuild.org/" rel="nofollow">Pants 构建系统</a>在 Python 支持方面做得很好。然而，它的学习曲线相对陡峭。</p>\n<p dir="auto">最后，如果你正在寻找一个类似 rustup 那样可以为你安装 Python 的解决方案，那么有 <a href="https://github.com/mitsuhiko/rye">rye</a>。它是新的实验性工具，但也许它对你来说是正确的选择？</p>\n<h2 dir="auto">哪个是权威的工作流工具？</h2>\n<p dir="auto">如果 Python 自带一个权威的项目工作流工具会很好。很多人希望 pip 成为这样一个工具。Node.js 自带 npm，Rust 自带 Cargo，那么为什么 Python 就不能有一个呢？为什么会有这么多竞争的选择呢？</p>\n<p dir="auto">据我所知，最大的障碍是，由于 Python 被广泛使用且用于许多不同的用例，制定一个通用的官方解决方案是困难且缓慢的（并且资金不足的）工作。另外，也不清楚 pip 是否适合这些功能。</p>\n<p dir="auto">如果你想了解更多信息，请阅读和听取这些与我不同、深度参与 Python 社区的人的意见：</p>\n<ul dir="auto">\n<li>Stargirl (Thea Flowers) on Fediverse：《<a href="https://hachyderm.io/@stargirl/109697057391904145" rel="nofollow">所以你想解决 Python 打包问题：一个实用指南</a>》</li>\n<li>Pradyun Gedam：《<a href="https://pradyunsg.me/blog/2023/01/21/thoughts-on-python-packaging/" rel="nofollow">关于 Python 打包生态系统的思考</a>》</li>\n<li>Talk Python to Me (podcast)：《<a href="https://talkpython.fm/episodes/show/406/reimagining-pythons-packaging-workflows" rel="nofollow">重新构想 Python 的打包工作流程</a>》</li>\n</ul>\n<h2 dir="auto">关于 Clojure</h2>\n<p dir="auto">阅读我的博客的 Clojure 开发者可能会问：嘿，Clojure 怎么样？为什么我们没有锁定文件呢？这是一个很好的问题！</p>\n<p dir="auto">Clojure 社区通过始终使用明确的版本而不是版本范围来解决了这个问题，即使在库中也是如此。版本描述实际上支持范围，但没有人会使用它们。这样，只要版本解析算法稳定，你总是会得到相同的版本。</p>\n<p dir="auto">理论上，传递依赖项版本不匹配可能是一个问题，但 Clojure 支持一种编码风格，很少引起问题。</p>\n<p dir="auto">相比之下，在 Python 和 Node.js 社区，通常期望库列出其依赖项的版本范围，而软件包管理工具会抱怨版本不匹配的问题。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '翻译'}, {'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': '技术人月刊（第 2 期 2024-01）', 'number': 43, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/43', 'createdAt': '2024-01-02T06:33:05Z', 'lastEditedAt': None, 'updatedAt': '2024-01-02T06:33:06Z', 'body': '## 文章', 'bodyText': '文章', 'bodyHTML': '<h2 dir="auto">文章</h2>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.2-月刊'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '基于 Matrix 协议的 Elements 通讯加密应用', 'number': 42, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/42', 'createdAt': '2023-12-28T09:17:08Z', 'lastEditedAt': '2023-12-30T09:56:12Z', 'updatedAt': '2023-12-30T09:56:13Z', 'body': 'Matrix 是一个开源、开放、轻量级、去中心化的即时聊天通讯协议，它是包括 deepin、Mozilla、Fedora、KDE、Archlinux、Debian 等开源社区均在广泛使用的即时聊天协议。\r\n\r\n<!-- more -->\r\n\r\nElement 是 Matrix 官方性质的，基于 Web 技术的 Matrix 客户端实现，除了网页环境外，也有桌面客户端可用。可以在你所使用的发行版的应用商店或包管理工具中搜索 element-desktop 或近似名称来检索和安装此客户端，然后即可运行并登录你的帐号。\r\n\r\nElement 可以和 GitHub 的仓库实现关联，把 GitHub 仓库的诸多信息同步到 Element。', 'bodyText': 'Matrix 是一个开源、开放、轻量级、去中心化的即时聊天通讯协议，它是包括 deepin、Mozilla、Fedora、KDE、Archlinux、Debian 等开源社区均在广泛使用的即时聊天协议。\n\nElement 是 Matrix 官方性质的，基于 Web 技术的 Matrix 客户端实现，除了网页环境外，也有桌面客户端可用。可以在你所使用的发行版的应用商店或包管理工具中搜索 element-desktop 或近似名称来检索和安装此客户端，然后即可运行并登录你的帐号。\nElement 可以和 GitHub 的仓库实现关联，把 GitHub 仓库的诸多信息同步到 Element。', 'bodyHTML': '<p dir="auto">Matrix 是一个开源、开放、轻量级、去中心化的即时聊天通讯协议，它是包括 deepin、Mozilla、Fedora、KDE、Archlinux、Debian 等开源社区均在广泛使用的即时聊天协议。</p>\n\n<p dir="auto">Element 是 Matrix 官方性质的，基于 Web 技术的 Matrix 客户端实现，除了网页环境外，也有桌面客户端可用。可以在你所使用的发行版的应用商店或包管理工具中搜索 element-desktop 或近似名称来检索和安装此客户端，然后即可运行并登录你的帐号。</p>\n<p dir="auto">Element 可以和 GitHub 的仓库实现关联，把 GitHub 仓库的诸多信息同步到 Element。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '一些有意思的博客与站点', 'number': 41, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/41', 'createdAt': '2023-12-27T06:52:53Z', 'lastEditedAt': '2023-12-27T07:09:33Z', 'updatedAt': '2023-12-27T07:09:33Z', 'body': '很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。2023 年被[椒盐豆豉](https://blog.douchi.space/)的一篇《[2023 年了你为什么需要写博客](https://blog.douchi.space/2023-why-you-need-a-blog/)》所吸引，尤其是 **"博客是赛博空间的另一个你，也能反过来定义你"** 这一句，写出了很多心声。\r\n\r\n<!-- more -->\r\n\r\n> 比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。\r\n\r\n鉴于此，记录一下那些有意思的博客与站点（会不定期清理失效域名、停更的博客）。\r\n\r\n- <https://yihui.org/>，R 语言资深专家谢益辉的主页。\r\n- <https://blog.douchi.space/>，一个写了二十年博客，现居美国西雅图的女博主+码农。\r\n- <https://yuanj.top/>，来自成都理工大学，兴趣爱好很广泛，喜欢 [读书](https://yuanj.top/tags/notes/)、打篮球、跑步、历史、编程、[city walk](https://yuanj.top/tags/travels/)、 [生物信息学](https://yuanj.top/tags/bioinformatics/) 和有趣的东西。', 'bodyText': '很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。2023 年被椒盐豆豉的一篇《2023 年了你为什么需要写博客》所吸引，尤其是 "博客是赛博空间的另一个你，也能反过来定义你" 这一句，写出了很多心声。\n\n\n比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。\n\n鉴于此，记录一下那些有意思的博客与站点（会不定期清理失效域名、停更的博客）。\n\nhttps://yihui.org/，R 语言资深专家谢益辉的主页。\nhttps://blog.douchi.space/，一个写了二十年博客，现居美国西雅图的女博主+码农。\nhttps://yuanj.top/，来自成都理工大学，兴趣爱好很广泛，喜欢 读书、打篮球、跑步、历史、编程、city walk、 生物信息学 和有趣的东西。', 'bodyHTML': '<p dir="auto">很多时候阅读别人的博客（站点），总能发现一些好玩的人和事物。2023 年被<a href="https://blog.douchi.space/" rel="nofollow">椒盐豆豉</a>的一篇《<a href="https://blog.douchi.space/2023-why-you-need-a-blog/" rel="nofollow">2023 年了你为什么需要写博客</a>》所吸引，尤其是 <strong>"博客是赛博空间的另一个你，也能反过来定义你"</strong> 这一句，写出了很多心声。</p>\n\n<blockquote>\n<p dir="auto">比较反感 "个人品牌" 这个过于商业化的说法，不写技术不写学术的非实名博客甚至起不到简历作用。但它确是比简历更 "像个人"，比碎片化社交网络更全面展现我是怎样一个人的网络门面。当然这是我这个博客的用法，网上靠博客经营自己品牌的也比比皆是。总之，内容的自由度和高度的定制化让博客可以成为任何你想让它成为的东西。反之，博客写的久了，发现 "写博客" 也已经成为了自己（不只是线上） identity 的一部分——毕竟这是很多人认识我的渠道，也重塑了我的一部分自我认知。</p>\n</blockquote>\n<p dir="auto">鉴于此，记录一下那些有意思的博客与站点（会不定期清理失效域名、停更的博客）。</p>\n<ul dir="auto">\n<li><a href="https://yihui.org/" rel="nofollow">https://yihui.org/</a>，R 语言资深专家谢益辉的主页。</li>\n<li><a href="https://blog.douchi.space/" rel="nofollow">https://blog.douchi.space/</a>，一个写了二十年博客，现居美国西雅图的女博主+码农。</li>\n<li><a href="https://yuanj.top/" rel="nofollow">https://yuanj.top/</a>，来自成都理工大学，兴趣爱好很广泛，喜欢 <a href="https://yuanj.top/tags/notes/" rel="nofollow">读书</a>、打篮球、跑步、历史、编程、<a href="https://yuanj.top/tags/travels/" rel="nofollow">city walk</a>、 <a href="https://yuanj.top/tags/bioinformatics/" rel="nofollow">生物信息学</a> 和有趣的东西。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Pandas 处理 Excel 常用方法技巧', 'number': 40, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/40', 'createdAt': '2023-12-26T06:12:05Z', 'lastEditedAt': '2024-02-01T05:37:17Z', 'updatedAt': '2024-02-01T05:37:17Z', 'body': '在使用 Pandas 前需要学习了解一下 Series 和 DataFrame 的基本数据结构和索引的相关概念，之后就可以练习基本的 Excel操作。Pandas 读取一个 Excel 文件后会将其转化为 DataFrame 对象，每一列或行就是一个 Series 对象。这里我们看下如何对一个 excel 进行读写，以及 Sheet、行列、表头处理的一些常用技巧。\r\n\r\n## 读取 Excel\r\n\r\n如果您想读取 Excel 表格中的数据，可以使用 `read_excel()` 方法，其语法格式如下：\r\n\r\n```\r\npd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\r\n              usecols=None, squeeze=False,dtype=None, engine=None,\r\n              converters=None, true_values=None, false_values=None,\r\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\r\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\r\n              convert_float=True, **kwds)\r\n```\r\n\r\n下表对常用参数做了说明：\r\n\r\n|参数名称|说明|\r\n|:----|:----|\r\n|io|表示 Excel 文件的存储路径。|\r\n|sheet_name|要读取的工作表名称，默认0，即读取第一个工作表作为 DataFrame(一定要加`sheet_name=None`，才能读取出所有的 sheet，否则默认读取第一个 sheet)。|\r\n|header|指定作为列名的行，默认0，即取第一行的值为列名；若数据不包含列名，则设定 header = None。若将其设置为 header=2，则表示将前两行作为多重索引。|\r\n|names|一般适用于Excel缺少列名，或者需要重新定义列名的情况；names的长度必须等于Excel表格列的长度，否则会报错。|\r\n|index_col|用做行索引的列，可以是工作表的列名称，如 index_col = \'列名\'，也可以是整数或者列表。|\r\n|usecols|int或list类型，默认为None，表示需要读取所有列。|\r\n|squeeze|boolean，默认为False，如果解析的数据只包含一列，则返回一个Series。|\r\n|converters|规定每一列的数据类型。|\r\n|skiprows|接受一个列表，表示跳过指定行数的数据，从头部第一行开始。|\r\n|nrows|需要读取的行数。|\r\n|skipfooter|接受一个列表，省略指定行数的数据，从尾部最后一行开始。|\r\n\r\n示例如下所示：\r\n```python\r\nimport pandas as pd\r\n\r\n# 读取所有Sheet\r\ndf = pd.read_excel(\'example.xlsx\', sheet_name=None)\r\n\r\n# 读取第一个、第二个和名为"Sheet5"的工作表作为 DataFrame 的字典\r\ndf = pd.read_excel(\'example.xlsx\', sheet_name=[0, 1, "Sheet5"])\r\n```\r\n\r\n## 获取行数和列数\r\n```python\r\nimport pandas as pd\r\n \r\ndf = pd.read_excel(\'example.xlsx\')\r\n# 行索引\r\nprint(df.index)  \r\n# RangeIndex(start=0, stop=3747, step=1)\r\n\r\n# 输出元祖,分别为行数和列数,默认第一行是表头不算行数\r\nprint(df.shape) \r\n# (3747, 4)\r\n```\r\n\r\n## 获取表头\r\n`read_excel` 默认是把 excel 的第一行当成表头。注意：如果 `read_excel` 的 `sheet_name=None`，读取的是所有 excel 的 sheet_name(key) 和 sheet_values(values) 组成的字典，`df.keys()` 的结果是所有 sheet_name，即名字(字典的键)。\r\n\r\n### 获取第一个 sheet\r\n这时候 `df.keys()` 和 `df.columns` 的结果是一样的，都是第一个 sheet 的表头。\r\n\r\n```python\r\nimport pandas as pd\r\n \r\ndf = pd.read_excel(\'input.xlsx\')\r\nprint(df.keys())\r\nprint(\'---------------\')\r\nprint(df.columns)\r\n```\r\n\r\n### 获取所有 sheet\r\n```python\r\nimport pandas as pd\r\n \r\n# 参数为 None 代表读取所有 sheet\r\ndf = pd.read_excel(\'input.xlsx\',sheet_name=None)\r\n\r\n# 获取所有sheet名字, 如果read_excel参数不是None, 则df.keys()为表头\r\nsheet_names = list(df.keys())\r\nprint(sheet_names)\r\n```\r\n\r\n## 参考资料\r\n1. 老董，《[pandas获取excel的行数,列数,表头,sheet,前后行等数据](https://www.python66.com/pandasshujufenxi/268.html)》，[Python编程网](https://www.python66.com/)\r\n2. 《[Pandas Excel读写操作详解](https://c.biancheng.net/pandas/excel.html)》，[C语言中文网](https://c.biancheng.net/)\r\n3. 《[pandas.read_excel — pandas 2.1.4 documentation](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html)》，[pandas documentation — pandas 2.1.4 documentation](https://pandas.pydata.org/docs/index.html)', 'bodyText': '在使用 Pandas 前需要学习了解一下 Series 和 DataFrame 的基本数据结构和索引的相关概念，之后就可以练习基本的 Excel操作。Pandas 读取一个 Excel 文件后会将其转化为 DataFrame 对象，每一列或行就是一个 Series 对象。这里我们看下如何对一个 excel 进行读写，以及 Sheet、行列、表头处理的一些常用技巧。\n读取 Excel\n如果您想读取 Excel 表格中的数据，可以使用 read_excel() 方法，其语法格式如下：\npd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\n              usecols=None, squeeze=False,dtype=None, engine=None,\n              converters=None, true_values=None, false_values=None,\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\n              convert_float=True, **kwds)\n\n下表对常用参数做了说明：\n\n\n\n参数名称\n说明\n\n\n\n\nio\n表示 Excel 文件的存储路径。\n\n\nsheet_name\n要读取的工作表名称，默认0，即读取第一个工作表作为 DataFrame(一定要加sheet_name=None，才能读取出所有的 sheet，否则默认读取第一个 sheet)。\n\n\nheader\n指定作为列名的行，默认0，即取第一行的值为列名；若数据不包含列名，则设定 header = None。若将其设置为 header=2，则表示将前两行作为多重索引。\n\n\nnames\n一般适用于Excel缺少列名，或者需要重新定义列名的情况；names的长度必须等于Excel表格列的长度，否则会报错。\n\n\nindex_col\n用做行索引的列，可以是工作表的列名称，如 index_col = \'列名\'，也可以是整数或者列表。\n\n\nusecols\nint或list类型，默认为None，表示需要读取所有列。\n\n\nsqueeze\nboolean，默认为False，如果解析的数据只包含一列，则返回一个Series。\n\n\nconverters\n规定每一列的数据类型。\n\n\nskiprows\n接受一个列表，表示跳过指定行数的数据，从头部第一行开始。\n\n\nnrows\n需要读取的行数。\n\n\nskipfooter\n接受一个列表，省略指定行数的数据，从尾部最后一行开始。\n\n\n\n示例如下所示：\nimport pandas as pd\n\n# 读取所有Sheet\ndf = pd.read_excel(\'example.xlsx\', sheet_name=None)\n\n# 读取第一个、第二个和名为"Sheet5"的工作表作为 DataFrame 的字典\ndf = pd.read_excel(\'example.xlsx\', sheet_name=[0, 1, "Sheet5"])\n获取行数和列数\nimport pandas as pd\n \ndf = pd.read_excel(\'example.xlsx\')\n# 行索引\nprint(df.index)  \n# RangeIndex(start=0, stop=3747, step=1)\n\n# 输出元祖,分别为行数和列数,默认第一行是表头不算行数\nprint(df.shape) \n# (3747, 4)\n获取表头\nread_excel 默认是把 excel 的第一行当成表头。注意：如果 read_excel 的 sheet_name=None，读取的是所有 excel 的 sheet_name(key) 和 sheet_values(values) 组成的字典，df.keys() 的结果是所有 sheet_name，即名字(字典的键)。\n获取第一个 sheet\n这时候 df.keys() 和 df.columns 的结果是一样的，都是第一个 sheet 的表头。\nimport pandas as pd\n \ndf = pd.read_excel(\'input.xlsx\')\nprint(df.keys())\nprint(\'---------------\')\nprint(df.columns)\n获取所有 sheet\nimport pandas as pd\n \n# 参数为 None 代表读取所有 sheet\ndf = pd.read_excel(\'input.xlsx\',sheet_name=None)\n\n# 获取所有sheet名字, 如果read_excel参数不是None, 则df.keys()为表头\nsheet_names = list(df.keys())\nprint(sheet_names)\n参考资料\n\n老董，《pandas获取excel的行数,列数,表头,sheet,前后行等数据》，Python编程网\n《Pandas Excel读写操作详解》，C语言中文网\n《pandas.read_excel — pandas 2.1.4 documentation》，pandas documentation — pandas 2.1.4 documentation', 'bodyHTML': '<p dir="auto">在使用 Pandas 前需要学习了解一下 Series 和 DataFrame 的基本数据结构和索引的相关概念，之后就可以练习基本的 Excel操作。Pandas 读取一个 Excel 文件后会将其转化为 DataFrame 对象，每一列或行就是一个 Series 对象。这里我们看下如何对一个 excel 进行读写，以及 Sheet、行列、表头处理的一些常用技巧。</p>\n<h2 dir="auto">读取 Excel</h2>\n<p dir="auto">如果您想读取 Excel 表格中的数据，可以使用 <code class="notranslate">read_excel()</code> 方法，其语法格式如下：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\n              usecols=None, squeeze=False,dtype=None, engine=None,\n              converters=None, true_values=None, false_values=None,\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\n              convert_float=True, **kwds)"><pre class="notranslate"><code class="notranslate">pd.read_excel(io, sheet_name=0, header=0, names=None, index_col=None,\n              usecols=None, squeeze=False,dtype=None, engine=None,\n              converters=None, true_values=None, false_values=None,\n              skiprows=None, nrows=None, na_values=None, parse_dates=False,\n              date_parser=None, thousands=None, comment=None, skipfooter=0,\n              convert_float=True, **kwds)\n</code></pre></div>\n<p dir="auto">下表对常用参数做了说明：</p>\n<table role="table">\n<thead>\n<tr>\n<th align="left">参数名称</th>\n<th align="left">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="left">io</td>\n<td align="left">表示 Excel 文件的存储路径。</td>\n</tr>\n<tr>\n<td align="left">sheet_name</td>\n<td align="left">要读取的工作表名称，默认0，即读取第一个工作表作为 DataFrame(一定要加<code class="notranslate">sheet_name=None</code>，才能读取出所有的 sheet，否则默认读取第一个 sheet)。</td>\n</tr>\n<tr>\n<td align="left">header</td>\n<td align="left">指定作为列名的行，默认0，即取第一行的值为列名；若数据不包含列名，则设定 header = None。若将其设置为 header=2，则表示将前两行作为多重索引。</td>\n</tr>\n<tr>\n<td align="left">names</td>\n<td align="left">一般适用于Excel缺少列名，或者需要重新定义列名的情况；names的长度必须等于Excel表格列的长度，否则会报错。</td>\n</tr>\n<tr>\n<td align="left">index_col</td>\n<td align="left">用做行索引的列，可以是工作表的列名称，如 index_col = \'列名\'，也可以是整数或者列表。</td>\n</tr>\n<tr>\n<td align="left">usecols</td>\n<td align="left">int或list类型，默认为None，表示需要读取所有列。</td>\n</tr>\n<tr>\n<td align="left">squeeze</td>\n<td align="left">boolean，默认为False，如果解析的数据只包含一列，则返回一个Series。</td>\n</tr>\n<tr>\n<td align="left">converters</td>\n<td align="left">规定每一列的数据类型。</td>\n</tr>\n<tr>\n<td align="left">skiprows</td>\n<td align="left">接受一个列表，表示跳过指定行数的数据，从头部第一行开始。</td>\n</tr>\n<tr>\n<td align="left">nrows</td>\n<td align="left">需要读取的行数。</td>\n</tr>\n<tr>\n<td align="left">skipfooter</td>\n<td align="left">接受一个列表，省略指定行数的数据，从尾部最后一行开始。</td>\n</tr>\n</tbody>\n</table>\n<p dir="auto">示例如下所示：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import pandas as pd\n\n# 读取所有Sheet\ndf = pd.read_excel(\'example.xlsx\', sheet_name=None)\n\n# 读取第一个、第二个和名为&quot;Sheet5&quot;的工作表作为 DataFrame 的字典\ndf = pd.read_excel(\'example.xlsx\', sheet_name=[0, 1, &quot;Sheet5&quot;])"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">pandas</span> <span class="pl-k">as</span> <span class="pl-s1">pd</span>\n\n<span class="pl-c"># 读取所有Sheet</span>\n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-en">read_excel</span>(<span class="pl-s">\'example.xlsx\'</span>, <span class="pl-s1">sheet_name</span><span class="pl-c1">=</span><span class="pl-c1">None</span>)\n\n<span class="pl-c"># 读取第一个、第二个和名为"Sheet5"的工作表作为 DataFrame 的字典</span>\n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-en">read_excel</span>(<span class="pl-s">\'example.xlsx\'</span>, <span class="pl-s1">sheet_name</span><span class="pl-c1">=</span>[<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-s">"Sheet5"</span>])</pre></div>\n<h2 dir="auto">获取行数和列数</h2>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import pandas as pd\n \ndf = pd.read_excel(\'example.xlsx\')\n# 行索引\nprint(df.index)  \n# RangeIndex(start=0, stop=3747, step=1)\n\n# 输出元祖,分别为行数和列数,默认第一行是表头不算行数\nprint(df.shape) \n# (3747, 4)"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">pandas</span> <span class="pl-k">as</span> <span class="pl-s1">pd</span>\n \n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-en">read_excel</span>(<span class="pl-s">\'example.xlsx\'</span>)\n<span class="pl-c"># 行索引</span>\n<span class="pl-en">print</span>(<span class="pl-s1">df</span>.<span class="pl-s1">index</span>)  \n<span class="pl-c"># RangeIndex(start=0, stop=3747, step=1)</span>\n\n<span class="pl-c"># 输出元祖,分别为行数和列数,默认第一行是表头不算行数</span>\n<span class="pl-en">print</span>(<span class="pl-s1">df</span>.<span class="pl-s1">shape</span>) \n<span class="pl-c"># (3747, 4)</span></pre></div>\n<h2 dir="auto">获取表头</h2>\n<p dir="auto"><code class="notranslate">read_excel</code> 默认是把 excel 的第一行当成表头。注意：如果 <code class="notranslate">read_excel</code> 的 <code class="notranslate">sheet_name=None</code>，读取的是所有 excel 的 sheet_name(key) 和 sheet_values(values) 组成的字典，<code class="notranslate">df.keys()</code> 的结果是所有 sheet_name，即名字(字典的键)。</p>\n<h3 dir="auto">获取第一个 sheet</h3>\n<p dir="auto">这时候 <code class="notranslate">df.keys()</code> 和 <code class="notranslate">df.columns</code> 的结果是一样的，都是第一个 sheet 的表头。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import pandas as pd\n \ndf = pd.read_excel(\'input.xlsx\')\nprint(df.keys())\nprint(\'---------------\')\nprint(df.columns)"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">pandas</span> <span class="pl-k">as</span> <span class="pl-s1">pd</span>\n \n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-en">read_excel</span>(<span class="pl-s">\'input.xlsx\'</span>)\n<span class="pl-en">print</span>(<span class="pl-s1">df</span>.<span class="pl-en">keys</span>())\n<span class="pl-en">print</span>(<span class="pl-s">\'---------------\'</span>)\n<span class="pl-en">print</span>(<span class="pl-s1">df</span>.<span class="pl-s1">columns</span>)</pre></div>\n<h3 dir="auto">获取所有 sheet</h3>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import pandas as pd\n \n# 参数为 None 代表读取所有 sheet\ndf = pd.read_excel(\'input.xlsx\',sheet_name=None)\n\n# 获取所有sheet名字, 如果read_excel参数不是None, 则df.keys()为表头\nsheet_names = list(df.keys())\nprint(sheet_names)"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">pandas</span> <span class="pl-k">as</span> <span class="pl-s1">pd</span>\n \n<span class="pl-c"># 参数为 None 代表读取所有 sheet</span>\n<span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-s1">pd</span>.<span class="pl-en">read_excel</span>(<span class="pl-s">\'input.xlsx\'</span>,<span class="pl-s1">sheet_name</span><span class="pl-c1">=</span><span class="pl-c1">None</span>)\n\n<span class="pl-c"># 获取所有sheet名字, 如果read_excel参数不是None, 则df.keys()为表头</span>\n<span class="pl-s1">sheet_names</span> <span class="pl-c1">=</span> <span class="pl-en">list</span>(<span class="pl-s1">df</span>.<span class="pl-en">keys</span>())\n<span class="pl-en">print</span>(<span class="pl-s1">sheet_names</span>)</pre></div>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li>老董，《<a href="https://www.python66.com/pandasshujufenxi/268.html" rel="nofollow">pandas获取excel的行数,列数,表头,sheet,前后行等数据</a>》，<a href="https://www.python66.com/" rel="nofollow">Python编程网</a></li>\n<li>《<a href="https://c.biancheng.net/pandas/excel.html" rel="nofollow">Pandas Excel读写操作详解</a>》，<a href="https://c.biancheng.net/" rel="nofollow">C语言中文网</a></li>\n<li>《<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html" rel="nofollow">pandas.read_excel — pandas 2.1.4 documentation</a>》，<a href="https://pandas.pydata.org/docs/index.html" rel="nofollow">pandas documentation — pandas 2.1.4 documentation</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': '跳过任意开屏广告和内部弹窗广告', 'number': 39, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/39', 'createdAt': '2023-12-06T03:50:28Z', 'lastEditedAt': '2023-12-08T05:31:46Z', 'updatedAt': '2024-01-04T05:42:23Z', 'body': '今天去用了一下 [gkd](https://github.com/gkd-kit/gkd)—— 点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告的应用，发现真不错，记录一下遇到的一些问题。\r\n\r\n<!-- more -->\r\n\r\n具体使用步骤如下。\r\n\r\n## 1. 开启权限\r\n\r\n应用安装后，**"主页"** 页面的这几个权限都需要开启（尤其是**无障碍权限**），否则应用无法跳过广告，不起作用。   \r\n\r\n<img width=300px src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-home.jpg" alt="gkd-home">\r\n\r\n华为鸿蒙系统怎么开启无障碍模式（也可以参考：[通过快捷方式启动无障碍功能](https://consumer.huawei.com/cn/support/content/zh-cn15849085/)）： \r\n   \r\n1. 打开辅助功能，进入手机设置界面，点击【辅助功能】。\r\n2. 打开无障碍，点击【无障碍】。\r\n3. 打开已安装的服务，下拉到页面底部，点击【已安装的服务】。\r\n4. 选择服务，选择要设置的服务【GKD】，点击进入。\r\n5. 打开服务开关，点击服务右侧【开关】按钮。\r\n6. 确定打开。\r\n\r\n这里会有一个问题：**鸿蒙手机无障碍打开后，点击清理后台会自动关闭**！参考：[gkd-kit/gkd#201](https://github.com/gkd-kit/gkd/issues/201)\r\n\r\n具体可以参考华为官方给出的解决方法——《[华为手机/平板无障碍中的第三方应用的服务开关自动关闭](https://consumer.huawei.com/cn/support/content/zh-cn00410039/)》。\r\n\r\n\r\n## 2. 更新订阅\r\n\r\n应用安装后，**"订阅"** 页面的本地订阅如果没有规则，则需要下拉执行更新一下即可（参考：[gkd-kit/gkd#100](https://github.com/gkd-kit/gkd/issues/100)）。\r\n\r\n<img width=300px src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-dy.jpg" alt="GKD-订阅">\r\n\r\n## 3. 设置\r\n\r\n这是个人在使用时候 **"设置"** 页面的一个截图。    \r\n\r\n<img width=300px src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-setting.jpg" alt="GKD-订阅">\r\n', 'bodyText': '今天去用了一下 gkd—— 点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告的应用，发现真不错，记录一下遇到的一些问题。\n\n具体使用步骤如下。\n1. 开启权限\n应用安装后，"主页" 页面的这几个权限都需要开启（尤其是无障碍权限），否则应用无法跳过广告，不起作用。\n\n华为鸿蒙系统怎么开启无障碍模式（也可以参考：通过快捷方式启动无障碍功能）：\n\n打开辅助功能，进入手机设置界面，点击【辅助功能】。\n打开无障碍，点击【无障碍】。\n打开已安装的服务，下拉到页面底部，点击【已安装的服务】。\n选择服务，选择要设置的服务【GKD】，点击进入。\n打开服务开关，点击服务右侧【开关】按钮。\n确定打开。\n\n这里会有一个问题：鸿蒙手机无障碍打开后，点击清理后台会自动关闭！参考：gkd-kit/gkd#201\n具体可以参考华为官方给出的解决方法——《华为手机/平板无障碍中的第三方应用的服务开关自动关闭》。\n2. 更新订阅\n应用安装后，"订阅" 页面的本地订阅如果没有规则，则需要下拉执行更新一下即可（参考：gkd-kit/gkd#100）。\n\n3. 设置\n这是个人在使用时候 "设置" 页面的一个截图。', 'bodyHTML': '<p dir="auto">今天去用了一下 <a href="https://github.com/gkd-kit/gkd">gkd</a>—— 点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告的应用，发现真不错，记录一下遇到的一些问题。</p>\n\n<p dir="auto">具体使用步骤如下。</p>\n<h2 dir="auto">1. 开启权限</h2>\n<p dir="auto">应用安装后，<strong>"主页"</strong> 页面的这几个权限都需要开启（尤其是<strong>无障碍权限</strong>），否则应用无法跳过广告，不起作用。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bfbc3e885bab87d3268ec933b3fabf4531e8b74046fb95a3a92d1b6cded27307/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d686f6d652e6a7067"><img width="300px" src="https://camo.githubusercontent.com/bfbc3e885bab87d3268ec933b3fabf4531e8b74046fb95a3a92d1b6cded27307/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d686f6d652e6a7067" alt="gkd-home" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-home.jpg" style="max-width: 100%;"></a></p>\n<p dir="auto">华为鸿蒙系统怎么开启无障碍模式（也可以参考：<a href="https://consumer.huawei.com/cn/support/content/zh-cn15849085/" rel="nofollow">通过快捷方式启动无障碍功能</a>）：</p>\n<ol dir="auto">\n<li>打开辅助功能，进入手机设置界面，点击【辅助功能】。</li>\n<li>打开无障碍，点击【无障碍】。</li>\n<li>打开已安装的服务，下拉到页面底部，点击【已安装的服务】。</li>\n<li>选择服务，选择要设置的服务【GKD】，点击进入。</li>\n<li>打开服务开关，点击服务右侧【开关】按钮。</li>\n<li>确定打开。</li>\n</ol>\n<p dir="auto">这里会有一个问题：<strong>鸿蒙手机无障碍打开后，点击清理后台会自动关闭</strong>！参考：<a href="https://github.com/gkd-kit/gkd/issues/201" data-hovercard-type="issue" data-hovercard-url="/gkd-kit/gkd/issues/201/hovercard">gkd-kit/gkd#201</a></p>\n<p dir="auto">具体可以参考华为官方给出的解决方法——《<a href="https://consumer.huawei.com/cn/support/content/zh-cn00410039/" rel="nofollow">华为手机/平板无障碍中的第三方应用的服务开关自动关闭</a>》。</p>\n<h2 dir="auto">2. 更新订阅</h2>\n<p dir="auto">应用安装后，<strong>"订阅"</strong> 页面的本地订阅如果没有规则，则需要下拉执行更新一下即可（参考：<a href="https://github.com/gkd-kit/gkd/issues/100" data-hovercard-type="issue" data-hovercard-url="/gkd-kit/gkd/issues/100/hovercard">gkd-kit/gkd#100</a>）。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a6b45a8bf8f919538d868a37db36be4aedff57290a2f67d1e1856519a5188deb/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d64792e6a7067"><img width="300px" src="https://camo.githubusercontent.com/a6b45a8bf8f919538d868a37db36be4aedff57290a2f67d1e1856519a5188deb/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d64792e6a7067" alt="GKD-订阅" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-dy.jpg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">3. 设置</h2>\n<p dir="auto">这是个人在使用时候 <strong>"设置"</strong> 页面的一个截图。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/164cf7aa8540b8c0614b5385c6e7451e353e066b7aff3055a74e37664fc60f21/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d73657474696e672e6a7067"><img width="300px" src="https://camo.githubusercontent.com/164cf7aa8540b8c0614b5385c6e7451e353e066b7aff3055a74e37664fc60f21/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f676b642d73657474696e672e6a7067" alt="GKD-订阅" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/gkd-setting.jpg" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '首页的那个猫咪有意思～～', 'author': {'login': 'obaby'}}]}}, {'title': 'GitHub Discussions 使用与思考', 'number': 38, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/38', 'createdAt': '2023-12-06T01:55:19Z', 'lastEditedAt': '2024-03-18T06:25:33Z', 'updatedAt': '2024-03-18T06:25:33Z', 'body': '从2023年7月起我所有可公开的文档都保存在了 [GitHub Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions) 上，作为博客、IED 编辑器，以及评论使用，GitHub Discussions 是完全没问题的。\r\n\r\n<!-- more -->\r\n\r\n## 开源的代名词\r\n\r\n开源已成为 GitHub 的代名词。\r\n\r\n> 当开发者谈论开源时，通常会想到 GitHub，它不仅仅是一个代码托管平台，更是一个汇聚了全球开发者的社交中心。过去，开发者发布一款软件后，都是在自己的小圈子里默默努力和交流，现在通过 GitHub 平台可以方便地与全球的开发者分享、交流和协作。贡献者在这里展示自己的才华，追随者在这里寻找强者的脚印，等待着被世人认可的时刻。\r\n\r\n## 体验与感受\r\n\r\n由于 GitHub 是直接 markdown 源码进行书写，正常的导出基本不会有格式错乱的问题，这一点非常好。不像有一些富文本的编辑器，动不动就给你增加几个换行或者空格什么的额外字符。\r\n\r\n借助 GitHub GraphQL API + Python + GitHub Actions 进行每天定时导出非常顺滑，导出来的文档可以随意折腾，自由度非常大。\r\n\r\n## 专业书籍文档\r\n\r\n今天忽然想到的一个问题，即如果作为专业性比较强的系列文档写作，如《[Hello 算法](https://www.hello-algo.com/)》 这样专业性和逻辑性非常明确的专业书籍，使用 GitHub Discussions 写作应该是有点不太合适。\r\n\r\n但又仔细想了一下，如果**只是写作**应该是没问题的 —— 我们可以用 sections 或者 categories，甚至是 tags 进行书籍分类，最后在导出的时候借助这些标签把相关的文档整合到一块，再借助 nav 梳理成大纲展现给读者阅读就可以。所以，总的来说可以用于专业书籍**写作(编辑)**，但**不太适合用于专业书籍的呈现和阅读** —— 主要是大纲和逻辑性会变得不明显。\r\n\r\n## 目录和分类标签\r\n\r\nGitHub Discussions 目前[最多支持 25 个 categories](https://github.com/orgs/community/discussions/7960)，这是一个限制。因此，通过 section+category 我们在 Discussions 上最多只能实现两级的目录结构，所以对于三级和三级以上的目录结构目前暂时无能为力。\r\n\r\n因此，想到一个折中的解决方法：使用 labels 来区分第三级目录结构。\r\n```\r\n1.1-生信\r\n  - 1.1.1-算法\r\n  - 1.1.2-数据\r\n  - 1.1.2-软件\r\n```\r\n\r\n然后，导出 Discussions 的时候需要在本地先在本地建立一个 `section+category: dictory` 一一对应的字典，最后通过这个字典把不同的讨论 md 归档至对应的目录。\r\n```\r\n1.1-生信:\r\n    1.1.1-算法: docs/cookbook/生物信息/算法\r\n    1.1.2-数据: docs/cookbook/生物信息/数据\r\n    1.1.2-软件: docs/cookbook/生物信息/软件\r\n    ...\r\n```\r\n\r\n## GitHub GraphQL API\r\n\r\nGitHub Discussions 的 API 操作主要依赖 [GitHub GraphQL API](https://docs.github.com/zh/graphql/overview/about-the-graphql-api)。\r\n\r\n> ## 概述\r\n> \r\n> GraphQL 是一种用于[应用编程接口（API）](https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces)的查询语言和服务器端运行时，它可以使客户端准确地获得所需的数据，没有任何冗余。\r\n>    \r\n> ## GraphQL 有什么用？    \r\n> GraphQL 旨在让 API 变得快速、灵活并且为开发人员提供便利。它甚至可以部署在名为 [GraphiQL](https://github.com/graphql/graphiql) 的[集成开发环境（IDE）](https://www.redhat.com/zh/topics/middleware/what-is-ide)中。作为 [REST](https://www.redhat.com/zh/topics/integration/whats-the-difference-between-soap-rest) 的替代方案，GraphQL 允许开发人员构建相应的请求，从而通过单个 API 调用从多个数据源中提取数据。\r\n>    \r\n> 此外，GraphQL 还可让 API 维护人员灵活地添加或弃用字段，而不会影响现有查询。开发人员可以使用自己喜欢的方法来构建 API，并且 GraphQL 规范将确保它们以可预测的方式在客户端发挥作用。\r\n>    \r\n> From：《[什么是 GraphQL？核心概念解析](https://www.redhat.com/zh/topics/api/what-is-graphql)》- 红帽\r\n\r\n- 中文文档：https://docs.github.com/zh/graphql/guides/introduction-to-graphql\r\n- 在线使用：https://docs.github.com/en/graphql/overview/explorer\r\n\r\n### 获取 discussions 主要信息\r\n```\r\n{\r\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\r\n    discussions(orderBy: {field: CREATED_AT, direction: DESC}, categoryId: null, first: 5) {\r\n      nodes {\r\n        title\r\n        number\r\n        url\r\n        createdAt\r\n        lastEditedAt\r\n        updatedAt\r\n        body\r\n        bodyText\r\n        bodyHTML\r\n        author {\r\n          login\r\n        }\r\n        category {\r\n          name\r\n        }\r\n        labels(first: 100) {\r\n          nodes {\r\n            name\r\n          }\r\n        }\r\n        comments(first: 10) {\r\n          nodes {\r\n            body\r\n            author {\r\n              login\r\n            }\r\n          }\r\n        }\r\n      }\r\n      pageInfo {\r\n        hasNextPage\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n### 获取 discussions categoryId\r\n\r\n参考：《[how to get github discussions categoryId](https://qiita.com/shooter/items/d59fbb43d0f118c95092)》\r\n\r\n```\r\n{\r\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\r\n    id\r\n    name\r\n    discussionCategories(first: 30) {\r\n      nodes {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### 其他的一些问题\r\n\r\n目前，通过 GitHub GraphQL API 暂时无法获取 Sections 的信息。\r\n\r\n## 简单的总结\r\n\r\n拥抱 GitHub Discussions 的一个前提是你可以随时登录 GitHub，如果你已经解决了这个问题，也想着像我一样 Using Github discussions as your blog engine，那么你可以参考一下我的 [shenweiyan/Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden/) 仓库。', 'bodyText': '从2023年7月起我所有可公开的文档都保存在了 GitHub Discussions 上，作为博客、IED 编辑器，以及评论使用，GitHub Discussions 是完全没问题的。\n\n开源的代名词\n开源已成为 GitHub 的代名词。\n\n当开发者谈论开源时，通常会想到 GitHub，它不仅仅是一个代码托管平台，更是一个汇聚了全球开发者的社交中心。过去，开发者发布一款软件后，都是在自己的小圈子里默默努力和交流，现在通过 GitHub 平台可以方便地与全球的开发者分享、交流和协作。贡献者在这里展示自己的才华，追随者在这里寻找强者的脚印，等待着被世人认可的时刻。\n\n体验与感受\n由于 GitHub 是直接 markdown 源码进行书写，正常的导出基本不会有格式错乱的问题，这一点非常好。不像有一些富文本的编辑器，动不动就给你增加几个换行或者空格什么的额外字符。\n借助 GitHub GraphQL API + Python + GitHub Actions 进行每天定时导出非常顺滑，导出来的文档可以随意折腾，自由度非常大。\n专业书籍文档\n今天忽然想到的一个问题，即如果作为专业性比较强的系列文档写作，如《Hello 算法》 这样专业性和逻辑性非常明确的专业书籍，使用 GitHub Discussions 写作应该是有点不太合适。\n但又仔细想了一下，如果只是写作应该是没问题的 —— 我们可以用 sections 或者 categories，甚至是 tags 进行书籍分类，最后在导出的时候借助这些标签把相关的文档整合到一块，再借助 nav 梳理成大纲展现给读者阅读就可以。所以，总的来说可以用于专业书籍写作(编辑)，但不太适合用于专业书籍的呈现和阅读 —— 主要是大纲和逻辑性会变得不明显。\n目录和分类标签\nGitHub Discussions 目前最多支持 25 个 categories，这是一个限制。因此，通过 section+category 我们在 Discussions 上最多只能实现两级的目录结构，所以对于三级和三级以上的目录结构目前暂时无能为力。\n因此，想到一个折中的解决方法：使用 labels 来区分第三级目录结构。\n1.1-生信\n  - 1.1.1-算法\n  - 1.1.2-数据\n  - 1.1.2-软件\n\n然后，导出 Discussions 的时候需要在本地先在本地建立一个 section+category: dictory 一一对应的字典，最后通过这个字典把不同的讨论 md 归档至对应的目录。\n1.1-生信:\n    1.1.1-算法: docs/cookbook/生物信息/算法\n    1.1.2-数据: docs/cookbook/生物信息/数据\n    1.1.2-软件: docs/cookbook/生物信息/软件\n    ...\n\nGitHub GraphQL API\nGitHub Discussions 的 API 操作主要依赖 GitHub GraphQL API。\n\n概述\nGraphQL 是一种用于应用编程接口（API）的查询语言和服务器端运行时，它可以使客户端准确地获得所需的数据，没有任何冗余。\nGraphQL 有什么用？\nGraphQL 旨在让 API 变得快速、灵活并且为开发人员提供便利。它甚至可以部署在名为 GraphiQL 的集成开发环境（IDE）中。作为 REST 的替代方案，GraphQL 允许开发人员构建相应的请求，从而通过单个 API 调用从多个数据源中提取数据。\n此外，GraphQL 还可让 API 维护人员灵活地添加或弃用字段，而不会影响现有查询。开发人员可以使用自己喜欢的方法来构建 API，并且 GraphQL 规范将确保它们以可预测的方式在客户端发挥作用。\nFrom：《什么是 GraphQL？核心概念解析》- 红帽\n\n\n中文文档：https://docs.github.com/zh/graphql/guides/introduction-to-graphql\n在线使用：https://docs.github.com/en/graphql/overview/explorer\n\n获取 discussions 主要信息\n{\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\n    discussions(orderBy: {field: CREATED_AT, direction: DESC}, categoryId: null, first: 5) {\n      nodes {\n        title\n        number\n        url\n        createdAt\n        lastEditedAt\n        updatedAt\n        body\n        bodyText\n        bodyHTML\n        author {\n          login\n        }\n        category {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        comments(first: 10) {\n          nodes {\n            body\n            author {\n              login\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n}\n\n获取 discussions categoryId\n参考：《how to get github discussions categoryId》\n{\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\n    id\n    name\n    discussionCategories(first: 30) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n}\n\n其他的一些问题\n目前，通过 GitHub GraphQL API 暂时无法获取 Sections 的信息。\n简单的总结\n拥抱 GitHub Discussions 的一个前提是你可以随时登录 GitHub，如果你已经解决了这个问题，也想着像我一样 Using Github discussions as your blog engine，那么你可以参考一下我的 shenweiyan/Knowledge-Garden 仓库。', 'bodyHTML': '<p dir="auto">从2023年7月起我所有可公开的文档都保存在了 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions">GitHub Discussions</a> 上，作为博客、IED 编辑器，以及评论使用，GitHub Discussions 是完全没问题的。</p>\n\n<h2 dir="auto">开源的代名词</h2>\n<p dir="auto">开源已成为 GitHub 的代名词。</p>\n<blockquote>\n<p dir="auto">当开发者谈论开源时，通常会想到 GitHub，它不仅仅是一个代码托管平台，更是一个汇聚了全球开发者的社交中心。过去，开发者发布一款软件后，都是在自己的小圈子里默默努力和交流，现在通过 GitHub 平台可以方便地与全球的开发者分享、交流和协作。贡献者在这里展示自己的才华，追随者在这里寻找强者的脚印，等待着被世人认可的时刻。</p>\n</blockquote>\n<h2 dir="auto">体验与感受</h2>\n<p dir="auto">由于 GitHub 是直接 markdown 源码进行书写，正常的导出基本不会有格式错乱的问题，这一点非常好。不像有一些富文本的编辑器，动不动就给你增加几个换行或者空格什么的额外字符。</p>\n<p dir="auto">借助 GitHub GraphQL API + Python + GitHub Actions 进行每天定时导出非常顺滑，导出来的文档可以随意折腾，自由度非常大。</p>\n<h2 dir="auto">专业书籍文档</h2>\n<p dir="auto">今天忽然想到的一个问题，即如果作为专业性比较强的系列文档写作，如《<a href="https://www.hello-algo.com/" rel="nofollow">Hello 算法</a>》 这样专业性和逻辑性非常明确的专业书籍，使用 GitHub Discussions 写作应该是有点不太合适。</p>\n<p dir="auto">但又仔细想了一下，如果<strong>只是写作</strong>应该是没问题的 —— 我们可以用 sections 或者 categories，甚至是 tags 进行书籍分类，最后在导出的时候借助这些标签把相关的文档整合到一块，再借助 nav 梳理成大纲展现给读者阅读就可以。所以，总的来说可以用于专业书籍<strong>写作(编辑)</strong>，但<strong>不太适合用于专业书籍的呈现和阅读</strong> —— 主要是大纲和逻辑性会变得不明显。</p>\n<h2 dir="auto">目录和分类标签</h2>\n<p dir="auto">GitHub Discussions 目前<a href="https://github.com/orgs/community/discussions/7960">最多支持 25 个 categories</a>，这是一个限制。因此，通过 section+category 我们在 Discussions 上最多只能实现两级的目录结构，所以对于三级和三级以上的目录结构目前暂时无能为力。</p>\n<p dir="auto">因此，想到一个折中的解决方法：使用 labels 来区分第三级目录结构。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1.1-生信\n  - 1.1.1-算法\n  - 1.1.2-数据\n  - 1.1.2-软件"><pre class="notranslate"><code class="notranslate">1.1-生信\n  - 1.1.1-算法\n  - 1.1.2-数据\n  - 1.1.2-软件\n</code></pre></div>\n<p dir="auto">然后，导出 Discussions 的时候需要在本地先在本地建立一个 <code class="notranslate">section+category: dictory</code> 一一对应的字典，最后通过这个字典把不同的讨论 md 归档至对应的目录。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1.1-生信:\n    1.1.1-算法: docs/cookbook/生物信息/算法\n    1.1.2-数据: docs/cookbook/生物信息/数据\n    1.1.2-软件: docs/cookbook/生物信息/软件\n    ..."><pre class="notranslate"><code class="notranslate">1.1-生信:\n    1.1.1-算法: docs/cookbook/生物信息/算法\n    1.1.2-数据: docs/cookbook/生物信息/数据\n    1.1.2-软件: docs/cookbook/生物信息/软件\n    ...\n</code></pre></div>\n<h2 dir="auto">GitHub GraphQL API</h2>\n<p dir="auto">GitHub Discussions 的 API 操作主要依赖 <a href="https://docs.github.com/zh/graphql/overview/about-the-graphql-api">GitHub GraphQL API</a>。</p>\n<blockquote>\n<h2 dir="auto">概述</h2>\n<p dir="auto">GraphQL 是一种用于<a href="https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces" rel="nofollow">应用编程接口（API）</a>的查询语言和服务器端运行时，它可以使客户端准确地获得所需的数据，没有任何冗余。</p>\n<h2 dir="auto">GraphQL 有什么用？</h2>\n<p dir="auto">GraphQL 旨在让 API 变得快速、灵活并且为开发人员提供便利。它甚至可以部署在名为 <a href="https://github.com/graphql/graphiql">GraphiQL</a> 的<a href="https://www.redhat.com/zh/topics/middleware/what-is-ide" rel="nofollow">集成开发环境（IDE）</a>中。作为 <a href="https://www.redhat.com/zh/topics/integration/whats-the-difference-between-soap-rest" rel="nofollow">REST</a> 的替代方案，GraphQL 允许开发人员构建相应的请求，从而通过单个 API 调用从多个数据源中提取数据。</p>\n<p dir="auto">此外，GraphQL 还可让 API 维护人员灵活地添加或弃用字段，而不会影响现有查询。开发人员可以使用自己喜欢的方法来构建 API，并且 GraphQL 规范将确保它们以可预测的方式在客户端发挥作用。</p>\n<p dir="auto">From：《<a href="https://www.redhat.com/zh/topics/api/what-is-graphql" rel="nofollow">什么是 GraphQL？核心概念解析</a>》- 红帽</p>\n</blockquote>\n<ul dir="auto">\n<li>中文文档：<a href="https://docs.github.com/zh/graphql/guides/introduction-to-graphql">https://docs.github.com/zh/graphql/guides/introduction-to-graphql</a></li>\n<li>在线使用：<a href="https://docs.github.com/en/graphql/overview/explorer">https://docs.github.com/en/graphql/overview/explorer</a></li>\n</ul>\n<h3 dir="auto">获取 discussions 主要信息</h3>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{\n  repository(owner: &quot;shenweiyan&quot;, name: &quot;Knowledge-Garden&quot;) {\n    discussions(orderBy: {field: CREATED_AT, direction: DESC}, categoryId: null, first: 5) {\n      nodes {\n        title\n        number\n        url\n        createdAt\n        lastEditedAt\n        updatedAt\n        body\n        bodyText\n        bodyHTML\n        author {\n          login\n        }\n        category {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        comments(first: 10) {\n          nodes {\n            body\n            author {\n              login\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n}"><pre class="notranslate"><code class="notranslate">{\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\n    discussions(orderBy: {field: CREATED_AT, direction: DESC}, categoryId: null, first: 5) {\n      nodes {\n        title\n        number\n        url\n        createdAt\n        lastEditedAt\n        updatedAt\n        body\n        bodyText\n        bodyHTML\n        author {\n          login\n        }\n        category {\n          name\n        }\n        labels(first: 100) {\n          nodes {\n            name\n          }\n        }\n        comments(first: 10) {\n          nodes {\n            body\n            author {\n              login\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n}\n</code></pre></div>\n<h3 dir="auto">获取 discussions categoryId</h3>\n<p dir="auto">参考：《<a href="https://qiita.com/shooter/items/d59fbb43d0f118c95092" rel="nofollow">how to get github discussions categoryId</a>》</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{\n  repository(owner: &quot;shenweiyan&quot;, name: &quot;Knowledge-Garden&quot;) {\n    id\n    name\n    discussionCategories(first: 30) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n}"><pre class="notranslate"><code class="notranslate">{\n  repository(owner: "shenweiyan", name: "Knowledge-Garden") {\n    id\n    name\n    discussionCategories(first: 30) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n}\n</code></pre></div>\n<h3 dir="auto">其他的一些问题</h3>\n<p dir="auto">目前，通过 GitHub GraphQL API 暂时无法获取 Sections 的信息。</p>\n<h2 dir="auto">简单的总结</h2>\n<p dir="auto">拥抱 GitHub Discussions 的一个前提是你可以随时登录 GitHub，如果你已经解决了这个问题，也想着像我一样 Using Github discussions as your blog engine，那么你可以参考一下我的 <a href="https://github.com/shenweiyan/Knowledge-Garden/">shenweiyan/Knowledge-Garden</a> 仓库。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': 'MkDocs Material 安装部署和使用', 'number': 37, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/37', 'createdAt': '2023-12-06T01:28:00Z', 'lastEditedAt': '2023-12-11T02:08:45Z', 'updatedAt': '2024-01-04T05:42:38Z', 'body': 'MkDocs 是一个快速、简单、华丽的静态网站生成器，适用于构建项目文档。文档源文件以 Markdown 编写，并使用一个 YAML 文件来进行配置。[Material for MkDocs](https://squidfunk.github.io/mkdocs-material/) 是 [MkDocs](https://www.mkdocs.org/) 的一个主题配置，更加简洁美观，更新和维护也更加及时和频繁，且社区也更加活跃。\r\n\r\n<!-- more -->\r\n\r\n## 安装\r\n\r\n主要使用的一些软件包以及模块 (requirements.txt) 如下：\r\n```\r\nmkdocs==1.5.3\r\nmkdocs-material\r\nmkdocs-rss-plugin\r\nmkdocs-git-revision-date-plugin\r\nmkdocs-include-dir-to-nav==1.2.0\r\nmkdocs-glightbox\r\njieba\r\n```\r\n\r\n```\r\npip3 install -r requirements.txt\r\n```\r\n\r\n查看 `mkdocs-material`, `mkdocs` 的版本：\r\n```python\r\n$ mkdocs --version\r\nmkdocs, version 1.5.3 from /usr/local/software/python-3.9.18/lib/python3.9/site-packages/mkdocs (Python 3.9)\r\n\r\n$ pip3 show mkdocs-material\r\nName: mkdocs-material\r\nVersion: 9.4.4\r\nSummary: Documentation that simply works\r\nHome-page: \r\nAuthor: \r\nAuthor-email: Martin Donath <martin.donath@squidfunk.com>\r\nLicense: \r\nLocation: /usr/local/software/python-3.9.18/lib/python3.9/site-packages\r\nRequires: babel, colorama, jinja2, markdown, mkdocs, mkdocs-material-extensions, paginate, pygments, pymdown-extensions, regex, requests\r\nRequired-by:\r\n```\r\n\r\n## 使用\r\n\r\n本地预览：\r\n```\r\n$ mkdocs serve -a 0.0.0.0:8000\r\n```\r\n\r\n## 问题与解决\r\n\r\n1. Pagination 分页与 `git-revision-date` 冲突，导致无法构建 - 参考 [mkdocs-material/discussions/6156](https://github.com/squidfunk/mkdocs-material/discussions/6156)\r\n2. [Support Markdown in the copyright string #5134](https://github.com/squidfunk/mkdocs-material/issues/5134)\r\n3. [如何在 MkDocs 的版权部分自动添加年份 - squidfunk/mkdocs-material#4969](https://github.com/squidfunk/mkdocs-material/discussions/4969)\r\n4. [如何定制博客插件的归档页面 - squidfunk/mkdocs-material#6324](https://github.com/squidfunk/mkdocs-material/discussions/6324)\r\n\r\n## 期待的功能\r\n\r\n这是一个个人非常期待的功能，大部分目前已经可以在 [Insiders](https://squidfunk.github.io/mkdocs-material/insiders/) 版本中使用，社区公开的版本尚无法使用。\r\n\r\n- 博客插件的自定义归档、目录页面每页文档数 - [squidfunk/mkdocs-material#6383](https://github.com/squidfunk/mkdocs-material/issues/6383)\r\n- 内置隐私插件（方便内网/国内部署加速访问）- [Built-in privacy plugin - Material for MkDocs](https://squidfunk.github.io/mkdocs-material/plugins/privacy/)    \r\n    内置隐私插件(privacy plugin) 在 [9.5.0](https://github.com/squidfunk/mkdocs-material/releases/tag/9.5.0) 中已经k可以正常使用了，下一个值得期待的就是该插件的 [`assets_exclude`](https://squidfunk.github.io/mkdocs-material/plugins/privacy/#config.assets_exclude) 功能！', 'bodyText': 'MkDocs 是一个快速、简单、华丽的静态网站生成器，适用于构建项目文档。文档源文件以 Markdown 编写，并使用一个 YAML 文件来进行配置。Material for MkDocs 是 MkDocs 的一个主题配置，更加简洁美观，更新和维护也更加及时和频繁，且社区也更加活跃。\n\n安装\n主要使用的一些软件包以及模块 (requirements.txt) 如下：\nmkdocs==1.5.3\nmkdocs-material\nmkdocs-rss-plugin\nmkdocs-git-revision-date-plugin\nmkdocs-include-dir-to-nav==1.2.0\nmkdocs-glightbox\njieba\n\npip3 install -r requirements.txt\n\n查看 mkdocs-material, mkdocs 的版本：\n$ mkdocs --version\nmkdocs, version 1.5.3 from /usr/local/software/python-3.9.18/lib/python3.9/site-packages/mkdocs (Python 3.9)\n\n$ pip3 show mkdocs-material\nName: mkdocs-material\nVersion: 9.4.4\nSummary: Documentation that simply works\nHome-page: \nAuthor: \nAuthor-email: Martin Donath <martin.donath@squidfunk.com>\nLicense: \nLocation: /usr/local/software/python-3.9.18/lib/python3.9/site-packages\nRequires: babel, colorama, jinja2, markdown, mkdocs, mkdocs-material-extensions, paginate, pygments, pymdown-extensions, regex, requests\nRequired-by:\n使用\n本地预览：\n$ mkdocs serve -a 0.0.0.0:8000\n\n问题与解决\n\nPagination 分页与 git-revision-date 冲突，导致无法构建 - 参考 mkdocs-material/discussions/6156\nSupport Markdown in the copyright string #5134\n如何在 MkDocs 的版权部分自动添加年份 - squidfunk/mkdocs-material#4969\n如何定制博客插件的归档页面 - squidfunk/mkdocs-material#6324\n\n期待的功能\n这是一个个人非常期待的功能，大部分目前已经可以在 Insiders 版本中使用，社区公开的版本尚无法使用。\n\n博客插件的自定义归档、目录页面每页文档数 - squidfunk/mkdocs-material#6383\n内置隐私插件（方便内网/国内部署加速访问）- Built-in privacy plugin - Material for MkDocs\n内置隐私插件(privacy plugin) 在 9.5.0 中已经k可以正常使用了，下一个值得期待的就是该插件的 assets_exclude 功能！', 'bodyHTML': '<p dir="auto">MkDocs 是一个快速、简单、华丽的静态网站生成器，适用于构建项目文档。文档源文件以 Markdown 编写，并使用一个 YAML 文件来进行配置。<a href="https://squidfunk.github.io/mkdocs-material/" rel="nofollow">Material for MkDocs</a> 是 <a href="https://www.mkdocs.org/" rel="nofollow">MkDocs</a> 的一个主题配置，更加简洁美观，更新和维护也更加及时和频繁，且社区也更加活跃。</p>\n\n<h2 dir="auto">安装</h2>\n<p dir="auto">主要使用的一些软件包以及模块 (requirements.txt) 如下：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mkdocs==1.5.3\nmkdocs-material\nmkdocs-rss-plugin\nmkdocs-git-revision-date-plugin\nmkdocs-include-dir-to-nav==1.2.0\nmkdocs-glightbox\njieba"><pre class="notranslate"><code class="notranslate">mkdocs==1.5.3\nmkdocs-material\nmkdocs-rss-plugin\nmkdocs-git-revision-date-plugin\nmkdocs-include-dir-to-nav==1.2.0\nmkdocs-glightbox\njieba\n</code></pre></div>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pip3 install -r requirements.txt"><pre class="notranslate"><code class="notranslate">pip3 install -r requirements.txt\n</code></pre></div>\n<p dir="auto">查看 <code class="notranslate">mkdocs-material</code>, <code class="notranslate">mkdocs</code> 的版本：</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ mkdocs --version\nmkdocs, version 1.5.3 from /usr/local/software/python-3.9.18/lib/python3.9/site-packages/mkdocs (Python 3.9)\n\n$ pip3 show mkdocs-material\nName: mkdocs-material\nVersion: 9.4.4\nSummary: Documentation that simply works\nHome-page: \nAuthor: \nAuthor-email: Martin Donath &lt;martin.donath@squidfunk.com&gt;\nLicense: \nLocation: /usr/local/software/python-3.9.18/lib/python3.9/site-packages\nRequires: babel, colorama, jinja2, markdown, mkdocs, mkdocs-material-extensions, paginate, pygments, pymdown-extensions, regex, requests\nRequired-by:"><pre class="notranslate">$ <span class="pl-s1">mkdocs</span> <span class="pl-c1">-</span><span class="pl-c1">-</span><span class="pl-s1">version</span>\n<span class="pl-s1">mkdocs</span>, <span class="pl-s1">version</span> <span class="pl-c1">1.5</span><span class="pl-c1">.3</span> <span class="pl-k">from</span> <span class="pl-c1">/</span><span class="pl-s1">usr</span><span class="pl-c1">/</span><span class="pl-s1">local</span><span class="pl-c1">/</span><span class="pl-s1">software</span><span class="pl-c1">/</span><span class="pl-s1">python</span><span class="pl-c1">-</span><span class="pl-c1">3.9</span>.<span class="pl-c1">18</span><span class="pl-c1">/</span><span class="pl-s1">lib</span><span class="pl-c1">/</span><span class="pl-s1">python3</span>.<span class="pl-c1">9</span><span class="pl-c1">/</span><span class="pl-s1">site</span><span class="pl-c1">-</span><span class="pl-s1">packages</span><span class="pl-c1">/</span><span class="pl-en">mkdocs</span> (<span class="pl-v">Python</span> <span class="pl-c1">3.9</span>)\n\n$ <span class="pl-s1">pip3</span> <span class="pl-s1">show</span> <span class="pl-s1">mkdocs</span><span class="pl-c1">-</span><span class="pl-s1">material</span>\n<span class="pl-v">Name</span>: <span class="pl-s1">mkdocs</span><span class="pl-c1">-</span><span class="pl-s1">material</span>\n<span class="pl-v">Version</span>: <span class="pl-c1">9.4</span>.<span class="pl-c1">4</span>\n<span class="pl-v">Summary</span>: <span class="pl-v">Documentation</span> <span class="pl-s1">that</span> <span class="pl-s1">simply</span> <span class="pl-s1">works</span>\n<span class="pl-v">Home</span><span class="pl-c1">-</span><span class="pl-s1">page</span>: \n<span class="pl-v">Author</span>: \n<span class="pl-v">Author</span><span class="pl-c1">-</span><span class="pl-s1">email</span>: <span class="pl-v">Martin</span> <span class="pl-v">Donath</span> <span class="pl-c1">&lt;</span><span class="pl-s1">martin</span>.<span class="pl-s1">donath</span>@<span class="pl-s1">squidfunk</span>.<span class="pl-s1">com</span><span class="pl-c1">&gt;</span>\n<span class="pl-v">License</span>: \n<span class="pl-v">Location</span>: <span class="pl-c1">/</span><span class="pl-s1">usr</span><span class="pl-c1">/</span><span class="pl-s1">local</span><span class="pl-c1">/</span><span class="pl-s1">software</span><span class="pl-c1">/</span><span class="pl-s1">python</span><span class="pl-c1">-</span><span class="pl-c1">3.9</span>.<span class="pl-c1">18</span><span class="pl-c1">/</span><span class="pl-s1">lib</span><span class="pl-c1">/</span><span class="pl-s1">python3</span>.<span class="pl-c1">9</span><span class="pl-c1">/</span><span class="pl-s1">site</span><span class="pl-c1">-</span><span class="pl-s1">packages</span>\n<span class="pl-v">Requires</span>: <span class="pl-s1">babel</span>, <span class="pl-s1">colorama</span>, <span class="pl-s1">jinja2</span>, <span class="pl-s1">markdown</span>, <span class="pl-s1">mkdocs</span>, <span class="pl-s1">mkdocs</span><span class="pl-c1">-</span><span class="pl-s1">material</span><span class="pl-c1">-</span><span class="pl-s1">extensions</span>, <span class="pl-s1">paginate</span>, <span class="pl-s1">pygments</span>, <span class="pl-s1">pymdown</span><span class="pl-c1">-</span><span class="pl-s1">extensions</span>, <span class="pl-s1">regex</span>, <span class="pl-s1">requests</span>\n<span class="pl-v">Required</span><span class="pl-c1">-</span><span class="pl-s1">by</span>:</pre></div>\n<h2 dir="auto">使用</h2>\n<p dir="auto">本地预览：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ mkdocs serve -a 0.0.0.0:8000"><pre class="notranslate"><code class="notranslate">$ mkdocs serve -a 0.0.0.0:8000\n</code></pre></div>\n<h2 dir="auto">问题与解决</h2>\n<ol dir="auto">\n<li>Pagination 分页与 <code class="notranslate">git-revision-date</code> 冲突，导致无法构建 - 参考 <a href="https://github.com/squidfunk/mkdocs-material/discussions/6156" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6156/hovercard">mkdocs-material/discussions/6156</a></li>\n<li><a href="https://github.com/squidfunk/mkdocs-material/issues/5134" data-hovercard-type="issue" data-hovercard-url="/squidfunk/mkdocs-material/issues/5134/hovercard">Support Markdown in the copyright string #5134</a></li>\n<li><a href="https://github.com/squidfunk/mkdocs-material/discussions/4969" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/4969/hovercard">如何在 MkDocs 的版权部分自动添加年份 - squidfunk/mkdocs-material#4969</a></li>\n<li><a href="https://github.com/squidfunk/mkdocs-material/discussions/6324" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6324/hovercard">如何定制博客插件的归档页面 - squidfunk/mkdocs-material#6324</a></li>\n</ol>\n<h2 dir="auto">期待的功能</h2>\n<p dir="auto">这是一个个人非常期待的功能，大部分目前已经可以在 <a href="https://squidfunk.github.io/mkdocs-material/insiders/" rel="nofollow">Insiders</a> 版本中使用，社区公开的版本尚无法使用。</p>\n<ul dir="auto">\n<li>博客插件的自定义归档、目录页面每页文档数 - <a href="https://github.com/squidfunk/mkdocs-material/issues/6383" data-hovercard-type="issue" data-hovercard-url="/squidfunk/mkdocs-material/issues/6383/hovercard">squidfunk/mkdocs-material#6383</a></li>\n<li>内置隐私插件（方便内网/国内部署加速访问）- <a href="https://squidfunk.github.io/mkdocs-material/plugins/privacy/" rel="nofollow">Built-in privacy plugin - Material for MkDocs</a><br>\n内置隐私插件(privacy plugin) 在 <a href="https://github.com/squidfunk/mkdocs-material/releases/tag/9.5.0">9.5.0</a> 中已经k可以正常使用了，下一个值得期待的就是该插件的 <a href="https://squidfunk.github.io/mkdocs-material/plugins/privacy/#config.assets_exclude" rel="nofollow"><code class="notranslate">assets_exclude</code></a> 功能！</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '为 Material for MkDocs 增加博客插件', 'number': 36, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/36', 'createdAt': '2023-12-06T01:26:26Z', 'lastEditedAt': None, 'updatedAt': '2024-01-04T05:43:47Z', 'body': 'Material for MkDocs 从 9.2.0 开始内置博客插件，内置博客插件添加了对从帖子文件夹构建博客的支持，这些帖子带有日期和其他结构化数据注释。\r\n\r\n<!-- more -->\r\n\r\nMaterial for MkDocs makes it very easy to build a blog, either as a sidecar to your documentation or standalone. Focus on your content while the engine does all the heavy lifting, automatically generating archive and category indexes, post slugs, configurable pagination and more.\r\n\r\nMaterial for MkDocs 使构建博客变得非常容易，无论是作为文档的附属工具还是独立的博客。专注于您的内容，而引擎会完成所有繁重的工作，自动生成存档和类别索引、帖子段、可配置的分页等等。\r\n\r\n存在的一些问题和使用体验：\r\n\r\n1. 在 Markdown 中使用 `<!-- more -->` 的写法分割 description 和全文，总感觉有点别扭；\r\n2. Pagination 分页与 `git-revision-date` 冲突，会引发构建错误 - 参考 [mkdocs-material/discussions#6156](https://github.com/squidfunk/mkdocs-material/discussions/6156)\r\n\r\n## 写博客\r\n\r\n有感于 Material for MkDocs 的博客结构，现在基本上可以实现使用 Discussions 进行 MkDocs blog 编辑与写作 —— 在 Discussions 上写完文章，借助第三方工具或者 GitHub Actions 导出为 Markdown 文件，保存到 `docs/blog/posts` 就可以啦！\r\n\r\n## 加评论\r\n\r\n借助 [giscus](https://giscus.app/zh-CN)，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：\r\n```javascript\r\n<script src="https://giscus.app/client.js"\r\n        data-repo="shenweiyan/Knowledge-Garden"\r\n        data-repo-id="R_kgDOKgxWlg"\r\n        data-mapping="number"\r\n        data-term="4"\r\n        data-reactions-enabled="1"\r\n        data-emit-metadata="0"\r\n        data-input-position="bottom"\r\n        data-theme="light"\r\n        data-lang="zh-CN"\r\n        crossorigin="anonymous"\r\n        async>\r\n</script>\r\n```\r\n\r\n## 自定义归档页面\r\n\r\n[mkdocs-material](https://github.com/squidfunk/mkdocs-material) 的归档页面跟博客 index 主页面基本是一个样，如果想要列表式的自定义，可以参考 [squidfunk/mkdocs-material#6324](https://github.com/squidfunk/mkdocs-material/discussions/6324) 和 [squidfunk/mkdocs-material#6383](https://github.com/squidfunk/mkdocs-material/issues/6383)。\r\n\r\n官方在 [8ecee7b](https://github.com/squidfunk/mkdocs-material-insiders/commit/8ecee7b9dbdc5b2a0befd043a048ad25d56c784f) (Insiders) 中增加了几个个性化的新设置参数：  \r\n  \r\n- [`archive_pagination`](https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.archive_pagination)\r\n- [`archive_pagination_per_page`](https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.archive_pagination_per_page)\r\n- [`categories_pagination`](https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.categories_pagination)\r\n- [`categories_pagination_per_page`](https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.categories_pagination_per_page)\r\n\r\n所以，等开放给公用版本使用后，可以再好好折腾一下。\r\n', 'bodyText': 'Material for MkDocs 从 9.2.0 开始内置博客插件，内置博客插件添加了对从帖子文件夹构建博客的支持，这些帖子带有日期和其他结构化数据注释。\n\nMaterial for MkDocs makes it very easy to build a blog, either as a sidecar to your documentation or standalone. Focus on your content while the engine does all the heavy lifting, automatically generating archive and category indexes, post slugs, configurable pagination and more.\nMaterial for MkDocs 使构建博客变得非常容易，无论是作为文档的附属工具还是独立的博客。专注于您的内容，而引擎会完成所有繁重的工作，自动生成存档和类别索引、帖子段、可配置的分页等等。\n存在的一些问题和使用体验：\n\n在 Markdown 中使用 <!-- more --> 的写法分割 description 和全文，总感觉有点别扭；\nPagination 分页与 git-revision-date 冲突，会引发构建错误 - 参考 mkdocs-material/discussions#6156\n\n写博客\n有感于 Material for MkDocs 的博客结构，现在基本上可以实现使用 Discussions 进行 MkDocs blog 编辑与写作 —— 在 Discussions 上写完文章，借助第三方工具或者 GitHub Actions 导出为 Markdown 文件，保存到 docs/blog/posts 就可以啦！\n加评论\n借助 giscus，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：\n<script src="https://giscus.app/client.js"\n        data-repo="shenweiyan/Knowledge-Garden"\n        data-repo-id="R_kgDOKgxWlg"\n        data-mapping="number"\n        data-term="4"\n        data-reactions-enabled="1"\n        data-emit-metadata="0"\n        data-input-position="bottom"\n        data-theme="light"\n        data-lang="zh-CN"\n        crossorigin="anonymous"\n        async>\n</script>\n自定义归档页面\nmkdocs-material 的归档页面跟博客 index 主页面基本是一个样，如果想要列表式的自定义，可以参考 squidfunk/mkdocs-material#6324 和 squidfunk/mkdocs-material#6383。\n官方在 8ecee7b (Insiders) 中增加了几个个性化的新设置参数：\n\narchive_pagination\narchive_pagination_per_page\ncategories_pagination\ncategories_pagination_per_page\n\n所以，等开放给公用版本使用后，可以再好好折腾一下。', 'bodyHTML': '<p dir="auto">Material for MkDocs 从 9.2.0 开始内置博客插件，内置博客插件添加了对从帖子文件夹构建博客的支持，这些帖子带有日期和其他结构化数据注释。</p>\n\n<p dir="auto">Material for MkDocs makes it very easy to build a blog, either as a sidecar to your documentation or standalone. Focus on your content while the engine does all the heavy lifting, automatically generating archive and category indexes, post slugs, configurable pagination and more.</p>\n<p dir="auto">Material for MkDocs 使构建博客变得非常容易，无论是作为文档的附属工具还是独立的博客。专注于您的内容，而引擎会完成所有繁重的工作，自动生成存档和类别索引、帖子段、可配置的分页等等。</p>\n<p dir="auto">存在的一些问题和使用体验：</p>\n<ol dir="auto">\n<li>在 Markdown 中使用 <code class="notranslate">&lt;!-- more --&gt;</code> 的写法分割 description 和全文，总感觉有点别扭；</li>\n<li>Pagination 分页与 <code class="notranslate">git-revision-date</code> 冲突，会引发构建错误 - 参考 <a href="https://github.com/squidfunk/mkdocs-material/discussions/6156" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6156/hovercard">mkdocs-material/discussions#6156</a></li>\n</ol>\n<h2 dir="auto">写博客</h2>\n<p dir="auto">有感于 Material for MkDocs 的博客结构，现在基本上可以实现使用 Discussions 进行 MkDocs blog 编辑与写作 —— 在 Discussions 上写完文章，借助第三方工具或者 GitHub Actions 导出为 Markdown 文件，保存到 <code class="notranslate">docs/blog/posts</code> 就可以啦！</p>\n<h2 dir="auto">加评论</h2>\n<p dir="auto">借助 <a href="https://giscus.app/zh-CN" rel="nofollow">giscus</a>，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：</p>\n<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;script src=&quot;https://giscus.app/client.js&quot;\n        data-repo=&quot;shenweiyan/Knowledge-Garden&quot;\n        data-repo-id=&quot;R_kgDOKgxWlg&quot;\n        data-mapping=&quot;number&quot;\n        data-term=&quot;4&quot;\n        data-reactions-enabled=&quot;1&quot;\n        data-emit-metadata=&quot;0&quot;\n        data-input-position=&quot;bottom&quot;\n        data-theme=&quot;light&quot;\n        data-lang=&quot;zh-CN&quot;\n        crossorigin=&quot;anonymous&quot;\n        async&gt;\n&lt;/script&gt;"><pre class="notranslate"><span class="pl-c1">&lt;</span><span class="pl-ent">script</span> <span class="pl-c1">src</span><span class="pl-c1">=</span><span class="pl-s">"https://giscus.app/client.js"</span>\n        <span class="pl-c1">data-repo</span><span class="pl-c1">=</span><span class="pl-s">"shenweiyan/Knowledge-Garden"</span>\n        <span class="pl-c1">data-repo-id</span><span class="pl-c1">=</span><span class="pl-s">"R_kgDOKgxWlg"</span>\n        <span class="pl-c1">data-mapping</span><span class="pl-c1">=</span><span class="pl-s">"number"</span>\n        <span class="pl-c1">data-term</span><span class="pl-c1">=</span><span class="pl-s">"4"</span>\n        <span class="pl-c1">data-reactions-enabled</span><span class="pl-c1">=</span><span class="pl-s">"1"</span>\n        <span class="pl-c1">data-emit-metadata</span><span class="pl-c1">=</span><span class="pl-s">"0"</span>\n        <span class="pl-c1">data-input-position</span><span class="pl-c1">=</span><span class="pl-s">"bottom"</span>\n        <span class="pl-c1">data-theme</span><span class="pl-c1">=</span><span class="pl-s">"light"</span>\n        <span class="pl-c1">data-lang</span><span class="pl-c1">=</span><span class="pl-s">"zh-CN"</span>\n        <span class="pl-c1">crossorigin</span><span class="pl-c1">=</span><span class="pl-s">"anonymous"</span>\n        <span class="pl-c1">async</span><span class="pl-c1">&gt;</span>\n<span class="pl-c1">&lt;</span><span class="pl-c1">/</span><span class="pl-ent">script</span><span class="pl-c1">&gt;</span></pre></div>\n<h2 dir="auto">自定义归档页面</h2>\n<p dir="auto"><a href="https://github.com/squidfunk/mkdocs-material">mkdocs-material</a> 的归档页面跟博客 index 主页面基本是一个样，如果想要列表式的自定义，可以参考 <a href="https://github.com/squidfunk/mkdocs-material/discussions/6324" data-hovercard-type="discussion" data-hovercard-url="/squidfunk/mkdocs-material/discussions/6324/hovercard">squidfunk/mkdocs-material#6324</a> 和 <a href="https://github.com/squidfunk/mkdocs-material/issues/6383" data-hovercard-type="issue" data-hovercard-url="/squidfunk/mkdocs-material/issues/6383/hovercard">squidfunk/mkdocs-material#6383</a>。</p>\n<p dir="auto">官方在 <a href="https://github.com/squidfunk/mkdocs-material-insiders/commit/8ecee7b9dbdc5b2a0befd043a048ad25d56c784f">8ecee7b</a> (Insiders) 中增加了几个个性化的新设置参数：</p>\n<ul dir="auto">\n<li><a href="https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.archive_pagination" rel="nofollow"><code class="notranslate">archive_pagination</code></a></li>\n<li><a href="https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.archive_pagination_per_page" rel="nofollow"><code class="notranslate">archive_pagination_per_page</code></a></li>\n<li><a href="https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.categories_pagination" rel="nofollow"><code class="notranslate">categories_pagination</code></a></li>\n<li><a href="https://squidfunk.github.io/mkdocs-material/plugins/blog/#config.categories_pagination_per_page" rel="nofollow"><code class="notranslate">categories_pagination_per_page</code></a></li>\n</ul>\n<p dir="auto">所以，等开放给公用版本使用后，可以再好好折腾一下。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '备用讨论', 'number': 35, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/35', 'createdAt': '2023-12-06T01:22:49Z', 'lastEditedAt': '2024-03-21T03:19:44Z', 'updatedAt': '2024-03-21T03:19:46Z', 'body': '备用讨论', 'bodyText': '备用讨论', 'bodyHTML': '<p dir="auto">备用讨论</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '博客与写作的一些思考', 'number': 34, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/34', 'createdAt': '2023-12-05T06:32:32Z', 'lastEditedAt': '2023-12-08T05:32:46Z', 'updatedAt': '2023-12-11T08:30:56Z', 'body': '关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。\r\n\r\n留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。\r\n\r\n<!-- more -->\r\n\r\n写作也好留言也罢，博客也只是一种实现的载体，语雀、博客园也是同样的道理，平台的选择虽然重要，但根本还是在于内容。\r\n\r\n每次看到人家一些内容翔实，界面优雅的博客，总要跟自己说，要忍住再去折腾博客的冲动，什么 UI，什么 CSS/HTML，都是浮云，内容才是核心，老老实实回归最简单的 Issues 和 Discussions 已经足够了。另外，需要知道的是，博客其实就是写给自己看的，什么 SEO 流量、关注度、知名度还是需要一颗随缘的心态。\r\n\r\n使用 Issues 当作博客也是挺不错的~\r\n\r\n- <https://github.com/Meekdai/Gmeek>\r\n- <https://github.com/yihong0618/gitblog>\r\n- <https://github.com/yutingzhao1991/github-blogs-collector>\r\n\r\n关于部分平台商业化的写作，有两点自认为讲的挺好：    \r\n\r\n- 商业化已经改变了写作的初衷。    \r\n- 当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。', 'bodyText': '关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。\n留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。\n\n写作也好留言也罢，博客也只是一种实现的载体，语雀、博客园也是同样的道理，平台的选择虽然重要，但根本还是在于内容。\n每次看到人家一些内容翔实，界面优雅的博客，总要跟自己说，要忍住再去折腾博客的冲动，什么 UI，什么 CSS/HTML，都是浮云，内容才是核心，老老实实回归最简单的 Issues 和 Discussions 已经足够了。另外，需要知道的是，博客其实就是写给自己看的，什么 SEO 流量、关注度、知名度还是需要一颗随缘的心态。\n使用 Issues 当作博客也是挺不错的~\n\nhttps://github.com/Meekdai/Gmeek\nhttps://github.com/yihong0618/gitblog\nhttps://github.com/yutingzhao1991/github-blogs-collector\n\n关于部分平台商业化的写作，有两点自认为讲的挺好：\n\n商业化已经改变了写作的初衷。\n当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。', 'bodyHTML': '<p dir="auto">关于写作原本的想法，只是想写点自己在学习、工作、生活上的一些心得和体会，把一些知识点记录下来。</p>\n<p dir="auto">留言的初衷是，希望自己写下来的东西能够有人一起探讨。哪怕你把我的观点批评得一无是处也可以，哪怕你说我的句子狗屁不通也没关系，只要有评判，我相信总有一天我会变得更好。</p>\n\n<p dir="auto">写作也好留言也罢，博客也只是一种实现的载体，语雀、博客园也是同样的道理，平台的选择虽然重要，但根本还是在于内容。</p>\n<p dir="auto">每次看到人家一些内容翔实，界面优雅的博客，总要跟自己说，要忍住再去折腾博客的冲动，什么 UI，什么 CSS/HTML，都是浮云，内容才是核心，老老实实回归最简单的 Issues 和 Discussions 已经足够了。另外，需要知道的是，博客其实就是写给自己看的，什么 SEO 流量、关注度、知名度还是需要一颗随缘的心态。</p>\n<p dir="auto">使用 Issues 当作博客也是挺不错的~</p>\n<ul dir="auto">\n<li><a href="https://github.com/Meekdai/Gmeek">https://github.com/Meekdai/Gmeek</a></li>\n<li><a href="https://github.com/yihong0618/gitblog">https://github.com/yihong0618/gitblog</a></li>\n<li><a href="https://github.com/yutingzhao1991/github-blogs-collector">https://github.com/yutingzhao1991/github-blogs-collector</a></li>\n</ul>\n<p dir="auto">关于部分平台商业化的写作，有两点自认为讲的挺好：</p>\n<ul dir="auto">\n<li>商业化已经改变了写作的初衷。</li>\n<li>当写文章变成盈利的手段，那么，写出来的东西是没有灵魂的。</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '博客'}]}, 'comments': {'nodes': [{'body': '自娱自乐的小树洞，我也是', 'author': {'login': 'obaby'}}]}}, {'title': '使用 meta 实现页面的定时刷新或跳转', 'number': 33, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/33', 'createdAt': '2023-12-05T03:25:01Z', 'lastEditedAt': '2024-02-29T01:26:02Z', 'updatedAt': '2024-02-29T01:26:02Z', 'body': '这个方法最开始是在 [Linlin Yan (颜林林)](https://github.com/yanlinlin82) 的 GitHub Pages 上第一次看到。后来，随着自己也用上了，就开始有了更深一些的认识。\r\n\r\n<!-- more -->\r\n\r\n## 跳转域名\r\n\r\n在 [yanlinlin82/yanlinlin82.github.io](https://github.com/yanlinlin82/yanlinlin82.github.io/tree/master) 看到一个通过 <https://yanlinlin82.github.io> 可以直接重定向到 <https://yanlinlin.cn/> 的用法 —— 只需要把 `index.html` 写成这样就可以：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head><meta http-equiv="refresh" content="0; url=https://yanlinlin.cn/"></head>\r\n  <body></body>\r\n</html>\r\n```\r\n\r\n## 页面定时跳转与刷新\r\n\r\n这部分的内容主要来源自：《[小tip: 使用meta实现页面的定时刷新或跳转](https://www.zhangxinxu.com/wordpress/2015/03/meta-http-equiv-refresh-content/)》。\r\n\r\n> ### meta 源信息功能之页面定时跳转与刷新\r\n> \r\n> 几乎所有的网页头部都有`<meta>`源信息。除了我们常用的定义编码、关键字(name=”keywords”)、描述(name=”description”)(for SEO)，还可以定义视区大小、缩放比例等(for 移动端)，如下：\r\n> \r\n> ```\r\n> <meta name="viewport" content="width=device-width,initial-scale=1.0">\r\n> ```\r\n> \r\n> 以及，定义网页的过期时间，Cookie 的过期时间等等。\r\n> \r\n> 文本要介绍的内容，科科，跟上面都没关系。哦，抱歉，都有关系，只是名称我故意没提到。主角嘛，总要最后闪亮登场！\r\n> \r\n> 就是我们网页平时跳转，还可以使用 `<meta>` 实现，下面几个典型代码示例：    \r\n> ```html    \r\n> <meta http-equiv="refresh" content="5">\r\n> ```\r\n> 这个表示当前页面每5秒钟刷一下，刷一下~\r\n> \r\n> ```html\r\n> <meta http-equiv="refresh" content="2; url=\'/\'">\r\n> ```\r\n> 这个表示当前页面2秒后跳到首页~    \r\n> \r\n> ```html\r\n> <meta http-equiv="refresh" content="0; url=\'http://www.qq.com/\'">\r\n> ```\r\n> 页面直接跳转到腾讯网~\r\n> \r\n> 所以，当我们下次遇到“登录成功，正在跳转到您之前访问页面……”的时候，可以使用`<meta>`的这个`refresh`刷新，跳转功能，可以说是成本最低的。    \r\n>   \r\n> 您可以狠狠地点击这里：[meta与当前页面定时刷新Demo](http://www.zhangxinxu.com/study/201503/meta-fresh-content.html)     \r\n> ![meta-refresh](https://shub.weiyan.tech/kgarden/2024/01/meta-refresh.37epe9yaam80.png)\r\n> \r\n> 上面 Demo 效果就是上面第1个示例代码效果。        \r\n> \r\n> 根据我的测试，此特性包括IE7在内的浏览器都是支持的。    \r\n> \r\n> ### 问题来了：为何 meta 跳转不火呢？\r\n> \r\n> 大家可以看到，`meta` 跳转，使用方便，不用写 JS，不用会后台代码，定时跳转刷新什么的玩得照样很溜，而且兼容性好，为啥总感觉不温不火，很少看见有人提及呢？    \r\n> \r\n> 新晋的小伙伴不知有没有听过这么一个词，叫做“万恶的IE6年代”。\r\n> \r\n> 据说，当年，这一批老旧的浏览器，问题很多，其中就有对`meta` 两个小小的不友好。我也是听说，不一定准确。坊间是这么传闻的：    \r\n> \r\n> - 时间设为0的跳转，有时候页面会闪一下；    \r\n> - 跳转到其他页面，浏览器后退按钮是不能用的；     \r\n> \r\n> 但是啊，现在是什么年代啊，监狱风云都拍到第二季了，这些老问题，我觉得就可以忽略不计了。    \r\n> \r\n> 不妨大胆试试 `meta` 跳转，好好利用下浏览器的原生特性，说不定就会发现比什么 JS 跳转之流用得更开心。\r\n\r\n所以，在文章的最后有一个小想法 —— 我们是不是也可以利用这个方法实现无数个链接 301 重定向( URL 转发)，再也不需要担心是否需要主机+Nginx 之类！\r\n', 'bodyText': '这个方法最开始是在 Linlin Yan (颜林林) 的 GitHub Pages 上第一次看到。后来，随着自己也用上了，就开始有了更深一些的认识。\n\n跳转域名\n在 yanlinlin82/yanlinlin82.github.io 看到一个通过 https://yanlinlin82.github.io 可以直接重定向到 https://yanlinlin.cn/ 的用法 —— 只需要把 index.html 写成这样就可以：\n<!DOCTYPE html>\n<html>\n  <head><meta http-equiv="refresh" content="0; url=https://yanlinlin.cn/"></head>\n  <body></body>\n</html>\n页面定时跳转与刷新\n这部分的内容主要来源自：《小tip: 使用meta实现页面的定时刷新或跳转》。\n\nmeta 源信息功能之页面定时跳转与刷新\n几乎所有的网页头部都有<meta>源信息。除了我们常用的定义编码、关键字(name=”keywords”)、描述(name=”description”)(for SEO)，还可以定义视区大小、缩放比例等(for 移动端)，如下：\n<meta name="viewport" content="width=device-width,initial-scale=1.0">\n\n以及，定义网页的过期时间，Cookie 的过期时间等等。\n文本要介绍的内容，科科，跟上面都没关系。哦，抱歉，都有关系，只是名称我故意没提到。主角嘛，总要最后闪亮登场！\n就是我们网页平时跳转，还可以使用 <meta> 实现，下面几个典型代码示例：\n<meta http-equiv="refresh" content="5">\n这个表示当前页面每5秒钟刷一下，刷一下~\n<meta http-equiv="refresh" content="2; url=\'/\'">\n这个表示当前页面2秒后跳到首页~\n<meta http-equiv="refresh" content="0; url=\'http://www.qq.com/\'">\n页面直接跳转到腾讯网~\n所以，当我们下次遇到“登录成功，正在跳转到您之前访问页面……”的时候，可以使用<meta>的这个refresh刷新，跳转功能，可以说是成本最低的。\n您可以狠狠地点击这里：meta与当前页面定时刷新Demo\n\n上面 Demo 效果就是上面第1个示例代码效果。\n根据我的测试，此特性包括IE7在内的浏览器都是支持的。\n问题来了：为何 meta 跳转不火呢？\n大家可以看到，meta 跳转，使用方便，不用写 JS，不用会后台代码，定时跳转刷新什么的玩得照样很溜，而且兼容性好，为啥总感觉不温不火，很少看见有人提及呢？\n新晋的小伙伴不知有没有听过这么一个词，叫做“万恶的IE6年代”。\n据说，当年，这一批老旧的浏览器，问题很多，其中就有对meta 两个小小的不友好。我也是听说，不一定准确。坊间是这么传闻的：\n\n时间设为0的跳转，有时候页面会闪一下；\n跳转到其他页面，浏览器后退按钮是不能用的；\n\n但是啊，现在是什么年代啊，监狱风云都拍到第二季了，这些老问题，我觉得就可以忽略不计了。\n不妨大胆试试 meta 跳转，好好利用下浏览器的原生特性，说不定就会发现比什么 JS 跳转之流用得更开心。\n\n所以，在文章的最后有一个小想法 —— 我们是不是也可以利用这个方法实现无数个链接 301 重定向( URL 转发)，再也不需要担心是否需要主机+Nginx 之类！', 'bodyHTML': '<p dir="auto">这个方法最开始是在 <a href="https://github.com/yanlinlin82">Linlin Yan (颜林林)</a> 的 GitHub Pages 上第一次看到。后来，随着自己也用上了，就开始有了更深一些的认识。</p>\n\n<h2 dir="auto">跳转域名</h2>\n<p dir="auto">在 <a href="https://github.com/yanlinlin82/yanlinlin82.github.io/tree/master">yanlinlin82/yanlinlin82.github.io</a> 看到一个通过 <a href="https://yanlinlin82.github.io" rel="nofollow">https://yanlinlin82.github.io</a> 可以直接重定向到 <a href="https://yanlinlin.cn/" rel="nofollow">https://yanlinlin.cn/</a> 的用法 —— 只需要把 <code class="notranslate">index.html</code> 写成这样就可以：</p>\n<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=https://yanlinlin.cn/&quot;&gt;&lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;"><pre class="notranslate"><span class="pl-c1">&lt;!DOCTYPE html<span class="pl-kos">&gt;</span></span>\n<span class="pl-kos">&lt;</span><span class="pl-ent">html</span><span class="pl-kos">&gt;</span>\n  <span class="pl-kos">&lt;</span><span class="pl-ent">head</span><span class="pl-kos">&gt;</span><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">http-equiv</span>="<span class="pl-s">refresh</span>" <span class="pl-c1">content</span>="<span class="pl-s">0; url=https://yanlinlin.cn/</span>"<span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">head</span><span class="pl-kos">&gt;</span>\n  <span class="pl-kos">&lt;</span><span class="pl-ent">body</span><span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">body</span><span class="pl-kos">&gt;</span>\n<span class="pl-kos">&lt;/</span><span class="pl-ent">html</span><span class="pl-kos">&gt;</span></pre></div>\n<h2 dir="auto">页面定时跳转与刷新</h2>\n<p dir="auto">这部分的内容主要来源自：《<a href="https://www.zhangxinxu.com/wordpress/2015/03/meta-http-equiv-refresh-content/" rel="nofollow">小tip: 使用meta实现页面的定时刷新或跳转</a>》。</p>\n<blockquote>\n<h3 dir="auto">meta 源信息功能之页面定时跳转与刷新</h3>\n<p dir="auto">几乎所有的网页头部都有<code class="notranslate">&lt;meta&gt;</code>源信息。除了我们常用的定义编码、关键字(name=”keywords”)、描述(name=”description”)(for SEO)，还可以定义视区大小、缩放比例等(for 移动端)，如下：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;"><pre class="notranslate"><code class="notranslate">&lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt;\n</code></pre></div>\n<p dir="auto">以及，定义网页的过期时间，Cookie 的过期时间等等。</p>\n<p dir="auto">文本要介绍的内容，科科，跟上面都没关系。哦，抱歉，都有关系，只是名称我故意没提到。主角嘛，总要最后闪亮登场！</p>\n<p dir="auto">就是我们网页平时跳转，还可以使用 <code class="notranslate">&lt;meta&gt;</code> 实现，下面几个典型代码示例：</p>\n<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5&quot;&gt;"><pre class="notranslate"><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">http-equiv</span>="<span class="pl-s">refresh</span>" <span class="pl-c1">content</span>="<span class="pl-s">5</span>"<span class="pl-kos">&gt;</span></pre></div>\n<p dir="auto">这个表示当前页面每5秒钟刷一下，刷一下~</p>\n<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;2; url=\'/\'&quot;&gt;"><pre class="notranslate"><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">http-equiv</span>="<span class="pl-s">refresh</span>" <span class="pl-c1">content</span>="<span class="pl-s">2; url=\'/\'</span>"<span class="pl-kos">&gt;</span></pre></div>\n<p dir="auto">这个表示当前页面2秒后跳到首页~</p>\n<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=\'http://www.qq.com/\'&quot;&gt;"><pre class="notranslate"><span class="pl-kos">&lt;</span><span class="pl-ent">meta</span> <span class="pl-c1">http-equiv</span>="<span class="pl-s">refresh</span>" <span class="pl-c1">content</span>="<span class="pl-s">0; url=\'http://www.qq.com/\'</span>"<span class="pl-kos">&gt;</span></pre></div>\n<p dir="auto">页面直接跳转到腾讯网~</p>\n<p dir="auto">所以，当我们下次遇到“登录成功，正在跳转到您之前访问页面……”的时候，可以使用<code class="notranslate">&lt;meta&gt;</code>的这个<code class="notranslate">refresh</code>刷新，跳转功能，可以说是成本最低的。</p>\n<p dir="auto">您可以狠狠地点击这里：<a href="http://www.zhangxinxu.com/study/201503/meta-fresh-content.html" rel="nofollow">meta与当前页面定时刷新Demo</a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ca51cb76ee4e23430ee9ee3fdb98c372b629fdeb0d1c23d2c796c98d5f0a6df0/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6574612d726566726573682e3337657065397961616d38302e706e67"><img src="https://camo.githubusercontent.com/ca51cb76ee4e23430ee9ee3fdb98c372b629fdeb0d1c23d2c796c98d5f0a6df0/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032342f30312f6d6574612d726566726573682e3337657065397961616d38302e706e67" alt="meta-refresh" data-canonical-src="https://shub.weiyan.tech/kgarden/2024/01/meta-refresh.37epe9yaam80.png" style="max-width: 100%;"></a></p>\n<p dir="auto">上面 Demo 效果就是上面第1个示例代码效果。</p>\n<p dir="auto">根据我的测试，此特性包括IE7在内的浏览器都是支持的。</p>\n<h3 dir="auto">问题来了：为何 meta 跳转不火呢？</h3>\n<p dir="auto">大家可以看到，<code class="notranslate">meta</code> 跳转，使用方便，不用写 JS，不用会后台代码，定时跳转刷新什么的玩得照样很溜，而且兼容性好，为啥总感觉不温不火，很少看见有人提及呢？</p>\n<p dir="auto">新晋的小伙伴不知有没有听过这么一个词，叫做“万恶的IE6年代”。</p>\n<p dir="auto">据说，当年，这一批老旧的浏览器，问题很多，其中就有对<code class="notranslate">meta</code> 两个小小的不友好。我也是听说，不一定准确。坊间是这么传闻的：</p>\n<ul dir="auto">\n<li>时间设为0的跳转，有时候页面会闪一下；</li>\n<li>跳转到其他页面，浏览器后退按钮是不能用的；</li>\n</ul>\n<p dir="auto">但是啊，现在是什么年代啊，监狱风云都拍到第二季了，这些老问题，我觉得就可以忽略不计了。</p>\n<p dir="auto">不妨大胆试试 <code class="notranslate">meta</code> 跳转，好好利用下浏览器的原生特性，说不定就会发现比什么 JS 跳转之流用得更开心。</p>\n</blockquote>\n<p dir="auto">所以，在文章的最后有一个小想法 —— 我们是不是也可以利用这个方法实现无数个链接 301 重定向( URL 转发)，再也不需要担心是否需要主机+Nginx 之类！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': '2022 年的十大生物学突破', 'number': 32, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/32', 'createdAt': '2023-12-01T03:39:00Z', 'lastEditedAt': None, 'updatedAt': '2024-01-04T05:45:16Z', 'body': '> **作者 |** [Niko McCarty](https://substack.com/profile/11154869-niko-mccarty)    \r\n> **翻译 |** [章鱼猫先生](https://www.yuque.com/shenweiyan)    \r\n> **日期 |** 原文发表于 2022.12.10    \r\n> **来源 |** [Biology Breakthroughs of 2022](https://cell.substack.com/p/biology-breakthroughs-2022) - Codon    \r\n\r\n> 您正在阅读 Codon，这是一份关于生物 + 技术进步和为人类创造更光明未来的想法的时事通讯。    \r\n> 这是今年的最后一部作品。几周后我会在这里见到你！    \r\n\r\n<!-- more -->\r\n\r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-1.webp" alt><br>\r\n    <em>大约 1950 年代，戴着加压氧气面罩的男子</em>\r\n</p>\r\n\r\n> "当你经历历史时，历史永远不会像历史。它总是看起来很混乱和凌乱，而且总是让人感觉不舒服。"    \r\n> —— 约翰·W·加德纳\r\n\r\n许多我非常敬佩的作家都对“进步的停滞”写出了令人信服的论战。科学越来越难，发现越来越小（平均而言），这两件事都很糟糕。\r\n\r\n如果你召集来自世界顶级院系的 93 位物理学家，让他们将 1910 年代获得诺贝尔奖的发现与 80 年代的另一个发现进行比较，他们通常会说更早的发现更重要。\r\n\r\n与五十年前相比，今天实现技术飞跃也更加困难。将计算机芯片上的晶体管数量增加一倍（又名摩尔定律）需要的研究人员数量是 1970 年代初期的 [18 倍](https://www.aeaweb.org/articles?id=10.1257/aer.20180338)。今天发表的学术论文被美国专利引用的可能性不到 30 年前发表的论文的[一半](https://mattsclancy.substack.com/p/science-is-getting-harder)。\r\n\r\n这些不断缩减的回报正处于历史高位之中。\r\n\r\n美国每年授予超过 50,000 个科学和工程博士学位；这个数字在 1960 年还不到 10,000。联邦对科学的资助也（基本上）处于历史最高水平。科学论文的总数呈指数级增长，但每篇论文的平均作者人数在过去一百年里大约翻了两番。\r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-2.jpeg" alt><br>\r\n    <em>From "The Science of Science" by <a href="https://www.dashunwang.com/book/the-science-of-science">Wang and Barabási</a>.</em>\r\n</p>\r\n\r\n出于某种原因，这些都是生物学进步的不完美指标。但是有很多零散的证据表明，科学正在变得越来越不划算，即使感觉进步从未像现在这样快。我相信——基于轶事证据，真的——如果以每年获得诺贝尔奖的发现为基准，生物技术不会停滞不前。只是诺贝尔奖每年都会颁发一次，而且不乏令人惊叹的论文在排队等待获得最高奖项。所以，当然，并不是每个有价值的人都会赢。\r\n\r\n哦，如果你拿我之前提到的物理学调查结果，对医学和化学做同样的实验，结果就会颠倒过来——20 世纪下半叶发现的相对重要性超过了上半叶。\r\n\r\n不管停滞与否，生物学都存在巨大的低效率。它可以——应该！- 移动得更快。\r\n\r\n许多论文需要一年多的时间才能发表，在期刊官僚的严密监视下，被搁置在数字化的边缘。漫长的等待可能也不值得——同行评审通常是无用的，而且很多糟糕的科学无论如何都能通过。许多伟大的想法也从来没有发表在论文上，因为，好吧，他们从来没有得到资助。NIH 拨款审查非常不一致。如果您向 43 位不同的审稿人提供 25 份拨款建议，他们的评定者间可靠性（衡量分数一致性的指标）基本上为零，即使拨款已经获得资金和先前评审小组的高分！给予相同审稿人的无资金资助与有资金资助的资助得分一样。\r\n\r\n那么生物学文献呢？那也是一团糟。山姆·罗德里克斯 ([Sam Rodriques](https://www.sam-rodriques.com/post/why-is-progress-in-biology-so-slow)) 在最近的一篇文章中写道，科学论文“因委托而变得不可靠”，并且“因遗漏而变得不可靠”。换句话说，一些研究（一小部分）只是编造的。教授或学生为了发表论文而捏造数字，如果有人说他们在胡说八道，编辑可能要过[好几年](https://newscience.substack.com/p/laws-of-science)才会撤稿。\r\n\r\n不过，更大的问题可能是疏忽。科学期刊喜欢发表积极的结果，所以大多数消极的发现永远不会出现在光鲜的期刊上。如果有人进行的实验表明药物 A 与受体 B 结合，他们会发表它——但忽略提及药物 A 不会通过 Z 与受体 C 结合。无效结果很少传给科学家，他们中的许多人已经几个月来一次又一次尝试实验的痛苦经历，后来才发现 1970 年代的一篇不起眼的论文使他们所有的努力都变得毫无意义。\r\n\r\n我告诉你这些悲伤的事情——停滞不前的科学和可怕的低效率的故事——是为了说明一个观点：**生物学在去年取得了如此大的进步，真是令人惊讶**。生物学的进步证明了人类渴望探索、失败，然后继续前进的愿望。这份时事通讯庆祝人类的成就，并重点介绍了过去 12 个月**生物学领域的十大进步**。\r\n\r\n此列表中的所有内容均来自 Codon 的上一期，因此希望您能在评论中指出我的错误和遗漏。我的入选标准很简单：该列表仅包括 2022 年期间发布到 bioRxiv 或发表在期刊上的论文。我不包括公司成就——这实际上可能是它自己的列表——除非他们发布了数据。(入选)列表中的一些项目包括了多篇论文，因为整个子领域发展得非常快。\r\n\r\n汇总“十佳排名”最大的危险是完全主观的，有很多优秀的东西没有入选，而且很多其他作家已经做到了(虽然我还没有看到专门针对生物学的清单)。诺亚·史密斯 (Noah Smith) 发布了他 2023 年的技术乐观主义清单 ([techno-optimism list](https://noahpinion.substack.com/p/techno-optimism-for-2023))，其中包括对生物技术的简要提及，而《大西洋月刊》(The Atlantic) 发表了他们的 "年度突破 ([breakthroughs of the year](https://www.theatlantic.com/newsletters/archive/2022/12/technology-medicine-law-ai-10-breakthroughs-2022/672390/))"，然后立即将该文章设置为付费文章。\r\n\r\n然而，有必要专门为生物学列出一份完整的榜单，因为很多伟大的事情在人工智能的阴影下被忽略了。人类基因组计划（始于 1990 年）终于在[今年完成了](https://www.science.org/toc/science/376/6588)，一个庞大的科学家团队填补了最后 8% 的序列空白。科学家们还使用 mirror-image DNA 聚合酶制作了镜像 DNA ([mirror-image DNA](https://www.nature.com/articles/s41587-022-01337-8))，并发现了一类新的 CRISPR 蛋白质，它们可以[剪切蛋白质](https://cell.substack.com/p/crispr-can-cut-proteins-too-index)而不是基因。机器学习正在蛋白质工程中掀起波澜，例如有一种基于算法被设计出来的酶，这种酶可以比自然界中发现的任何酶更快地[分解 PET 塑料](https://cell.substack.com/p/ai-designed-enzyme-eats-plastic)。\r\n\r\n我不确定今年的进展是否与生物进展是否整体停滞不前有关。但有一件事是不变的：生物学变得越来越奇怪，而我会一直关注它。\r\n\r\n### 10. 走向合成细胞\r\n\r\n从纯化学成分构建合成细胞是生物学的圣杯。如果实现了这一壮举，将证明我们已足够详细地理解生命运作的大体轮廓，并有足够的细节可以在实验室中重现它。这也将成为定制细胞的起点，这些细胞可以检测有毒污染或制造药物，同时又不会成为生物安全风险或存在感染风险。\r\n\r\n今年有几篇论文推动了合成细胞的发展，但其中有两篇让人印象深刻。第一篇是在 bioRxiv 上发表的预印本，据称是**首次证明核糖体**（大分子蛋白质，负责合成其他蛋白质）**可以在活细胞之外制造**。这是在合成细胞内从头生产蛋白质的重要起点。\r\n\r\n我们还在合成细胞分裂方面取得了重要进展。一项研究报告说，仅使用五种蛋白质就可以在脂肪泡中制造合成分裂环！当这些蛋白质聚集在一起时，它们会收缩并向气泡施加力（下面的 GIF）。    \r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-3.webp" alt><br>\r\n    <em>合成分裂环在气泡内形成的延时摄影</em>\r\n</p>\r\n\r\n### 9. 更好的碱基编辑器\r\n\r\n早在 2016 年，《自然》杂志的一篇论文就报道了第一个碱基编辑蛋白，它可以将 DNA 中的 "C" 替换为 "T"，而无需将基因组一分为二。它的重要性立即显而易见——许多严重的遗传疾病是由 DNA 中的单个碱基交换引起的，现在这些突变可以被修复。\r\n\r\n碱基编辑器已经成熟。这些基因编辑蛋白在发明后仅仅五年就以创纪录的速度进入临床试验，目前 Verve、Beam 和其他公司正在进行针对镰状细胞病、高胆固醇和 Stargardt 病的[试验](https://www.nature.com/articles/d41573-022-00124-z)。\r\n\r\n然而，碱基编辑的主要挑战之一是编辑线粒体基因组很棘手，[许多遗传疾病](https://www.chop.edu/conditions-diseases/mitochondrial-dna-common-mutation-syndromes)都源于此。早在 2020 年，[一篇论文](https://www.nature.com/articles/s41586-020-2477-4)就表明碱基编辑器可以成功进入线粒体并使 "C" 变为 "T"，但其前景并不乐观。今年 5 月，[一篇后续论文](https://www.nature.com/articles/s41586-022-04836-5)称，实际上，这些线粒体基因编辑器诱发了 "大量" 脱靶突变，这意味着它们编辑的位置比预期的要多，弊大于利。\r\n\r\n但创新不会因失败而受阻。仅今年一年就至少发表了**三篇论文**，使线粒体碱基编辑器变得[更小](https://www.nature.com/articles/s41467-022-34784-7)或[更准确](https://doi.org/10.1016/j.cell.2022.03.039)。让碱基编辑酶进入线粒体或编辑其 DNA 从未如此简单。我相信我们很快就会看到一些针对线粒体相关疾病的临床试验。\r\n\r\n### 8. 噬菌体传播病毒\r\n\r\n今年对噬菌体来说是个好年头。这真的很合适，因为它也是 Felix d\'Herelle 著名实验 **100 周年纪念日**。1922 年，这位巴黎微生物学家证明噬菌体（感染细菌的小病毒）[可以根除](https://jamanetwork.com/journals/jamapediatrics/article-abstract/1173780)兔子和小动物体内的 "痢疾杆菌和其他杆菌"。\r\n\r\n我们现在正经历着临床疗法的准复兴时期，噬菌体经常被用来消除抗生素无效的感染（尤其是在欧洲医院）。几周前，一个欧洲科学家团队使用实验性噬菌体疗法[挽救了一名幼儿的生命](https://www.nature.com/articles/s41467-022-33294-w)。器官移植后，这个小男孩感染了抗生素无法清除的耐药性感染。在用定制的噬菌体鸡尾酒 (a custom-made phage cocktail) 治疗两年多后，孩子在家中恢复了健康。\r\n\r\n5 月，丹佛的一个团队使用噬菌体治疗一名患有严重囊性纤维化的男孩的脓肿分枝杆菌感染。噬菌体将感染控制了一年多，直到获得供体肺。我相信我们会在 2023 年看到定制噬菌体疗法进入临床。    \r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-4.png" alt><br>\r\n</p>\r\n\r\n\r\n### 7. 血友病基因疗法\r\n\r\n[Hemgenix](https://www.fda.gov/vaccines-blood-biologics/vaccines/hemgenix) 是一种治疗 B 型血友病的基因疗法，几个月前获得了 FDA 的批准。它的价格达到了 350 万美元，使其成为有史以来最昂贵的药物（这并不好）。根据 III 期临床试验数据，它在患者的是安全有效期[至少两年](https://hemophilianewstoday.com/news/hemgenix-gene-therapy-benefits-sustained-2-years-phase-3-hope-b/)。\r\n\r\n血友病 A 的基因治疗进展缓慢，该病由一种名为 VIII 的不同凝血蛋白突变引起。5 月的一项研究表明，针对肝脏的基因疗法在非人类灵长类动物中效果很好，可以导致 "总凝血因子 VIII 输出增加 10 倍以上"。3 月份发表的一项有 134 名参与者参与的 I/II 期临床试验表明，使用腺相关病毒进行的基因疗法，也用于肝脏，可减少血友病患者的出血事件。但是，它带来了很多副作用；每个试验参与者至少有一次不良事件。尽管如此，血友病仍是基因治疗的 "低悬" 目标之一，这些试验是其他正在进行中的目标的有用酸性测试。\r\n\r\n### 6. 合成胚胎\r\n\r\n今年，从老鼠身上采集的干细胞被用来制造 "类胚胎结构"，其中包含工作的肠道、跳动的心脏和头脑的雏形，而不需要精子或卵子。\r\n\r\n以色列的 Jacob Hanna 团队发表了一篇最初的论文，于 8 月[在 Cell 上发表](https://doi.org/10.1016/j.cell.2022.07.028)。据《卫报》报道，这些作者后来成立了一家名为 Renewal Bio 的[公司](https://www.theguardian.com/science/2022/aug/03/scientists-create-worlds-first-synthetic-embryos)，"旨在培养人类合成胚胎，为医疗条件提供组织和细胞"。剑桥大学和加州理工学院的一个团队也在 8 月 2 日发布了一份[预印本](https://doi.org/10.1101/2022.08.01.502371)，表明这些 "合成胚胎"准确地概括了 "从胚胎第 5.5 天到第 8.5 天的发育事件，包括原肠胚形成、前后轴的形成、大脑，跳动的心脏结构，以及胚胎外组织（包括卵黄囊和绒毛膜）的发育。"\r\n\r\n合成胚胎——正确形成的概率只有 0.5% 左右——有几个潜在的用途。例如，这些结构可以用于研究器官在发育过程中的形成，也可用于在不使用真实胚胎的情况下测试药物。    \r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-5.png" alt><br>\r\n    <em>Embryoids after six days. From Kasey Lau et al. on bioRxiv. <a href="https://www.biorxiv.org/content/10.1101/2022.08.01.502371v1.full.pdf">Link</a></em>\r\n</p>\r\n\r\n### 5. 细胞重编程\r\n\r\n今年的一大亮点：首次证明仅靠化学物质就能将人体细胞[重新编程为干细胞](https://www.nature.com/articles/s41586-022-04593-5)。这一突破需要十多年的时间，并需使用 11 种不同的化学物质，以及一到两个月的工作时间，所以仍需要一些微调。早在 2013 年，同一个小组就已使用这种方法实现了[小鼠细胞](https://www.science.org/doi/10.1126/science.1239278)的转化，但人类细胞的转化过程要困难得多。\r\n\r\n这也不是第一项重新编程人类细胞的研究。这一荣誉属于山中伸弥 (Shinya Yamanaka)，他在 2006 年通过表达四种蛋白质（现在著名的 "Yamanaka 因子"）对 iPS 细胞进行了重编程。在随后的几十年中，其他研究小组使用病毒或 mRNA 对细胞进行重编程。但这种仅使用化学物质的方法脱颖而出，因为它在体外使用简单，而且化学混合物可以通过静脉注射输送到体内——不需要基因编辑。该方法提供了一种相对简单的工具来生成可用于再生医学的人类多能干细胞。\r\n\r\n### 4. 植物更容易设计\r\n\r\n我们生活在人类世，这是人类历史上一个可怕的时刻，**人造材料的重量超过地球上所有的生物量**，而且重量每年都在继续增加一倍。    \r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-6.webp" alt><br>\r\n    <em>"Global human-made mass exceeds all living biomass," by Elhacham E et al. in Nature. <a href="https://www.nature.com/articles/s41586-020-3010-5">Link</a></em>\r\n</p>\r\n\r\n在我们现有的生物质中，据估计有 83% 由植物持有。如果我们想要走出这场行星垃圾场的困境，那么，那么我们可能不得不对植物进行工程改造：让它们捕获更多的碳，[增强它们的光合作用](https://cell.substack.com/p/hacking-photosynthesis)，种植生产更多的食物，等等！\r\n\r\n幸运的是，做到这一点从未如此简单。几十年来，合成生物学家已经对细菌和哺乳动物细胞进行了改造，使其具有越来越复杂的遗传回路，即使植物在很大程度上被忽视了。今年，两项重要进展改变了平衡。\r\n\r\n先是基因编辑技术，如 CRISPR，现在已经过优化，可以在植物中更好地发挥作用。例如，Prime 编辑器是可以插入、删除或交换 DNA 的 "搜索和替换" 基因编辑器。与其他 Prime 编辑器相比，新的 Plant Prime Editor 在植物细胞中的效率提高了 [3.4 倍](https://www.nature.com/articles/s41587-022-01254-w)，并被用于在实验室中迅速使水稻植物对除草剂产生耐受性。\r\n\r\n但更大的进步是：斯坦福大学的一个团队发布了[一个完整的基因工具包](https://www.science.org/doi/10.1126/science.abo4326)，可以像我们对细菌进行编程一样对植物进行 "编程"。新工具包包括大量合成启动子和转录因子，可用于控制植物中的基因表达。这些遗传部分被用于构建能够在本塞姆氏烟草和拟南芥中进行布尔逻辑运算的基因回路。作者还建立了逻辑门，可以控制植物根部的基因表达水平，从而控制它们的侧向密度。\r\n\r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-7.jpeg" alt><br>\r\n    <em>A genetic circuit controls how many lateral roots shoot out from a plant’s roots. Lateral density increases from left to right, with a wildtype plant shown on the far right. From <a href="https://www.biorxiv.org/content/10.1101/2022.02.02.478917v1">Brophy et al. on bioRxiv</a>.</em>\r\n</p>\r\n\r\n### 3. 走向负碳\r\n\r\n生物学的一个众所周知的困难部分是难以扩展（进行大规模的研究）。在试管中改造一个能将糖转化为抗癌药物的细胞是一回事，但在一个千升生物反应器中做同样的事却是完全不同的挑战。\r\n\r\n这就是像 [LanzaTech](https://lanzatech.com/) 这样的公司令人兴奋的原因。他们实际上已经在工业工厂扩大了生物学规模。他们有试点设施，将工厂的废碳回收成燃料和化学品。这些工厂每年可以生产数千亿加仑的燃料，并且已经达到相当于每年减少数千辆汽车上路的排放量。\r\n\r\n几个月前，来自 LanzaTech 和西北大学的科学家们达到了[另一个里程碑](https://www.nature.com/articles/s41587-021-01195-w)：使用一种名为 Clostridium autoethanogenum 的工程自养生物，他们在具有负碳足迹的过程中以工业规模生产丙酮和异丙醇。 "与导致温室气体释放的传统生产过程不同，我们的过程可以固定碳，" 他们在发表的论文中写道。这是大规模生物学向前迈出的一大步。经过改造的微生物可以在不拖累大气的情况下改善污染物并产生化学物质。\r\n\r\n### 2. 异种移植成为现实\r\n\r\n这将作为 "异种移植年" 载入人类史册。异种移植的历史可以追溯到 20 世纪 60 年代中期——法国外科医生勒内·库斯 (Renè Kuss) 将猪肾移植到人体中，结果很快被患者的身体排斥——异种移植一直是一个失败的领域。最著名的例子可能是 80 年代 Stephanie Beauclair 或 Baby Fae 的手术，她从狒狒那里接受了一颗心脏，但不久后就去世了。\r\n\r\n不过，在过去四十年里，我们在从猪身上提取心脏并将其植入人体方面做得更好，因为基因编辑技术正在改进。现在比以往任何时候都更容易在猪的细胞中找到所有导致我们的身体排斥该器官的有害蛋白质，并从基因组中[系统地消除](https://www.science.org/doi/10.1126/science.aad1191)这些蛋白质编码基因。但进步从来都不是没有陷阱的。\r\n\r\n今年 1 月 7 日，马里兰大学的一组外科医生将[一颗猪的心脏移植](https://www.technologyreview.com/2022/01/11/1043374/gene-edited-pigs-heart-transplant/)到 57 岁的老大卫贝内特体内，[两个月后](https://www.technologyreview.com/2022/05/04/1051725/xenotransplant-patient-died-received-heart-infected-with-pig-virus/)他去世了。\r\n\r\n5 月，两只猪的肾脏被移植到脑死亡患者体内，并进行了 54 小时的监测，这让沮丧过后变得乐观起来。两个肾脏都产生了尿液，活组织检查没有显示出任何器官排斥的迹象。\r\n\r\n心脏移植可能因为器官感染了猪病毒而失败，但肾移植研究的作者没有检测到这种病毒。猪肾可能很快就会进入人们的生活。\r\n\r\n### 1. 我们离终结疟疾从未如此近\r\n\r\n如果您相信约翰·惠特菲尔德 (John Whitfield) 2002 年在《[自然](https://www.nature.com/articles/news021001-6)》杂志发表的这篇文章（该说法未被引用），"疟疾已经杀死了所有曾经生活过的人的一半"。即使该说法是错误的，在整个人类历史上，蚊子也已经集体杀死了数十亿人。昆虫混蛋干掉了亚历山大大帝、哥特人阿拉里克和但丁。而且，在 2021 年，疟疾仍导致约 620,000 人死亡。这是令人震惊、悲伤和可以预防的。但今年是取得惊人进步的一年。\r\n\r\n一种称为 R21/Matrix-M 的疟疾疫苗在四个非洲国家进行了 III 期试验。它在幼儿中的总体疗效为 [75%](https://www.medpagetoday.com/meetingcoverage/astmh/101561)。这是个好消息。在马里进行的一项 II 期试验还测试了一种名为 CIS43LS 的抗体，用于对抗健康成人中的恶性疟原虫感染。在六个月的时间里，单次注射的疗效为 [88.2%](https://www.nejm.org/doi/full/10.1056/NEJMoa2206966)。\r\n\r\n不过，唯一能有效预防疟疾 90% 以上的免疫原是子孢子，这是一种在蚊子生命周期中形成的类孢子部分。这些子孢子被注射到手臂中并[用作疫苗](https://www.science.org/doi/10.1126/scitranslmed.abj3776)，但显然很难从真正的蚊子身上收集到这些东西。\r\n\r\n本月早些时候，研究人员在实验室中创造了 "[数亿](https://www.nature.com/articles/s41586-022-05466-7)" 子孢子，而不需要蚊子。他们基本上重新创建了整个"疟原虫从传染性配子体到传染性配子体的全部生命周期，而不需要蚊子。" 这项新技术将有助于更快、更便宜地研制出抗疟疾疫苗。\r\n\r\n<p align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-8.webp" alt><br>\r\n</p>', 'bodyText': '作者 | Niko McCarty\n翻译 | 章鱼猫先生\n日期 | 原文发表于 2022.12.10\n来源 | Biology Breakthroughs of 2022 - Codon\n\n\n您正在阅读 Codon，这是一份关于生物 + 技术进步和为人类创造更光明未来的想法的时事通讯。\n这是今年的最后一部作品。几周后我会在这里见到你！\n\n\n\n    \n    大约 1950 年代，戴着加压氧气面罩的男子\n\n\n"当你经历历史时，历史永远不会像历史。它总是看起来很混乱和凌乱，而且总是让人感觉不舒服。"\n—— 约翰·W·加德纳\n\n许多我非常敬佩的作家都对“进步的停滞”写出了令人信服的论战。科学越来越难，发现越来越小（平均而言），这两件事都很糟糕。\n如果你召集来自世界顶级院系的 93 位物理学家，让他们将 1910 年代获得诺贝尔奖的发现与 80 年代的另一个发现进行比较，他们通常会说更早的发现更重要。\n与五十年前相比，今天实现技术飞跃也更加困难。将计算机芯片上的晶体管数量增加一倍（又名摩尔定律）需要的研究人员数量是 1970 年代初期的 18 倍。今天发表的学术论文被美国专利引用的可能性不到 30 年前发表的论文的一半。\n这些不断缩减的回报正处于历史高位之中。\n美国每年授予超过 50,000 个科学和工程博士学位；这个数字在 1960 年还不到 10,000。联邦对科学的资助也（基本上）处于历史最高水平。科学论文的总数呈指数级增长，但每篇论文的平均作者人数在过去一百年里大约翻了两番。\n\n    \n    From "The Science of Science" by Wang and Barabási.\n\n出于某种原因，这些都是生物学进步的不完美指标。但是有很多零散的证据表明，科学正在变得越来越不划算，即使感觉进步从未像现在这样快。我相信——基于轶事证据，真的——如果以每年获得诺贝尔奖的发现为基准，生物技术不会停滞不前。只是诺贝尔奖每年都会颁发一次，而且不乏令人惊叹的论文在排队等待获得最高奖项。所以，当然，并不是每个有价值的人都会赢。\n哦，如果你拿我之前提到的物理学调查结果，对医学和化学做同样的实验，结果就会颠倒过来——20 世纪下半叶发现的相对重要性超过了上半叶。\n不管停滞与否，生物学都存在巨大的低效率。它可以——应该！- 移动得更快。\n许多论文需要一年多的时间才能发表，在期刊官僚的严密监视下，被搁置在数字化的边缘。漫长的等待可能也不值得——同行评审通常是无用的，而且很多糟糕的科学无论如何都能通过。许多伟大的想法也从来没有发表在论文上，因为，好吧，他们从来没有得到资助。NIH 拨款审查非常不一致。如果您向 43 位不同的审稿人提供 25 份拨款建议，他们的评定者间可靠性（衡量分数一致性的指标）基本上为零，即使拨款已经获得资金和先前评审小组的高分！给予相同审稿人的无资金资助与有资金资助的资助得分一样。\n那么生物学文献呢？那也是一团糟。山姆·罗德里克斯 (Sam Rodriques) 在最近的一篇文章中写道，科学论文“因委托而变得不可靠”，并且“因遗漏而变得不可靠”。换句话说，一些研究（一小部分）只是编造的。教授或学生为了发表论文而捏造数字，如果有人说他们在胡说八道，编辑可能要过好几年才会撤稿。\n不过，更大的问题可能是疏忽。科学期刊喜欢发表积极的结果，所以大多数消极的发现永远不会出现在光鲜的期刊上。如果有人进行的实验表明药物 A 与受体 B 结合，他们会发表它——但忽略提及药物 A 不会通过 Z 与受体 C 结合。无效结果很少传给科学家，他们中的许多人已经几个月来一次又一次尝试实验的痛苦经历，后来才发现 1970 年代的一篇不起眼的论文使他们所有的努力都变得毫无意义。\n我告诉你这些悲伤的事情——停滞不前的科学和可怕的低效率的故事——是为了说明一个观点：生物学在去年取得了如此大的进步，真是令人惊讶。生物学的进步证明了人类渴望探索、失败，然后继续前进的愿望。这份时事通讯庆祝人类的成就，并重点介绍了过去 12 个月生物学领域的十大进步。\n此列表中的所有内容均来自 Codon 的上一期，因此希望您能在评论中指出我的错误和遗漏。我的入选标准很简单：该列表仅包括 2022 年期间发布到 bioRxiv 或发表在期刊上的论文。我不包括公司成就——这实际上可能是它自己的列表——除非他们发布了数据。(入选)列表中的一些项目包括了多篇论文，因为整个子领域发展得非常快。\n汇总“十佳排名”最大的危险是完全主观的，有很多优秀的东西没有入选，而且很多其他作家已经做到了(虽然我还没有看到专门针对生物学的清单)。诺亚·史密斯 (Noah Smith) 发布了他 2023 年的技术乐观主义清单 (techno-optimism list)，其中包括对生物技术的简要提及，而《大西洋月刊》(The Atlantic) 发表了他们的 "年度突破 (breakthroughs of the year)"，然后立即将该文章设置为付费文章。\n然而，有必要专门为生物学列出一份完整的榜单，因为很多伟大的事情在人工智能的阴影下被忽略了。人类基因组计划（始于 1990 年）终于在今年完成了，一个庞大的科学家团队填补了最后 8% 的序列空白。科学家们还使用 mirror-image DNA 聚合酶制作了镜像 DNA (mirror-image DNA)，并发现了一类新的 CRISPR 蛋白质，它们可以剪切蛋白质而不是基因。机器学习正在蛋白质工程中掀起波澜，例如有一种基于算法被设计出来的酶，这种酶可以比自然界中发现的任何酶更快地分解 PET 塑料。\n我不确定今年的进展是否与生物进展是否整体停滞不前有关。但有一件事是不变的：生物学变得越来越奇怪，而我会一直关注它。\n10. 走向合成细胞\n从纯化学成分构建合成细胞是生物学的圣杯。如果实现了这一壮举，将证明我们已足够详细地理解生命运作的大体轮廓，并有足够的细节可以在实验室中重现它。这也将成为定制细胞的起点，这些细胞可以检测有毒污染或制造药物，同时又不会成为生物安全风险或存在感染风险。\n今年有几篇论文推动了合成细胞的发展，但其中有两篇让人印象深刻。第一篇是在 bioRxiv 上发表的预印本，据称是首次证明核糖体（大分子蛋白质，负责合成其他蛋白质）可以在活细胞之外制造。这是在合成细胞内从头生产蛋白质的重要起点。\n我们还在合成细胞分裂方面取得了重要进展。一项研究报告说，仅使用五种蛋白质就可以在脂肪泡中制造合成分裂环！当这些蛋白质聚集在一起时，它们会收缩并向气泡施加力（下面的 GIF）。\n\n    \n    合成分裂环在气泡内形成的延时摄影\n\n9. 更好的碱基编辑器\n早在 2016 年，《自然》杂志的一篇论文就报道了第一个碱基编辑蛋白，它可以将 DNA 中的 "C" 替换为 "T"，而无需将基因组一分为二。它的重要性立即显而易见——许多严重的遗传疾病是由 DNA 中的单个碱基交换引起的，现在这些突变可以被修复。\n碱基编辑器已经成熟。这些基因编辑蛋白在发明后仅仅五年就以创纪录的速度进入临床试验，目前 Verve、Beam 和其他公司正在进行针对镰状细胞病、高胆固醇和 Stargardt 病的试验。\n然而，碱基编辑的主要挑战之一是编辑线粒体基因组很棘手，许多遗传疾病都源于此。早在 2020 年，一篇论文就表明碱基编辑器可以成功进入线粒体并使 "C" 变为 "T"，但其前景并不乐观。今年 5 月，一篇后续论文称，实际上，这些线粒体基因编辑器诱发了 "大量" 脱靶突变，这意味着它们编辑的位置比预期的要多，弊大于利。\n但创新不会因失败而受阻。仅今年一年就至少发表了三篇论文，使线粒体碱基编辑器变得更小或更准确。让碱基编辑酶进入线粒体或编辑其 DNA 从未如此简单。我相信我们很快就会看到一些针对线粒体相关疾病的临床试验。\n8. 噬菌体传播病毒\n今年对噬菌体来说是个好年头。这真的很合适，因为它也是 Felix d\'Herelle 著名实验 100 周年纪念日。1922 年，这位巴黎微生物学家证明噬菌体（感染细菌的小病毒）可以根除兔子和小动物体内的 "痢疾杆菌和其他杆菌"。\n我们现在正经历着临床疗法的准复兴时期，噬菌体经常被用来消除抗生素无效的感染（尤其是在欧洲医院）。几周前，一个欧洲科学家团队使用实验性噬菌体疗法挽救了一名幼儿的生命。器官移植后，这个小男孩感染了抗生素无法清除的耐药性感染。在用定制的噬菌体鸡尾酒 (a custom-made phage cocktail) 治疗两年多后，孩子在家中恢复了健康。\n5 月，丹佛的一个团队使用噬菌体治疗一名患有严重囊性纤维化的男孩的脓肿分枝杆菌感染。噬菌体将感染控制了一年多，直到获得供体肺。我相信我们会在 2023 年看到定制噬菌体疗法进入临床。\n\n    \n\n7. 血友病基因疗法\nHemgenix 是一种治疗 B 型血友病的基因疗法，几个月前获得了 FDA 的批准。它的价格达到了 350 万美元，使其成为有史以来最昂贵的药物（这并不好）。根据 III 期临床试验数据，它在患者的是安全有效期至少两年。\n血友病 A 的基因治疗进展缓慢，该病由一种名为 VIII 的不同凝血蛋白突变引起。5 月的一项研究表明，针对肝脏的基因疗法在非人类灵长类动物中效果很好，可以导致 "总凝血因子 VIII 输出增加 10 倍以上"。3 月份发表的一项有 134 名参与者参与的 I/II 期临床试验表明，使用腺相关病毒进行的基因疗法，也用于肝脏，可减少血友病患者的出血事件。但是，它带来了很多副作用；每个试验参与者至少有一次不良事件。尽管如此，血友病仍是基因治疗的 "低悬" 目标之一，这些试验是其他正在进行中的目标的有用酸性测试。\n6. 合成胚胎\n今年，从老鼠身上采集的干细胞被用来制造 "类胚胎结构"，其中包含工作的肠道、跳动的心脏和头脑的雏形，而不需要精子或卵子。\n以色列的 Jacob Hanna 团队发表了一篇最初的论文，于 8 月在 Cell 上发表。据《卫报》报道，这些作者后来成立了一家名为 Renewal Bio 的公司，"旨在培养人类合成胚胎，为医疗条件提供组织和细胞"。剑桥大学和加州理工学院的一个团队也在 8 月 2 日发布了一份预印本，表明这些 "合成胚胎"准确地概括了 "从胚胎第 5.5 天到第 8.5 天的发育事件，包括原肠胚形成、前后轴的形成、大脑，跳动的心脏结构，以及胚胎外组织（包括卵黄囊和绒毛膜）的发育。"\n合成胚胎——正确形成的概率只有 0.5% 左右——有几个潜在的用途。例如，这些结构可以用于研究器官在发育过程中的形成，也可用于在不使用真实胚胎的情况下测试药物。\n\n    \n    Embryoids after six days. From Kasey Lau et al. on bioRxiv. Link\n\n5. 细胞重编程\n今年的一大亮点：首次证明仅靠化学物质就能将人体细胞重新编程为干细胞。这一突破需要十多年的时间，并需使用 11 种不同的化学物质，以及一到两个月的工作时间，所以仍需要一些微调。早在 2013 年，同一个小组就已使用这种方法实现了小鼠细胞的转化，但人类细胞的转化过程要困难得多。\n这也不是第一项重新编程人类细胞的研究。这一荣誉属于山中伸弥 (Shinya Yamanaka)，他在 2006 年通过表达四种蛋白质（现在著名的 "Yamanaka 因子"）对 iPS 细胞进行了重编程。在随后的几十年中，其他研究小组使用病毒或 mRNA 对细胞进行重编程。但这种仅使用化学物质的方法脱颖而出，因为它在体外使用简单，而且化学混合物可以通过静脉注射输送到体内——不需要基因编辑。该方法提供了一种相对简单的工具来生成可用于再生医学的人类多能干细胞。\n4. 植物更容易设计\n我们生活在人类世，这是人类历史上一个可怕的时刻，人造材料的重量超过地球上所有的生物量，而且重量每年都在继续增加一倍。\n\n    \n    "Global human-made mass exceeds all living biomass," by Elhacham E et al. in Nature. Link\n\n在我们现有的生物质中，据估计有 83% 由植物持有。如果我们想要走出这场行星垃圾场的困境，那么，那么我们可能不得不对植物进行工程改造：让它们捕获更多的碳，增强它们的光合作用，种植生产更多的食物，等等！\n幸运的是，做到这一点从未如此简单。几十年来，合成生物学家已经对细菌和哺乳动物细胞进行了改造，使其具有越来越复杂的遗传回路，即使植物在很大程度上被忽视了。今年，两项重要进展改变了平衡。\n先是基因编辑技术，如 CRISPR，现在已经过优化，可以在植物中更好地发挥作用。例如，Prime 编辑器是可以插入、删除或交换 DNA 的 "搜索和替换" 基因编辑器。与其他 Prime 编辑器相比，新的 Plant Prime Editor 在植物细胞中的效率提高了 3.4 倍，并被用于在实验室中迅速使水稻植物对除草剂产生耐受性。\n但更大的进步是：斯坦福大学的一个团队发布了一个完整的基因工具包，可以像我们对细菌进行编程一样对植物进行 "编程"。新工具包包括大量合成启动子和转录因子，可用于控制植物中的基因表达。这些遗传部分被用于构建能够在本塞姆氏烟草和拟南芥中进行布尔逻辑运算的基因回路。作者还建立了逻辑门，可以控制植物根部的基因表达水平，从而控制它们的侧向密度。\n\n    \n    A genetic circuit controls how many lateral roots shoot out from a plant’s roots. Lateral density increases from left to right, with a wildtype plant shown on the far right. From Brophy et al. on bioRxiv.\n\n3. 走向负碳\n生物学的一个众所周知的困难部分是难以扩展（进行大规模的研究）。在试管中改造一个能将糖转化为抗癌药物的细胞是一回事，但在一个千升生物反应器中做同样的事却是完全不同的挑战。\n这就是像 LanzaTech 这样的公司令人兴奋的原因。他们实际上已经在工业工厂扩大了生物学规模。他们有试点设施，将工厂的废碳回收成燃料和化学品。这些工厂每年可以生产数千亿加仑的燃料，并且已经达到相当于每年减少数千辆汽车上路的排放量。\n几个月前，来自 LanzaTech 和西北大学的科学家们达到了另一个里程碑：使用一种名为 Clostridium autoethanogenum 的工程自养生物，他们在具有负碳足迹的过程中以工业规模生产丙酮和异丙醇。 "与导致温室气体释放的传统生产过程不同，我们的过程可以固定碳，" 他们在发表的论文中写道。这是大规模生物学向前迈出的一大步。经过改造的微生物可以在不拖累大气的情况下改善污染物并产生化学物质。\n2. 异种移植成为现实\n这将作为 "异种移植年" 载入人类史册。异种移植的历史可以追溯到 20 世纪 60 年代中期——法国外科医生勒内·库斯 (Renè Kuss) 将猪肾移植到人体中，结果很快被患者的身体排斥——异种移植一直是一个失败的领域。最著名的例子可能是 80 年代 Stephanie Beauclair 或 Baby Fae 的手术，她从狒狒那里接受了一颗心脏，但不久后就去世了。\n不过，在过去四十年里，我们在从猪身上提取心脏并将其植入人体方面做得更好，因为基因编辑技术正在改进。现在比以往任何时候都更容易在猪的细胞中找到所有导致我们的身体排斥该器官的有害蛋白质，并从基因组中系统地消除这些蛋白质编码基因。但进步从来都不是没有陷阱的。\n今年 1 月 7 日，马里兰大学的一组外科医生将一颗猪的心脏移植到 57 岁的老大卫贝内特体内，两个月后他去世了。\n5 月，两只猪的肾脏被移植到脑死亡患者体内，并进行了 54 小时的监测，这让沮丧过后变得乐观起来。两个肾脏都产生了尿液，活组织检查没有显示出任何器官排斥的迹象。\n心脏移植可能因为器官感染了猪病毒而失败，但肾移植研究的作者没有检测到这种病毒。猪肾可能很快就会进入人们的生活。\n1. 我们离终结疟疾从未如此近\n如果您相信约翰·惠特菲尔德 (John Whitfield) 2002 年在《自然》杂志发表的这篇文章（该说法未被引用），"疟疾已经杀死了所有曾经生活过的人的一半"。即使该说法是错误的，在整个人类历史上，蚊子也已经集体杀死了数十亿人。昆虫混蛋干掉了亚历山大大帝、哥特人阿拉里克和但丁。而且，在 2021 年，疟疾仍导致约 620,000 人死亡。这是令人震惊、悲伤和可以预防的。但今年是取得惊人进步的一年。\n一种称为 R21/Matrix-M 的疟疾疫苗在四个非洲国家进行了 III 期试验。它在幼儿中的总体疗效为 75%。这是个好消息。在马里进行的一项 II 期试验还测试了一种名为 CIS43LS 的抗体，用于对抗健康成人中的恶性疟原虫感染。在六个月的时间里，单次注射的疗效为 88.2%。\n不过，唯一能有效预防疟疾 90% 以上的免疫原是子孢子，这是一种在蚊子生命周期中形成的类孢子部分。这些子孢子被注射到手臂中并用作疫苗，但显然很难从真正的蚊子身上收集到这些东西。\n本月早些时候，研究人员在实验室中创造了 "数亿" 子孢子，而不需要蚊子。他们基本上重新创建了整个"疟原虫从传染性配子体到传染性配子体的全部生命周期，而不需要蚊子。" 这项新技术将有助于更快、更便宜地研制出抗疟疾疫苗。', 'bodyHTML': '<blockquote>\n<p dir="auto"><strong>作者 |</strong> <a href="https://substack.com/profile/11154869-niko-mccarty" rel="nofollow">Niko McCarty</a><br>\n<strong>翻译 |</strong> <a href="https://www.yuque.com/shenweiyan" rel="nofollow">章鱼猫先生</a><br>\n<strong>日期 |</strong> 原文发表于 2022.12.10<br>\n<strong>来源 |</strong> <a href="https://cell.substack.com/p/biology-breakthroughs-2022" rel="nofollow">Biology Breakthroughs of 2022</a> - Codon</p>\n</blockquote>\n<blockquote>\n<p dir="auto">您正在阅读 Codon，这是一份关于生物 + 技术进步和为人类创造更光明未来的想法的时事通讯。<br>\n这是今年的最后一部作品。几周后我会在这里见到你！</p>\n</blockquote>\n\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9cbe936b62137222b192125dc9f7034ec163209c24f4d0d50dc3cca377568079/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d312e77656270"><img src="https://camo.githubusercontent.com/9cbe936b62137222b192125dc9f7034ec163209c24f4d0d50dc3cca377568079/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d312e77656270" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-1.webp" style="max-width: 100%;"></a><br>\n    <em>大约 1950 年代，戴着加压氧气面罩的男子</em>\n</p>\n<blockquote>\n<p dir="auto">"当你经历历史时，历史永远不会像历史。它总是看起来很混乱和凌乱，而且总是让人感觉不舒服。"<br>\n—— 约翰·W·加德纳</p>\n</blockquote>\n<p dir="auto">许多我非常敬佩的作家都对“进步的停滞”写出了令人信服的论战。科学越来越难，发现越来越小（平均而言），这两件事都很糟糕。</p>\n<p dir="auto">如果你召集来自世界顶级院系的 93 位物理学家，让他们将 1910 年代获得诺贝尔奖的发现与 80 年代的另一个发现进行比较，他们通常会说更早的发现更重要。</p>\n<p dir="auto">与五十年前相比，今天实现技术飞跃也更加困难。将计算机芯片上的晶体管数量增加一倍（又名摩尔定律）需要的研究人员数量是 1970 年代初期的 <a href="https://www.aeaweb.org/articles?id=10.1257/aer.20180338" rel="nofollow">18 倍</a>。今天发表的学术论文被美国专利引用的可能性不到 30 年前发表的论文的<a href="https://mattsclancy.substack.com/p/science-is-getting-harder" rel="nofollow">一半</a>。</p>\n<p dir="auto">这些不断缩减的回报正处于历史高位之中。</p>\n<p dir="auto">美国每年授予超过 50,000 个科学和工程博士学位；这个数字在 1960 年还不到 10,000。联邦对科学的资助也（基本上）处于历史最高水平。科学论文的总数呈指数级增长，但每篇论文的平均作者人数在过去一百年里大约翻了两番。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f39be2151ced9175f34f12111348d7c8b90e3dc45380be983be42947c5c370ff/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d322e6a706567"><img src="https://camo.githubusercontent.com/f39be2151ced9175f34f12111348d7c8b90e3dc45380be983be42947c5c370ff/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d322e6a706567" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-2.jpeg" style="max-width: 100%;"></a><br>\n    <em>From "The Science of Science" by <a href="https://www.dashunwang.com/book/the-science-of-science" rel="nofollow">Wang and Barabási</a>.</em>\n</p>\n<p dir="auto">出于某种原因，这些都是生物学进步的不完美指标。但是有很多零散的证据表明，科学正在变得越来越不划算，即使感觉进步从未像现在这样快。我相信——基于轶事证据，真的——如果以每年获得诺贝尔奖的发现为基准，生物技术不会停滞不前。只是诺贝尔奖每年都会颁发一次，而且不乏令人惊叹的论文在排队等待获得最高奖项。所以，当然，并不是每个有价值的人都会赢。</p>\n<p dir="auto">哦，如果你拿我之前提到的物理学调查结果，对医学和化学做同样的实验，结果就会颠倒过来——20 世纪下半叶发现的相对重要性超过了上半叶。</p>\n<p dir="auto">不管停滞与否，生物学都存在巨大的低效率。它可以——应该！- 移动得更快。</p>\n<p dir="auto">许多论文需要一年多的时间才能发表，在期刊官僚的严密监视下，被搁置在数字化的边缘。漫长的等待可能也不值得——同行评审通常是无用的，而且很多糟糕的科学无论如何都能通过。许多伟大的想法也从来没有发表在论文上，因为，好吧，他们从来没有得到资助。NIH 拨款审查非常不一致。如果您向 43 位不同的审稿人提供 25 份拨款建议，他们的评定者间可靠性（衡量分数一致性的指标）基本上为零，即使拨款已经获得资金和先前评审小组的高分！给予相同审稿人的无资金资助与有资金资助的资助得分一样。</p>\n<p dir="auto">那么生物学文献呢？那也是一团糟。山姆·罗德里克斯 (<a href="https://www.sam-rodriques.com/post/why-is-progress-in-biology-so-slow" rel="nofollow">Sam Rodriques</a>) 在最近的一篇文章中写道，科学论文“因委托而变得不可靠”，并且“因遗漏而变得不可靠”。换句话说，一些研究（一小部分）只是编造的。教授或学生为了发表论文而捏造数字，如果有人说他们在胡说八道，编辑可能要过<a href="https://newscience.substack.com/p/laws-of-science" rel="nofollow">好几年</a>才会撤稿。</p>\n<p dir="auto">不过，更大的问题可能是疏忽。科学期刊喜欢发表积极的结果，所以大多数消极的发现永远不会出现在光鲜的期刊上。如果有人进行的实验表明药物 A 与受体 B 结合，他们会发表它——但忽略提及药物 A 不会通过 Z 与受体 C 结合。无效结果很少传给科学家，他们中的许多人已经几个月来一次又一次尝试实验的痛苦经历，后来才发现 1970 年代的一篇不起眼的论文使他们所有的努力都变得毫无意义。</p>\n<p dir="auto">我告诉你这些悲伤的事情——停滞不前的科学和可怕的低效率的故事——是为了说明一个观点：<strong>生物学在去年取得了如此大的进步，真是令人惊讶</strong>。生物学的进步证明了人类渴望探索、失败，然后继续前进的愿望。这份时事通讯庆祝人类的成就，并重点介绍了过去 12 个月<strong>生物学领域的十大进步</strong>。</p>\n<p dir="auto">此列表中的所有内容均来自 Codon 的上一期，因此希望您能在评论中指出我的错误和遗漏。我的入选标准很简单：该列表仅包括 2022 年期间发布到 bioRxiv 或发表在期刊上的论文。我不包括公司成就——这实际上可能是它自己的列表——除非他们发布了数据。(入选)列表中的一些项目包括了多篇论文，因为整个子领域发展得非常快。</p>\n<p dir="auto">汇总“十佳排名”最大的危险是完全主观的，有很多优秀的东西没有入选，而且很多其他作家已经做到了(虽然我还没有看到专门针对生物学的清单)。诺亚·史密斯 (Noah Smith) 发布了他 2023 年的技术乐观主义清单 (<a href="https://noahpinion.substack.com/p/techno-optimism-for-2023" rel="nofollow">techno-optimism list</a>)，其中包括对生物技术的简要提及，而《大西洋月刊》(The Atlantic) 发表了他们的 "年度突破 (<a href="https://www.theatlantic.com/newsletters/archive/2022/12/technology-medicine-law-ai-10-breakthroughs-2022/672390/" rel="nofollow">breakthroughs of the year</a>)"，然后立即将该文章设置为付费文章。</p>\n<p dir="auto">然而，有必要专门为生物学列出一份完整的榜单，因为很多伟大的事情在人工智能的阴影下被忽略了。人类基因组计划（始于 1990 年）终于在<a href="https://www.science.org/toc/science/376/6588" rel="nofollow">今年完成了</a>，一个庞大的科学家团队填补了最后 8% 的序列空白。科学家们还使用 mirror-image DNA 聚合酶制作了镜像 DNA (<a href="https://www.nature.com/articles/s41587-022-01337-8" rel="nofollow">mirror-image DNA</a>)，并发现了一类新的 CRISPR 蛋白质，它们可以<a href="https://cell.substack.com/p/crispr-can-cut-proteins-too-index" rel="nofollow">剪切蛋白质</a>而不是基因。机器学习正在蛋白质工程中掀起波澜，例如有一种基于算法被设计出来的酶，这种酶可以比自然界中发现的任何酶更快地<a href="https://cell.substack.com/p/ai-designed-enzyme-eats-plastic" rel="nofollow">分解 PET 塑料</a>。</p>\n<p dir="auto">我不确定今年的进展是否与生物进展是否整体停滞不前有关。但有一件事是不变的：生物学变得越来越奇怪，而我会一直关注它。</p>\n<h3 dir="auto">10. 走向合成细胞</h3>\n<p dir="auto">从纯化学成分构建合成细胞是生物学的圣杯。如果实现了这一壮举，将证明我们已足够详细地理解生命运作的大体轮廓，并有足够的细节可以在实验室中重现它。这也将成为定制细胞的起点，这些细胞可以检测有毒污染或制造药物，同时又不会成为生物安全风险或存在感染风险。</p>\n<p dir="auto">今年有几篇论文推动了合成细胞的发展，但其中有两篇让人印象深刻。第一篇是在 bioRxiv 上发表的预印本，据称是<strong>首次证明核糖体</strong>（大分子蛋白质，负责合成其他蛋白质）<strong>可以在活细胞之外制造</strong>。这是在合成细胞内从头生产蛋白质的重要起点。</p>\n<p dir="auto">我们还在合成细胞分裂方面取得了重要进展。一项研究报告说，仅使用五种蛋白质就可以在脂肪泡中制造合成分裂环！当这些蛋白质聚集在一起时，它们会收缩并向气泡施加力（下面的 GIF）。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c9c5a4de8f04e6111b635e7d742a5a3375d4e0af2d4edf17c8cc11fdbecfd5c3/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d332e77656270"><img src="https://camo.githubusercontent.com/c9c5a4de8f04e6111b635e7d742a5a3375d4e0af2d4edf17c8cc11fdbecfd5c3/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d332e77656270" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-3.webp" style="max-width: 100%;"></a><br>\n    <em>合成分裂环在气泡内形成的延时摄影</em>\n</p>\n<h3 dir="auto">9. 更好的碱基编辑器</h3>\n<p dir="auto">早在 2016 年，《自然》杂志的一篇论文就报道了第一个碱基编辑蛋白，它可以将 DNA 中的 "C" 替换为 "T"，而无需将基因组一分为二。它的重要性立即显而易见——许多严重的遗传疾病是由 DNA 中的单个碱基交换引起的，现在这些突变可以被修复。</p>\n<p dir="auto">碱基编辑器已经成熟。这些基因编辑蛋白在发明后仅仅五年就以创纪录的速度进入临床试验，目前 Verve、Beam 和其他公司正在进行针对镰状细胞病、高胆固醇和 Stargardt 病的<a href="https://www.nature.com/articles/d41573-022-00124-z" rel="nofollow">试验</a>。</p>\n<p dir="auto">然而，碱基编辑的主要挑战之一是编辑线粒体基因组很棘手，<a href="https://www.chop.edu/conditions-diseases/mitochondrial-dna-common-mutation-syndromes" rel="nofollow">许多遗传疾病</a>都源于此。早在 2020 年，<a href="https://www.nature.com/articles/s41586-020-2477-4" rel="nofollow">一篇论文</a>就表明碱基编辑器可以成功进入线粒体并使 "C" 变为 "T"，但其前景并不乐观。今年 5 月，<a href="https://www.nature.com/articles/s41586-022-04836-5" rel="nofollow">一篇后续论文</a>称，实际上，这些线粒体基因编辑器诱发了 "大量" 脱靶突变，这意味着它们编辑的位置比预期的要多，弊大于利。</p>\n<p dir="auto">但创新不会因失败而受阻。仅今年一年就至少发表了<strong>三篇论文</strong>，使线粒体碱基编辑器变得<a href="https://www.nature.com/articles/s41467-022-34784-7" rel="nofollow">更小</a>或<a href="https://doi.org/10.1016/j.cell.2022.03.039" rel="nofollow">更准确</a>。让碱基编辑酶进入线粒体或编辑其 DNA 从未如此简单。我相信我们很快就会看到一些针对线粒体相关疾病的临床试验。</p>\n<h3 dir="auto">8. 噬菌体传播病毒</h3>\n<p dir="auto">今年对噬菌体来说是个好年头。这真的很合适，因为它也是 Felix d\'Herelle 著名实验 <strong>100 周年纪念日</strong>。1922 年，这位巴黎微生物学家证明噬菌体（感染细菌的小病毒）<a href="https://jamanetwork.com/journals/jamapediatrics/article-abstract/1173780" rel="nofollow">可以根除</a>兔子和小动物体内的 "痢疾杆菌和其他杆菌"。</p>\n<p dir="auto">我们现在正经历着临床疗法的准复兴时期，噬菌体经常被用来消除抗生素无效的感染（尤其是在欧洲医院）。几周前，一个欧洲科学家团队使用实验性噬菌体疗法<a href="https://www.nature.com/articles/s41467-022-33294-w" rel="nofollow">挽救了一名幼儿的生命</a>。器官移植后，这个小男孩感染了抗生素无法清除的耐药性感染。在用定制的噬菌体鸡尾酒 (a custom-made phage cocktail) 治疗两年多后，孩子在家中恢复了健康。</p>\n<p dir="auto">5 月，丹佛的一个团队使用噬菌体治疗一名患有严重囊性纤维化的男孩的脓肿分枝杆菌感染。噬菌体将感染控制了一年多，直到获得供体肺。我相信我们会在 2023 年看到定制噬菌体疗法进入临床。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a81ae3af4a0a2366bf3bb99caf09a2726edcd4d01190591724878f7d10471fa3/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d342e706e67"><img src="https://camo.githubusercontent.com/a81ae3af4a0a2366bf3bb99caf09a2726edcd4d01190591724878f7d10471fa3/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d342e706e67" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-4.png" style="max-width: 100%;"></a><br>\n</p>\n<h3 dir="auto">7. 血友病基因疗法</h3>\n<p dir="auto"><a href="https://www.fda.gov/vaccines-blood-biologics/vaccines/hemgenix" rel="nofollow">Hemgenix</a> 是一种治疗 B 型血友病的基因疗法，几个月前获得了 FDA 的批准。它的价格达到了 350 万美元，使其成为有史以来最昂贵的药物（这并不好）。根据 III 期临床试验数据，它在患者的是安全有效期<a href="https://hemophilianewstoday.com/news/hemgenix-gene-therapy-benefits-sustained-2-years-phase-3-hope-b/" rel="nofollow">至少两年</a>。</p>\n<p dir="auto">血友病 A 的基因治疗进展缓慢，该病由一种名为 VIII 的不同凝血蛋白突变引起。5 月的一项研究表明，针对肝脏的基因疗法在非人类灵长类动物中效果很好，可以导致 "总凝血因子 VIII 输出增加 10 倍以上"。3 月份发表的一项有 134 名参与者参与的 I/II 期临床试验表明，使用腺相关病毒进行的基因疗法，也用于肝脏，可减少血友病患者的出血事件。但是，它带来了很多副作用；每个试验参与者至少有一次不良事件。尽管如此，血友病仍是基因治疗的 "低悬" 目标之一，这些试验是其他正在进行中的目标的有用酸性测试。</p>\n<h3 dir="auto">6. 合成胚胎</h3>\n<p dir="auto">今年，从老鼠身上采集的干细胞被用来制造 "类胚胎结构"，其中包含工作的肠道、跳动的心脏和头脑的雏形，而不需要精子或卵子。</p>\n<p dir="auto">以色列的 Jacob Hanna 团队发表了一篇最初的论文，于 8 月<a href="https://doi.org/10.1016/j.cell.2022.07.028" rel="nofollow">在 Cell 上发表</a>。据《卫报》报道，这些作者后来成立了一家名为 Renewal Bio 的<a href="https://www.theguardian.com/science/2022/aug/03/scientists-create-worlds-first-synthetic-embryos" rel="nofollow">公司</a>，"旨在培养人类合成胚胎，为医疗条件提供组织和细胞"。剑桥大学和加州理工学院的一个团队也在 8 月 2 日发布了一份<a href="https://doi.org/10.1101/2022.08.01.502371" rel="nofollow">预印本</a>，表明这些 "合成胚胎"准确地概括了 "从胚胎第 5.5 天到第 8.5 天的发育事件，包括原肠胚形成、前后轴的形成、大脑，跳动的心脏结构，以及胚胎外组织（包括卵黄囊和绒毛膜）的发育。"</p>\n<p dir="auto">合成胚胎——正确形成的概率只有 0.5% 左右——有几个潜在的用途。例如，这些结构可以用于研究器官在发育过程中的形成，也可用于在不使用真实胚胎的情况下测试药物。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a6ce759ab9fd9e516493567e69eab9c3d278bb192a0f126e827bdab411479193/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d352e706e67"><img src="https://camo.githubusercontent.com/a6ce759ab9fd9e516493567e69eab9c3d278bb192a0f126e827bdab411479193/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d352e706e67" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-5.png" style="max-width: 100%;"></a><br>\n    <em>Embryoids after six days. From Kasey Lau et al. on bioRxiv. <a href="https://www.biorxiv.org/content/10.1101/2022.08.01.502371v1.full.pdf" rel="nofollow">Link</a></em>\n</p>\n<h3 dir="auto">5. 细胞重编程</h3>\n<p dir="auto">今年的一大亮点：首次证明仅靠化学物质就能将人体细胞<a href="https://www.nature.com/articles/s41586-022-04593-5" rel="nofollow">重新编程为干细胞</a>。这一突破需要十多年的时间，并需使用 11 种不同的化学物质，以及一到两个月的工作时间，所以仍需要一些微调。早在 2013 年，同一个小组就已使用这种方法实现了<a href="https://www.science.org/doi/10.1126/science.1239278" rel="nofollow">小鼠细胞</a>的转化，但人类细胞的转化过程要困难得多。</p>\n<p dir="auto">这也不是第一项重新编程人类细胞的研究。这一荣誉属于山中伸弥 (Shinya Yamanaka)，他在 2006 年通过表达四种蛋白质（现在著名的 "Yamanaka 因子"）对 iPS 细胞进行了重编程。在随后的几十年中，其他研究小组使用病毒或 mRNA 对细胞进行重编程。但这种仅使用化学物质的方法脱颖而出，因为它在体外使用简单，而且化学混合物可以通过静脉注射输送到体内——不需要基因编辑。该方法提供了一种相对简单的工具来生成可用于再生医学的人类多能干细胞。</p>\n<h3 dir="auto">4. 植物更容易设计</h3>\n<p dir="auto">我们生活在人类世，这是人类历史上一个可怕的时刻，<strong>人造材料的重量超过地球上所有的生物量</strong>，而且重量每年都在继续增加一倍。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/94f3b655d578cadf3864f62a1c30004c4bd564f368743cea89d8c134d9b76382/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d362e77656270"><img src="https://camo.githubusercontent.com/94f3b655d578cadf3864f62a1c30004c4bd564f368743cea89d8c134d9b76382/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d362e77656270" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-6.webp" style="max-width: 100%;"></a><br>\n    <em>"Global human-made mass exceeds all living biomass," by Elhacham E et al. in Nature. <a href="https://www.nature.com/articles/s41586-020-3010-5" rel="nofollow">Link</a></em>\n</p>\n<p dir="auto">在我们现有的生物质中，据估计有 83% 由植物持有。如果我们想要走出这场行星垃圾场的困境，那么，那么我们可能不得不对植物进行工程改造：让它们捕获更多的碳，<a href="https://cell.substack.com/p/hacking-photosynthesis" rel="nofollow">增强它们的光合作用</a>，种植生产更多的食物，等等！</p>\n<p dir="auto">幸运的是，做到这一点从未如此简单。几十年来，合成生物学家已经对细菌和哺乳动物细胞进行了改造，使其具有越来越复杂的遗传回路，即使植物在很大程度上被忽视了。今年，两项重要进展改变了平衡。</p>\n<p dir="auto">先是基因编辑技术，如 CRISPR，现在已经过优化，可以在植物中更好地发挥作用。例如，Prime 编辑器是可以插入、删除或交换 DNA 的 "搜索和替换" 基因编辑器。与其他 Prime 编辑器相比，新的 Plant Prime Editor 在植物细胞中的效率提高了 <a href="https://www.nature.com/articles/s41587-022-01254-w" rel="nofollow">3.4 倍</a>，并被用于在实验室中迅速使水稻植物对除草剂产生耐受性。</p>\n<p dir="auto">但更大的进步是：斯坦福大学的一个团队发布了<a href="https://www.science.org/doi/10.1126/science.abo4326" rel="nofollow">一个完整的基因工具包</a>，可以像我们对细菌进行编程一样对植物进行 "编程"。新工具包包括大量合成启动子和转录因子，可用于控制植物中的基因表达。这些遗传部分被用于构建能够在本塞姆氏烟草和拟南芥中进行布尔逻辑运算的基因回路。作者还建立了逻辑门，可以控制植物根部的基因表达水平，从而控制它们的侧向密度。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/14421f74296a1e3bf60cff6a2d5c4f5f455850a13720939111caa96348594f3d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d372e6a706567"><img src="https://camo.githubusercontent.com/14421f74296a1e3bf60cff6a2d5c4f5f455850a13720939111caa96348594f3d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d372e6a706567" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-7.jpeg" style="max-width: 100%;"></a><br>\n    <em>A genetic circuit controls how many lateral roots shoot out from a plant’s roots. Lateral density increases from left to right, with a wildtype plant shown on the far right. From <a href="https://www.biorxiv.org/content/10.1101/2022.02.02.478917v1" rel="nofollow">Brophy et al. on bioRxiv</a>.</em>\n</p>\n<h3 dir="auto">3. 走向负碳</h3>\n<p dir="auto">生物学的一个众所周知的困难部分是难以扩展（进行大规模的研究）。在试管中改造一个能将糖转化为抗癌药物的细胞是一回事，但在一个千升生物反应器中做同样的事却是完全不同的挑战。</p>\n<p dir="auto">这就是像 <a href="https://lanzatech.com/" rel="nofollow">LanzaTech</a> 这样的公司令人兴奋的原因。他们实际上已经在工业工厂扩大了生物学规模。他们有试点设施，将工厂的废碳回收成燃料和化学品。这些工厂每年可以生产数千亿加仑的燃料，并且已经达到相当于每年减少数千辆汽车上路的排放量。</p>\n<p dir="auto">几个月前，来自 LanzaTech 和西北大学的科学家们达到了<a href="https://www.nature.com/articles/s41587-021-01195-w" rel="nofollow">另一个里程碑</a>：使用一种名为 Clostridium autoethanogenum 的工程自养生物，他们在具有负碳足迹的过程中以工业规模生产丙酮和异丙醇。 "与导致温室气体释放的传统生产过程不同，我们的过程可以固定碳，" 他们在发表的论文中写道。这是大规模生物学向前迈出的一大步。经过改造的微生物可以在不拖累大气的情况下改善污染物并产生化学物质。</p>\n<h3 dir="auto">2. 异种移植成为现实</h3>\n<p dir="auto">这将作为 "异种移植年" 载入人类史册。异种移植的历史可以追溯到 20 世纪 60 年代中期——法国外科医生勒内·库斯 (Renè Kuss) 将猪肾移植到人体中，结果很快被患者的身体排斥——异种移植一直是一个失败的领域。最著名的例子可能是 80 年代 Stephanie Beauclair 或 Baby Fae 的手术，她从狒狒那里接受了一颗心脏，但不久后就去世了。</p>\n<p dir="auto">不过，在过去四十年里，我们在从猪身上提取心脏并将其植入人体方面做得更好，因为基因编辑技术正在改进。现在比以往任何时候都更容易在猪的细胞中找到所有导致我们的身体排斥该器官的有害蛋白质，并从基因组中<a href="https://www.science.org/doi/10.1126/science.aad1191" rel="nofollow">系统地消除</a>这些蛋白质编码基因。但进步从来都不是没有陷阱的。</p>\n<p dir="auto">今年 1 月 7 日，马里兰大学的一组外科医生将<a href="https://www.technologyreview.com/2022/01/11/1043374/gene-edited-pigs-heart-transplant/" rel="nofollow">一颗猪的心脏移植</a>到 57 岁的老大卫贝内特体内，<a href="https://www.technologyreview.com/2022/05/04/1051725/xenotransplant-patient-died-received-heart-infected-with-pig-virus/" rel="nofollow">两个月后</a>他去世了。</p>\n<p dir="auto">5 月，两只猪的肾脏被移植到脑死亡患者体内，并进行了 54 小时的监测，这让沮丧过后变得乐观起来。两个肾脏都产生了尿液，活组织检查没有显示出任何器官排斥的迹象。</p>\n<p dir="auto">心脏移植可能因为器官感染了猪病毒而失败，但肾移植研究的作者没有检测到这种病毒。猪肾可能很快就会进入人们的生活。</p>\n<h3 dir="auto">1. 我们离终结疟疾从未如此近</h3>\n<p dir="auto">如果您相信约翰·惠特菲尔德 (John Whitfield) 2002 年在《<a href="https://www.nature.com/articles/news021001-6" rel="nofollow">自然</a>》杂志发表的这篇文章（该说法未被引用），"疟疾已经杀死了所有曾经生活过的人的一半"。即使该说法是错误的，在整个人类历史上，蚊子也已经集体杀死了数十亿人。昆虫混蛋干掉了亚历山大大帝、哥特人阿拉里克和但丁。而且，在 2021 年，疟疾仍导致约 620,000 人死亡。这是令人震惊、悲伤和可以预防的。但今年是取得惊人进步的一年。</p>\n<p dir="auto">一种称为 R21/Matrix-M 的疟疾疫苗在四个非洲国家进行了 III 期试验。它在幼儿中的总体疗效为 <a href="https://www.medpagetoday.com/meetingcoverage/astmh/101561" rel="nofollow">75%</a>。这是个好消息。在马里进行的一项 II 期试验还测试了一种名为 CIS43LS 的抗体，用于对抗健康成人中的恶性疟原虫感染。在六个月的时间里，单次注射的疗效为 <a href="https://www.nejm.org/doi/full/10.1056/NEJMoa2206966" rel="nofollow">88.2%</a>。</p>\n<p dir="auto">不过，唯一能有效预防疟疾 90% 以上的免疫原是子孢子，这是一种在蚊子生命周期中形成的类孢子部分。这些子孢子被注射到手臂中并<a href="https://www.science.org/doi/10.1126/scitranslmed.abj3776" rel="nofollow">用作疫苗</a>，但显然很难从真正的蚊子身上收集到这些东西。</p>\n<p dir="auto">本月早些时候，研究人员在实验室中创造了 "<a href="https://www.nature.com/articles/s41586-022-05466-7" rel="nofollow">数亿</a>" 子孢子，而不需要蚊子。他们基本上重新创建了整个"疟原虫从传染性配子体到传染性配子体的全部生命周期，而不需要蚊子。" 这项新技术将有助于更快、更便宜地研制出抗疟疾疫苗。</p>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/36297d2ba8baf2b24776f3afe73d8c115e59828bd2bd861f35dcc68f5604d559/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d382e77656270"><img src="https://camo.githubusercontent.com/36297d2ba8baf2b24776f3afe73d8c115e59828bd2bd861f35dcc68f5604d559/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f323032322d42696f6c6f67792d427265616b7468726f756768732d382e77656270" alt="" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/2022-Biology-Breakthroughs-8.webp" style="max-width: 100%;"></a><br>\n</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.3-资讯'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '那些年，和微信公众号编辑器战斗的日子', 'number': 31, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/31', 'createdAt': '2023-12-01T03:10:07Z', 'lastEditedAt': '2023-12-01T05:35:04Z', 'updatedAt': '2024-01-04T05:44:14Z', 'body': "看到 HelloGitHub 公众号在 2019-09-25 发表的这篇文章《[和微信公众号编辑器战斗的日子](https://mp.weixin.qq.com/s/3-A_iSZYD88Cy467qOnNOw)》，结合自己最近折腾的 React 版本应用 [Markdown2Html](https://github.com/shenweiyan/Markdown2Html)，也想着来聊几句。\r\n\r\n<!-- more -->\r\n\r\n## Md2All\r\n\r\n在使用 Mdnice 前，一直在用 [Md2All](https://md.aclickall.com) 的自搭建版本 [Md2XEditor](https://github.com/shenweiyan/Md2XEditor)，这是一个源自 [barretlee](https://github.com/barretlee) 最早在 2017 年的 [online-markdown](https://github.com/barretlee/online-markdown) 项目，经过二次开发而来的 Markdown 在线转换工具。\r\n\r\n个人在 2021 年的时候，浏览 GitHub 无意中发现了 [Md2All](https://md.aclickall.com) 托管在 GitHub 的源码仓库 [github.com/aclickall/aclickall.github.io](https://github.com/aclickall/aclickall.github.io>)，Fork 过来，利用自己微薄的前端知识做了一点点修改，才形成了一直使用到今天的 [Md2XEditor](https://github.com/shenweiyan/Md2XEditor)。    \r\n![Md2XEditor v-2.8.5](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/md2xeditor-v2.8.5.png)\r\n\r\n虽然说，Md2All 已经把 Markdown2Html 或者说把 Markdown2WeChat 的大部分功能实现了，但由于它目前能找到的源码都是 **经过 build 构建后可以在生产环境中使用的最终版本的代码**（诸如压缩和优化代码、打包文件、生成静态文件等），功能调整实在太费劲，而且自己对 Node/React 的开发基本是零基础。在没有找到好的替代品前，也只能将就着用，一直用到了 2023 年。\r\n\r\n## markdown-nice\r\n\r\n[Mdnice](https://github.com/mdnice/markdown-nice/) 的项目虽然很早就听说，也曾经试用过一段时间，但是由于收费，加上同样存在 **超链接文字复制到公众号颜色失效** 的问题，所以一直没有深入了解和使用。直到 2023 年下半年看到不少在关注的公众号推文都变换了风格，才知道原来都在用着 Mdnice，于是重新回来一看，发现这个应用原来还是**开源的**，还可以**自己搭建和部署**！\r\n\r\n回来搜了一波 Mdnice，发现 UI 都大同小异，但也发现了 <https://wechat.bmpi.dev/> 这一个长得很像 Mdnice 又不完全像的平台，从功能和 UI 上它似乎更符合个人的需求和审美，于是去搜源码，果然在 [github.com/TaleAi/markdown2html](https://github.com/TaleAi/markdown2html) 上找到了（虽然这个仓库里面包括 README 在内提供的链接已经失效），但还是果断 Fork 过来，开始了自己部署和折腾之旅。     \r\n![wechat-bmpi-dev](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/wechat-bmpi-dev.png)\r\n\r\n## 一点折腾\r\n\r\n把自己的 Markdown2Html 站点部署起来后，一切看起来都很顺利，但在使用过程中就发现了这个一直存在的问题：**超链接文字复制到公众号颜色失效**！\r\n\r\n于是开始去尝试看看 Mdnice 的源码，从最开始的一头雾水开始到慢慢摸到一点点头绪，也第一次知道了 [markdown-it](https://github.com/markdown-it/markdown-it) 这个目前使用最广泛的 markdown 解析器工具。但功夫不负有心人，借助 ChatGPT 的帮助，最后终于勉勉强强把 **超链接文字复制到公众号颜色失效** 给解决了。\r\n\r\n后面还陆陆续续增加了一些自己喜欢的文章主题，增加了一些网格化的背景等等。由于 Mdnice 使用了非常多的开源插件，所以很多东西改动起来都非常方便。 \r\n![markdown2weixin](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/markdown2wechat.png)\r\n\r\n## 继续更新\r\n\r\n个人 (包括本公众号) 很多的文章都是先写在 GitHub [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden) 仓库的 [Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions) 上，有了 Markdown2Html 后面想要转到公众号也就很方便了。\r\n\r\n到这里，轮子也总算造完了，又该好好搬砖了。\r\n\r\n希望后面能有更多的东西跟大家分享吧，也希望大家在 GitHub 上多多关注我，一起交流。\r\n\r\n## 参考资料\r\n\r\n1. [Markdown-It 解析原理](https://lq782655835.github.io/blogs/project/markdown-it-code.html) - [springleo's blog](https://lq782655835.github.io/blogs/)", 'bodyText': "看到 HelloGitHub 公众号在 2019-09-25 发表的这篇文章《和微信公众号编辑器战斗的日子》，结合自己最近折腾的 React 版本应用 Markdown2Html，也想着来聊几句。\n\nMd2All\n在使用 Mdnice 前，一直在用 Md2All 的自搭建版本 Md2XEditor，这是一个源自 barretlee 最早在 2017 年的 online-markdown 项目，经过二次开发而来的 Markdown 在线转换工具。\n个人在 2021 年的时候，浏览 GitHub 无意中发现了 Md2All 托管在 GitHub 的源码仓库 github.com/aclickall/aclickall.github.io，Fork 过来，利用自己微薄的前端知识做了一点点修改，才形成了一直使用到今天的 Md2XEditor。\n\n虽然说，Md2All 已经把 Markdown2Html 或者说把 Markdown2WeChat 的大部分功能实现了，但由于它目前能找到的源码都是 经过 build 构建后可以在生产环境中使用的最终版本的代码（诸如压缩和优化代码、打包文件、生成静态文件等），功能调整实在太费劲，而且自己对 Node/React 的开发基本是零基础。在没有找到好的替代品前，也只能将就着用，一直用到了 2023 年。\nmarkdown-nice\nMdnice 的项目虽然很早就听说，也曾经试用过一段时间，但是由于收费，加上同样存在 超链接文字复制到公众号颜色失效 的问题，所以一直没有深入了解和使用。直到 2023 年下半年看到不少在关注的公众号推文都变换了风格，才知道原来都在用着 Mdnice，于是重新回来一看，发现这个应用原来还是开源的，还可以自己搭建和部署！\n回来搜了一波 Mdnice，发现 UI 都大同小异，但也发现了 https://wechat.bmpi.dev/ 这一个长得很像 Mdnice 又不完全像的平台，从功能和 UI 上它似乎更符合个人的需求和审美，于是去搜源码，果然在 github.com/TaleAi/markdown2html 上找到了（虽然这个仓库里面包括 README 在内提供的链接已经失效），但还是果断 Fork 过来，开始了自己部署和折腾之旅。\n\n一点折腾\n把自己的 Markdown2Html 站点部署起来后，一切看起来都很顺利，但在使用过程中就发现了这个一直存在的问题：超链接文字复制到公众号颜色失效！\n于是开始去尝试看看 Mdnice 的源码，从最开始的一头雾水开始到慢慢摸到一点点头绪，也第一次知道了 markdown-it 这个目前使用最广泛的 markdown 解析器工具。但功夫不负有心人，借助 ChatGPT 的帮助，最后终于勉勉强强把 超链接文字复制到公众号颜色失效 给解决了。\n后面还陆陆续续增加了一些自己喜欢的文章主题，增加了一些网格化的背景等等。由于 Mdnice 使用了非常多的开源插件，所以很多东西改动起来都非常方便。\n\n继续更新\n个人 (包括本公众号) 很多的文章都是先写在 GitHub Knowledge-Garden 仓库的 Discussions 上，有了 Markdown2Html 后面想要转到公众号也就很方便了。\n到这里，轮子也总算造完了，又该好好搬砖了。\n希望后面能有更多的东西跟大家分享吧，也希望大家在 GitHub 上多多关注我，一起交流。\n参考资料\n\nMarkdown-It 解析原理 - springleo's blog", 'bodyHTML': '<p dir="auto">看到 HelloGitHub 公众号在 2019-09-25 发表的这篇文章《<a href="https://mp.weixin.qq.com/s/3-A_iSZYD88Cy467qOnNOw" rel="nofollow">和微信公众号编辑器战斗的日子</a>》，结合自己最近折腾的 React 版本应用 <a href="https://github.com/shenweiyan/Markdown2Html">Markdown2Html</a>，也想着来聊几句。</p>\n\n<h2 dir="auto">Md2All</h2>\n<p dir="auto">在使用 Mdnice 前，一直在用 <a href="https://md.aclickall.com" rel="nofollow">Md2All</a> 的自搭建版本 <a href="https://github.com/shenweiyan/Md2XEditor">Md2XEditor</a>，这是一个源自 <a href="https://github.com/barretlee">barretlee</a> 最早在 2017 年的 <a href="https://github.com/barretlee/online-markdown">online-markdown</a> 项目，经过二次开发而来的 Markdown 在线转换工具。</p>\n<p dir="auto">个人在 2021 年的时候，浏览 GitHub 无意中发现了 <a href="https://md.aclickall.com" rel="nofollow">Md2All</a> 托管在 GitHub 的源码仓库 <a href="https://github.com/aclickall/aclickall.github.io%3E">github.com/aclickall/aclickall.github.io</a>，Fork 过来，利用自己微薄的前端知识做了一点点修改，才形成了一直使用到今天的 <a href="https://github.com/shenweiyan/Md2XEditor">Md2XEditor</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/916613de93597519c89557ac44cb86fd62cc2f1d5f7305dc3b49901601f7f1be/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d643278656469746f722d76322e382e352e706e67"><img src="https://camo.githubusercontent.com/916613de93597519c89557ac44cb86fd62cc2f1d5f7305dc3b49901601f7f1be/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d643278656469746f722d76322e382e352e706e67" alt="Md2XEditor v-2.8.5" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/md2xeditor-v2.8.5.png" style="max-width: 100%;"></a></p>\n<p dir="auto">虽然说，Md2All 已经把 Markdown2Html 或者说把 Markdown2WeChat 的大部分功能实现了，但由于它目前能找到的源码都是 <strong>经过 build 构建后可以在生产环境中使用的最终版本的代码</strong>（诸如压缩和优化代码、打包文件、生成静态文件等），功能调整实在太费劲，而且自己对 Node/React 的开发基本是零基础。在没有找到好的替代品前，也只能将就着用，一直用到了 2023 年。</p>\n<h2 dir="auto">markdown-nice</h2>\n<p dir="auto"><a href="https://github.com/mdnice/markdown-nice/">Mdnice</a> 的项目虽然很早就听说，也曾经试用过一段时间，但是由于收费，加上同样存在 <strong>超链接文字复制到公众号颜色失效</strong> 的问题，所以一直没有深入了解和使用。直到 2023 年下半年看到不少在关注的公众号推文都变换了风格，才知道原来都在用着 Mdnice，于是重新回来一看，发现这个应用原来还是<strong>开源的</strong>，还可以<strong>自己搭建和部署</strong>！</p>\n<p dir="auto">回来搜了一波 Mdnice，发现 UI 都大同小异，但也发现了 <a href="https://wechat.bmpi.dev/" rel="nofollow">https://wechat.bmpi.dev/</a> 这一个长得很像 Mdnice 又不完全像的平台，从功能和 UI 上它似乎更符合个人的需求和审美，于是去搜源码，果然在 <a href="https://github.com/TaleAi/markdown2html">github.com/TaleAi/markdown2html</a> 上找到了（虽然这个仓库里面包括 README 在内提供的链接已经失效），但还是果断 Fork 过来，开始了自己部署和折腾之旅。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e28c17703260a0415d23070c37c8e968bf829764bd37efab9f65383a71012dc3/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7765636861742d626d70692d6465762e706e67"><img src="https://camo.githubusercontent.com/e28c17703260a0415d23070c37c8e968bf829764bd37efab9f65383a71012dc3/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7765636861742d626d70692d6465762e706e67" alt="wechat-bmpi-dev" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/wechat-bmpi-dev.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">一点折腾</h2>\n<p dir="auto">把自己的 Markdown2Html 站点部署起来后，一切看起来都很顺利，但在使用过程中就发现了这个一直存在的问题：<strong>超链接文字复制到公众号颜色失效</strong>！</p>\n<p dir="auto">于是开始去尝试看看 Mdnice 的源码，从最开始的一头雾水开始到慢慢摸到一点点头绪，也第一次知道了 <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> 这个目前使用最广泛的 markdown 解析器工具。但功夫不负有心人，借助 ChatGPT 的帮助，最后终于勉勉强强把 <strong>超链接文字复制到公众号颜色失效</strong> 给解决了。</p>\n<p dir="auto">后面还陆陆续续增加了一些自己喜欢的文章主题，增加了一些网格化的背景等等。由于 Mdnice 使用了非常多的开源插件，所以很多东西改动起来都非常方便。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/62116cb4f468c884f3e272777e299ea3faa55cbb0d4fba68105c6702a84957c2/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d61726b646f776e327765636861742e706e67"><img src="https://camo.githubusercontent.com/62116cb4f468c884f3e272777e299ea3faa55cbb0d4fba68105c6702a84957c2/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d61726b646f776e327765636861742e706e67" alt="markdown2weixin" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/markdown2wechat.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">继续更新</h2>\n<p dir="auto">个人 (包括本公众号) 很多的文章都是先写在 GitHub <a href="https://github.com/shenweiyan/Knowledge-Garden">Knowledge-Garden</a> 仓库的 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions">Discussions</a> 上，有了 Markdown2Html 后面想要转到公众号也就很方便了。</p>\n<p dir="auto">到这里，轮子也总算造完了，又该好好搬砖了。</p>\n<p dir="auto">希望后面能有更多的东西跟大家分享吧，也希望大家在 GitHub 上多多关注我，一起交流。</p>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li><a href="https://lq782655835.github.io/blogs/project/markdown-it-code.html" rel="nofollow">Markdown-It 解析原理</a> - <a href="https://lq782655835.github.io/blogs/" rel="nofollow">springleo\'s blog</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '单行 Python 代码片段', 'number': 30, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/30', 'createdAt': '2023-12-01T03:05:46Z', 'lastEditedAt': None, 'updatedAt': '2024-01-03T07:56:51Z', 'body': '> Via：https://muhammadraza.me/2023/python-oneliners\r\n\r\n我已经沉浸在 Python 编程世界大约三年了。在这段时间里，我开始欣赏这种多功能语言的优雅和强大。在这篇既有趣又具有教育意义的文章中，我将展示一系列单行 Python 代码片段。无论您是经验丰富的开发人员还是初学者，这些简洁的代码行都可以让您深入了解 Python 的简单性和有效性，它们展示一行代码如何完成在其他语言中可能需要几行代码才能完成的任务。\r\n\r\n<!-- more -->\r\n\r\n- 反转字符串\r\n```python\r\nreversed_string = "Hello World"[::-1]\r\n```\r\n\r\n- 检查数字是否为偶数\r\n```python\r\nis_even = lambda x: x % 2 == 0\r\nis_even(8)  #True\r\n```\r\n\r\n- 求两个列表的交集\r\n```python\r\nintersection = list(set(list1) & set(list2))\r\n```\r\n\r\n- 从列表中删除重复项\r\n```python\r\nno_duplicates = list(set(my_list))\r\n```\r\n\r\n- 不使用 `len()` 计算字符串的长度\r\n```python\r\nlength = sum(1 for _ in \'Hello World\')\r\n```\r\n\r\n- 检查一个列表是否包含另一个列表的所有元素\r\n```python\r\ncontains_all = all(elem in list1 for elem in list2)\r\n```\r\n\r\n- 生成一串随机字符\r\n```python\r\nimport random; \r\nrandom_str = \'\'.join(random.choices(\'abcdefghijklmnopqrstuvwxyz\', k=10))\r\n```\r\n\r\n- 将整数列表转换为单个数字\r\n```python\r\nnum = int(\'\'.join(map(str, [1, 2, 3, 4, 5])))\r\n```\r\n\r\n- 回文(Palindromic)检查\r\n```python\r\nis_palindrome = lambda s: s == s[::-1]\r\n```\r\n\r\n- 列表展开\r\n```python\r\nflatten_list = sum([[1, 2], [3, 4]], [])\r\n```\r\n\r\n- 在一个列表中找到出现频率最高的元素\r\n```python\r\nmost_frequent = max(set(my_list), key=my_list.count)\r\n```\r\n\r\n- 合并两个字典\r\n```python\r\nmerged_dict = {**dict1, **dict2}\r\n```\r\n\r\n最后，我希望您喜欢阅读本文并有机会学习新东西。如果您有任何反馈，请随时在下面发表评论。如果您不想公开发表评论，可以随时给我发送电子邮件。我也很想看到你最喜欢的 python one liner 代码片段。', 'bodyText': 'Via：https://muhammadraza.me/2023/python-oneliners\n\n我已经沉浸在 Python 编程世界大约三年了。在这段时间里，我开始欣赏这种多功能语言的优雅和强大。在这篇既有趣又具有教育意义的文章中，我将展示一系列单行 Python 代码片段。无论您是经验丰富的开发人员还是初学者，这些简洁的代码行都可以让您深入了解 Python 的简单性和有效性，它们展示一行代码如何完成在其他语言中可能需要几行代码才能完成的任务。\n\n\n反转字符串\n\nreversed_string = "Hello World"[::-1]\n\n检查数字是否为偶数\n\nis_even = lambda x: x % 2 == 0\nis_even(8)  #True\n\n求两个列表的交集\n\nintersection = list(set(list1) & set(list2))\n\n从列表中删除重复项\n\nno_duplicates = list(set(my_list))\n\n不使用 len() 计算字符串的长度\n\nlength = sum(1 for _ in \'Hello World\')\n\n检查一个列表是否包含另一个列表的所有元素\n\ncontains_all = all(elem in list1 for elem in list2)\n\n生成一串随机字符\n\nimport random; \nrandom_str = \'\'.join(random.choices(\'abcdefghijklmnopqrstuvwxyz\', k=10))\n\n将整数列表转换为单个数字\n\nnum = int(\'\'.join(map(str, [1, 2, 3, 4, 5])))\n\n回文(Palindromic)检查\n\nis_palindrome = lambda s: s == s[::-1]\n\n列表展开\n\nflatten_list = sum([[1, 2], [3, 4]], [])\n\n在一个列表中找到出现频率最高的元素\n\nmost_frequent = max(set(my_list), key=my_list.count)\n\n合并两个字典\n\nmerged_dict = {**dict1, **dict2}\n最后，我希望您喜欢阅读本文并有机会学习新东西。如果您有任何反馈，请随时在下面发表评论。如果您不想公开发表评论，可以随时给我发送电子邮件。我也很想看到你最喜欢的 python one liner 代码片段。', 'bodyHTML': '<blockquote>\n<p dir="auto">Via：<a href="https://muhammadraza.me/2023/python-oneliners" rel="nofollow">https://muhammadraza.me/2023/python-oneliners</a></p>\n</blockquote>\n<p dir="auto">我已经沉浸在 Python 编程世界大约三年了。在这段时间里，我开始欣赏这种多功能语言的优雅和强大。在这篇既有趣又具有教育意义的文章中，我将展示一系列单行 Python 代码片段。无论您是经验丰富的开发人员还是初学者，这些简洁的代码行都可以让您深入了解 Python 的简单性和有效性，它们展示一行代码如何完成在其他语言中可能需要几行代码才能完成的任务。</p>\n\n<ul dir="auto">\n<li>反转字符串</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reversed_string = &quot;Hello World&quot;[::-1]"><pre class="notranslate"><span class="pl-s1">reversed_string</span> <span class="pl-c1">=</span> <span class="pl-s">"Hello World"</span>[::<span class="pl-c1">-</span><span class="pl-c1">1</span>]</pre></div>\n<ul dir="auto">\n<li>检查数字是否为偶数</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="is_even = lambda x: x % 2 == 0\nis_even(8)  #True"><pre class="notranslate"><span class="pl-s1">is_even</span> <span class="pl-c1">=</span> <span class="pl-k">lambda</span> <span class="pl-s1">x</span>: <span class="pl-s1">x</span> <span class="pl-c1">%</span> <span class="pl-c1">2</span> <span class="pl-c1">==</span> <span class="pl-c1">0</span>\n<span class="pl-en">is_even</span>(<span class="pl-c1">8</span>)  <span class="pl-c">#True</span></pre></div>\n<ul dir="auto">\n<li>求两个列表的交集</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="intersection = list(set(list1) &amp; set(list2))"><pre class="notranslate"><span class="pl-s1">intersection</span> <span class="pl-c1">=</span> <span class="pl-en">list</span>(<span class="pl-en">set</span>(<span class="pl-s1">list1</span>) <span class="pl-c1">&amp;</span> <span class="pl-en">set</span>(<span class="pl-s1">list2</span>))</pre></div>\n<ul dir="auto">\n<li>从列表中删除重复项</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="no_duplicates = list(set(my_list))"><pre class="notranslate"><span class="pl-s1">no_duplicates</span> <span class="pl-c1">=</span> <span class="pl-en">list</span>(<span class="pl-en">set</span>(<span class="pl-s1">my_list</span>))</pre></div>\n<ul dir="auto">\n<li>不使用 <code class="notranslate">len()</code> 计算字符串的长度</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="length = sum(1 for _ in \'Hello World\')"><pre class="notranslate"><span class="pl-s1">length</span> <span class="pl-c1">=</span> <span class="pl-en">sum</span>(<span class="pl-c1">1</span> <span class="pl-k">for</span> <span class="pl-s1">_</span> <span class="pl-c1">in</span> <span class="pl-s">\'Hello World\'</span>)</pre></div>\n<ul dir="auto">\n<li>检查一个列表是否包含另一个列表的所有元素</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="contains_all = all(elem in list1 for elem in list2)"><pre class="notranslate"><span class="pl-s1">contains_all</span> <span class="pl-c1">=</span> <span class="pl-en">all</span>(<span class="pl-s1">elem</span> <span class="pl-c1">in</span> <span class="pl-s1">list1</span> <span class="pl-k">for</span> <span class="pl-s1">elem</span> <span class="pl-c1">in</span> <span class="pl-s1">list2</span>)</pre></div>\n<ul dir="auto">\n<li>生成一串随机字符</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import random; \nrandom_str = \'\'.join(random.choices(\'abcdefghijklmnopqrstuvwxyz\', k=10))"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">random</span>; \n<span class="pl-s1">random_str</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span>.<span class="pl-en">join</span>(<span class="pl-s1">random</span>.<span class="pl-en">choices</span>(<span class="pl-s">\'abcdefghijklmnopqrstuvwxyz\'</span>, <span class="pl-s1">k</span><span class="pl-c1">=</span><span class="pl-c1">10</span>))</pre></div>\n<ul dir="auto">\n<li>将整数列表转换为单个数字</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="num = int(\'\'.join(map(str, [1, 2, 3, 4, 5])))"><pre class="notranslate"><span class="pl-s1">num</span> <span class="pl-c1">=</span> <span class="pl-en">int</span>(<span class="pl-s">\'\'</span>.<span class="pl-en">join</span>(<span class="pl-en">map</span>(<span class="pl-s1">str</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>])))</pre></div>\n<ul dir="auto">\n<li>回文(Palindromic)检查</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="is_palindrome = lambda s: s == s[::-1]"><pre class="notranslate"><span class="pl-s1">is_palindrome</span> <span class="pl-c1">=</span> <span class="pl-k">lambda</span> <span class="pl-s1">s</span>: <span class="pl-s1">s</span> <span class="pl-c1">==</span> <span class="pl-s1">s</span>[::<span class="pl-c1">-</span><span class="pl-c1">1</span>]</pre></div>\n<ul dir="auto">\n<li>列表展开</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="flatten_list = sum([[1, 2], [3, 4]], [])"><pre class="notranslate"><span class="pl-s1">flatten_list</span> <span class="pl-c1">=</span> <span class="pl-en">sum</span>([[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]], [])</pre></div>\n<ul dir="auto">\n<li>在一个列表中找到出现频率最高的元素</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="most_frequent = max(set(my_list), key=my_list.count)"><pre class="notranslate"><span class="pl-s1">most_frequent</span> <span class="pl-c1">=</span> <span class="pl-en">max</span>(<span class="pl-en">set</span>(<span class="pl-s1">my_list</span>), <span class="pl-s1">key</span><span class="pl-c1">=</span><span class="pl-s1">my_list</span>.<span class="pl-s1">count</span>)</pre></div>\n<ul dir="auto">\n<li>合并两个字典</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="merged_dict = {**dict1, **dict2}"><pre class="notranslate"><span class="pl-s1">merged_dict</span> <span class="pl-c1">=</span> {<span class="pl-c1">**</span><span class="pl-s1">dict1</span>, <span class="pl-c1">**</span><span class="pl-s1">dict2</span>}</pre></div>\n<p dir="auto">最后，我希望您喜欢阅读本文并有机会学习新东西。如果您有任何反馈，请随时在下面发表评论。如果您不想公开发表评论，可以随时给我发送电子邮件。我也很想看到你最喜欢的 python one liner 代码片段。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.2-编程'}, 'labels': {'nodes': [{'name': '翻译'}, {'name': '1.2.3-Python'}]}, 'comments': {'nodes': []}}, {'title': '技术人月刊（第 1 期 2023-12）', 'number': 29, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/29', 'createdAt': '2023-12-01T02:57:46Z', 'lastEditedAt': '2023-12-20T03:32:00Z', 'updatedAt': '2023-12-20T03:32:00Z', 'body': '个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。\r\n\r\n## 工具\r\n\r\n1. [通过人工智能将表情符号变成令人惊叹的艺术品](https://github.com/leptonai/tryemoji)\r\n\r\n<p align="left"><img width=600 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/49d415e7-9473-449f-879c-52fac35d0900" alt></p>\r\n\r\nGitHub 上的一个开源项目，包括了完整的前端和后端代码，支持本地和云端部署，可用于商业用途。\r\n\r\n2. [pdf2htmlEX](https://github.com/pdf2htmlEX/pdf2htmlEX)\r\n\r\n<p align="left"><img width=600 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/9600b9ff-5ea2-43af-a419-6b6b33b64232" alt></p>\r\n<p align="left"><img width=600 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/03ea51e0-5167-443d-85e8-40e32a546eaa" alt></p>\r\n\r\n一个 PDF 转 HTML 程序，生成的结果和原始 PDF 几乎一模一样。其背后是利用的 Chrome Headless，让 Chrome 渲染 PDF，再导出成 HTML，甚至图片都转成了 base64 字符，所以一个网页就可以包含完整的文本、字体和图片等内容。\r\n\r\n3. [Quartz](https://github.com/jackyzha0/quartz)\r\n\r\nQuartz 是一套可帮助您免费将数字花园和笔记发布为网站的工具。Quartz v4 进行了彻底重写，重点关注最终用户的可扩展性和易用性。该工具可直接把 obsidian 笔记部署到线上，可以认为是 Obsidian Publish 功能的替代品，但是是免费的。不仅是 Obsidian 笔记，任何 markdown 双链笔记都可以部署。\r\n\r\n4. [gkd](https://github.com/gkd-kit/gkd)\r\n\r\n李跳跳被禁用后的一个替代品，基于高级选择器 + 订阅规则 + 快照审查，它可以实现点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告, 如关闭百度贴吧帖子广告卡片/知乎回答底部推荐广告卡片。\r\n\r\n5. [Blossom](https://github.com/blossom-editor/blossom)\r\n\r\nBlossom 是一个支持私有部署的云端存储双链笔记软件，你可以将你所有的笔记，图片，个人计划安排保存在自己的服务器中，并在任意设备之间实时同步，且基于MIT协议完全开源。UI 非常漂亮的一款云端双链笔记。    \r\n<img width=400 src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/blossom.png">\r\n\r\n6. [MDX Editor](https://editor.runjs.cool/) - 跨平台微信排版Markdown编辑器\r\n\r\nmdx 是 markdown + jsx 的结合，即可以支持 markdown 语法也可以写自定义组件。\r\n\r\n支持一键复制到微信公众号、自定义样式组件，样式、生成二维码、代码 diff 高亮、生成文章，软件还支持本地文件实时保存、文件目录树管理和导出 HTML。    \r\n![mdx-editor](https://shub.weiyan.tech/kgarden/2023/mdx-editor.png)\r\n\r\n## 文章\r\n\r\n1. [Cloudflare 发布了 2023 年度回顾](https://blog.cloudflare.com/radar-2023-year-in-review/)\r\n\r\n2023 年 Cloudflare Radar [#YearInReview](https://twitter.com/hashtag/YearInReview?src=hashtag_click) 是 Cloudflare 对全年在全球和国家/地区层面观察到的各种流量、连接性和速度指标的互联网趋势和模式的第四次年度回顾。\r\n\r\n## 资源\r\n\r\n1. [你用 Python 做过的最酷的事情是什么？](https://www.reddit.com/r/Python/comments/17upt2f/whats_the_coolest_things_youve_done_with_python/)\r\n\r\nreddit 上很火的一个讨论，让人大开眼界。\r\n\r\n3. [Data Hacks](https://data-hacks.com/)\r\n\r\n一个关于如何处理数据的网站，其中包含 1000 个快速 R 和 Python 教程。在这个网站上，您将会找到关于数据科学和统计学领域各种主题的 R 编程和 Python 编程指南。\r\n\r\n4. [哪个是程序员最爱的编程字体？2百万阅读的帖子选出最帅的七种字体](https://vikingz.me/best-font/)\r\n\r\n最后根据评论选出几款最受欢迎的供大家参考：Consolas，最多人推荐；JetBrains Mono 更推荐它的魔改版本 Jetbrains Mono Nerd Font；SF Mono，同样也有魔改版本 SFMono Nerd Font Ligaturized。\r\n\r\n5. [大规模语言模型：从理论到实践](https://intro-llm.github.io/)\r\n\r\n复旦大学张奇教授团队写的一本在线免费的电子书，《大规模语言模型：从理论到实践》，大概有 300 页篇幅，将大模型从理论到实战的每个阶段都描述的较为清楚。\r\n\r\n6. 《[Python 工匠](https://github.com/piglei/one-python-craftsman)》\r\n\r\n它专注于分享 Python 编程中的一些偏「小」的东西，例如变量和注释的使用、编写条件分支的技巧、编写跑的更快扩展性更好的代码，让函数反馈结果的技巧、异常处理的好习惯、装饰器的使用技巧等等。\r\n<p align="left"><img width=600 src="https://shub.weiyan.tech/kgarden/2023/one-python-craftsman.jpg" alt="one-python-craftsman"></p>\r\n\r\n7. 《[Python Cookbook in Chinese](https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html)》 3rd Edition\r\n<p align="left"><img width=600 src="https://shub.weiyan.tech/kgarden/2023/python3-cookbook.jpg"></p>\r\n\r\n## 图片\r\n\r\n1. [世界上 14 座最伟大的宗教建筑](https://twitter.com/culturaltutor/status/1728746068324631017)\r\n\r\n来源于推特的信息，对于排名和入选不少网友表示怀疑，但的确很震撼。\r\n\r\n一. 日本京都金阁寺\r\n\r\n金阁寺（“金阁寺”）曾经是邪恶幕府将军的私人住宅，后来被他的儿子改建为禅宗佛教寺庙。    \r\n那是600年前的事了。它在 20 世纪 50 年代被一位和尚烧毁，并逐梁重建。\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/669c4d5d-7872-4f70-a3ad-f9e7c63fb045">\r\n\r\n二. 英国达勒姆大教堂\r\n\r\n英国最精美的诺曼大教堂，以其巨大的 11 世纪鼓柱和坚固的塔楼仍然占据着达勒姆市的主导地位。    \r\n现在它和一千年前一样庞大，仍然是卡斯伯特和贝德坟墓的所在地。   \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/224a6f1d-2908-4d02-b6d5-391823dea235">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/2a6f2f93-365c-4640-901c-6f1efaba8423">\r\n\r\n三. 哈尔格林姆教堂，雷克雅未克，冰岛\r\n\r\n世界上最伟大的现代主义教堂之一，将哥特式原则融入现代混凝土和钢材材料中。    \r\n一个富有表现力、迷人、近乎神奇的传统与现代结合的象征。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/2467d813-fed5-4944-81f7-0085bcfa8a44">\r\n\r\n四. 印度北阿坎德邦 Gurdwara Sri Hemkund Sahib\r\n\r\n有时，让一座建筑变得如此非凡的不仅仅是建筑，还有它的位置。    \r\n位于喜马拉雅山 Garhwal 近 5,000 米高的 Gurdwara Sri Hemkund Sahib 也是如此。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/3167b4ae-953b-4935-9912-9528d651cb7b">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/1d8aadaa-2c3a-458d-b3af-e79629cc6d87">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/e4cf3166-2ad5-4880-88af-94333aacfe7a">\r\n\r\n五. 匈牙利塞格德犹太教堂\r\n\r\n这是一件不拘一格的杰作，由 Lipót Baumhorn 于 1902 年设计，充满了彩色玻璃和锻铁。    \r\n新艺术风格、新哥特式、新罗马式和新摩尔式建筑融合成一个建筑仙境。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/d4a0b13d-8708-4798-855a-6ea4cdfcde8f">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/2d3c34cc-a087-4aa8-b8a6-fb97e562142c">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/2b829eeb-1fa7-4824-af10-6eed754c619d">\r\n\r\n六. 迪尔瓦拉耆那教寺庙，印度拉贾斯坦邦\r\n\r\n这座寺庙建于 11 世纪至 16 世纪，历时五百年，也许是索兰基风格建筑的最佳典范。    \r\n精心雕刻的雪白大理石的聚宝盆。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/5d8fb631-4ccc-4413-8e13-749bb2c48fef">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/a4d58526-4f36-44fd-892b-c5268ae912b1">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/2879a51b-5157-477a-8606-88b6d085cac1">\r\n\r\n七. 保加利亚索非亚亚历山大涅夫斯基大教堂\r\n\r\n一座新拜占庭式建筑的纪念碑，经过三十年的建造，也许是保加利亚脱离奥斯曼帝国独立的顶峰。    \r\n外面有金色和绿色的圆顶瀑布；里面有一个阴暗的洞穴，里面有蜡烛和图标。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/664ca61f-b548-4a5d-876a-0125cff93f7d">\r\n\r\n八. 叙利亚大马士革大清真寺\r\n\r\n世界上最伟大的建筑之一。这座拥有 4,000 年历史的礼拜场所，在这座从倭马亚王朝到奥斯曼帝国一次又一次改建的杰作的金色马赛克中，仍能看到腓尼基、罗马和早期基督教的遗迹。\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/83352af7-8a27-4a4f-bd55-dbae26036e38">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/7550fce1-d751-41b9-8c2a-89f4aaad2e0f">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/af48b742-2e6a-4ff5-90cb-3aa23642eb66">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/ae72320a-260b-442b-821a-97a0f5f1163f">\r\n\r\n九. 希腊德尔斐阿波罗神庙\r\n\r\n曾经是古代世界最神圣的地方之一，是德尔斐神谕的故乡，也是所有希腊人的圣地。    \r\n尽管这座寺庙现已成为废墟，但其独特的神秘色彩依然存在，它拥有近 3,000 年的历史，位于帕纳苏斯山的高处。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/48dd9744-ef44-4878-a63c-9beb8d09ac0f">\r\n\r\n十. 阿布辛贝，埃及\r\n\r\n一座古埃及神庙，由法老拉美西斯二世建造，旨在荣耀法老拉美西斯二世，成为尼罗河上神一般的永恒哨兵。    \r\n它在沙子下消失了两千多年，被挖掘出来，然后在建造阿斯旺大坝时，一块一块地移动。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/d969d02a-bb92-4e11-8ef4-6d31a0aa05ab">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/bb27ebaa-17ca-4f4b-8d49-f485a6d7a451">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/3d7d1f9e-2f09-4bae-bec2-5046d118309e">\r\n\r\n十一. 科特迪瓦亚穆苏克罗和平圣母大教堂\r\n\r\n一座建于 20 世纪 80 年代的大教堂，令人难以置信。它的灵感来自罗马圣彼得大教堂，但并非直接模仿。据一些人说，它是世界上最大的教堂。   \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/ec95b588-1ac9-454b-bb63-3d57ca161b9b">\r\n\r\n十二. 帕拉蒂纳无伴奏合唱团，巴勒莫，西西里岛\r\n\r\n许多建筑都被认为是独一无二的——这座建筑确实如此。前所未有的拜占庭式、诺曼式和法蒂玛式建筑矩阵；三种宗教和三种风格的结合。穆卡纳斯、半圆顶、圣像、圆形和尖形拱门……独一无二。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/9a77a06f-3e02-45df-864b-b000e60cfbb1">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/e6653eed-4cdd-42f6-9345-97f8959cc1be">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/5441eb25-29bc-4350-bdcb-0e5124bdd2df">\r\n\r\n十三. 贵州梵净山寺庙，中国\r\n\r\n这两座佛教寺庙坐落在武陵山脉深处的岩石上，其历史可以追溯到几个世纪前，看起来几乎是不可能的。    \r\n但它们是真实存在的 — 它们的瓦片由于极端的风力而采用了铁质制作！    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/62c8cd2e-af48-40f6-a1cd-f1e02768323b">\r\n\r\n十四. 印度泰米尔纳德邦米纳克希神庙\r\n\r\n这座庞大的建筑群有着悠久的历史，可以追溯到 1,000 多年前。它是德拉威建筑的一个令人惊叹的典范，拥有 14 座门楼（仪式性入口塔楼），其中一些具有纪念意义，覆盖着精美的彩色雕塑。    \r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/2d1fcedf-d187-49fe-aad9-6253bd4d4b8a">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/6f759a67-6c00-43d6-a262-cb9805929c87">\r\n<img width=400 src="https://github.com/shenweiyan/Knowledge-Garden/assets/26101369/6d566e60-933d-4905-a2da-ffdd6d7f5b0e">\r\n\r\n\r\n\r\n\r\n', 'bodyText': '个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。\n工具\n\n通过人工智能将表情符号变成令人惊叹的艺术品\n\n\nGitHub 上的一个开源项目，包括了完整的前端和后端代码，支持本地和云端部署，可用于商业用途。\n\npdf2htmlEX\n\n\n\n一个 PDF 转 HTML 程序，生成的结果和原始 PDF 几乎一模一样。其背后是利用的 Chrome Headless，让 Chrome 渲染 PDF，再导出成 HTML，甚至图片都转成了 base64 字符，所以一个网页就可以包含完整的文本、字体和图片等内容。\n\nQuartz\n\nQuartz 是一套可帮助您免费将数字花园和笔记发布为网站的工具。Quartz v4 进行了彻底重写，重点关注最终用户的可扩展性和易用性。该工具可直接把 obsidian 笔记部署到线上，可以认为是 Obsidian Publish 功能的替代品，但是是免费的。不仅是 Obsidian 笔记，任何 markdown 双链笔记都可以部署。\n\ngkd\n\n李跳跳被禁用后的一个替代品，基于高级选择器 + 订阅规则 + 快照审查，它可以实现点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告, 如关闭百度贴吧帖子广告卡片/知乎回答底部推荐广告卡片。\n\nBlossom\n\nBlossom 是一个支持私有部署的云端存储双链笔记软件，你可以将你所有的笔记，图片，个人计划安排保存在自己的服务器中，并在任意设备之间实时同步，且基于MIT协议完全开源。UI 非常漂亮的一款云端双链笔记。\n\n\nMDX Editor - 跨平台微信排版Markdown编辑器\n\nmdx 是 markdown + jsx 的结合，即可以支持 markdown 语法也可以写自定义组件。\n支持一键复制到微信公众号、自定义样式组件，样式、生成二维码、代码 diff 高亮、生成文章，软件还支持本地文件实时保存、文件目录树管理和导出 HTML。\n\n文章\n\nCloudflare 发布了 2023 年度回顾\n\n2023 年 Cloudflare Radar #YearInReview 是 Cloudflare 对全年在全球和国家/地区层面观察到的各种流量、连接性和速度指标的互联网趋势和模式的第四次年度回顾。\n资源\n\n你用 Python 做过的最酷的事情是什么？\n\nreddit 上很火的一个讨论，让人大开眼界。\n\nData Hacks\n\n一个关于如何处理数据的网站，其中包含 1000 个快速 R 和 Python 教程。在这个网站上，您将会找到关于数据科学和统计学领域各种主题的 R 编程和 Python 编程指南。\n\n哪个是程序员最爱的编程字体？2百万阅读的帖子选出最帅的七种字体\n\n最后根据评论选出几款最受欢迎的供大家参考：Consolas，最多人推荐；JetBrains Mono 更推荐它的魔改版本 Jetbrains Mono Nerd Font；SF Mono，同样也有魔改版本 SFMono Nerd Font Ligaturized。\n\n大规模语言模型：从理论到实践\n\n复旦大学张奇教授团队写的一本在线免费的电子书，《大规模语言模型：从理论到实践》，大概有 300 页篇幅，将大模型从理论到实战的每个阶段都描述的较为清楚。\n\n《Python 工匠》\n\n它专注于分享 Python 编程中的一些偏「小」的东西，例如变量和注释的使用、编写条件分支的技巧、编写跑的更快扩展性更好的代码，让函数反馈结果的技巧、异常处理的好习惯、装饰器的使用技巧等等。\n\n\n《Python Cookbook in Chinese》 3rd Edition\n\n\n图片\n\n世界上 14 座最伟大的宗教建筑\n\n来源于推特的信息，对于排名和入选不少网友表示怀疑，但的确很震撼。\n一. 日本京都金阁寺\n金阁寺（“金阁寺”）曾经是邪恶幕府将军的私人住宅，后来被他的儿子改建为禅宗佛教寺庙。\n那是600年前的事了。它在 20 世纪 50 年代被一位和尚烧毁，并逐梁重建。\n\n二. 英国达勒姆大教堂\n英国最精美的诺曼大教堂，以其巨大的 11 世纪鼓柱和坚固的塔楼仍然占据着达勒姆市的主导地位。\n现在它和一千年前一样庞大，仍然是卡斯伯特和贝德坟墓的所在地。\n\n\n三. 哈尔格林姆教堂，雷克雅未克，冰岛\n世界上最伟大的现代主义教堂之一，将哥特式原则融入现代混凝土和钢材材料中。\n一个富有表现力、迷人、近乎神奇的传统与现代结合的象征。\n\n四. 印度北阿坎德邦 Gurdwara Sri Hemkund Sahib\n有时，让一座建筑变得如此非凡的不仅仅是建筑，还有它的位置。\n位于喜马拉雅山 Garhwal 近 5,000 米高的 Gurdwara Sri Hemkund Sahib 也是如此。\n\n\n\n五. 匈牙利塞格德犹太教堂\n这是一件不拘一格的杰作，由 Lipót Baumhorn 于 1902 年设计，充满了彩色玻璃和锻铁。\n新艺术风格、新哥特式、新罗马式和新摩尔式建筑融合成一个建筑仙境。\n\n\n\n六. 迪尔瓦拉耆那教寺庙，印度拉贾斯坦邦\n这座寺庙建于 11 世纪至 16 世纪，历时五百年，也许是索兰基风格建筑的最佳典范。\n精心雕刻的雪白大理石的聚宝盆。\n\n\n\n七. 保加利亚索非亚亚历山大涅夫斯基大教堂\n一座新拜占庭式建筑的纪念碑，经过三十年的建造，也许是保加利亚脱离奥斯曼帝国独立的顶峰。\n外面有金色和绿色的圆顶瀑布；里面有一个阴暗的洞穴，里面有蜡烛和图标。\n\n八. 叙利亚大马士革大清真寺\n世界上最伟大的建筑之一。这座拥有 4,000 年历史的礼拜场所，在这座从倭马亚王朝到奥斯曼帝国一次又一次改建的杰作的金色马赛克中，仍能看到腓尼基、罗马和早期基督教的遗迹。\n\n\n\n\n九. 希腊德尔斐阿波罗神庙\n曾经是古代世界最神圣的地方之一，是德尔斐神谕的故乡，也是所有希腊人的圣地。\n尽管这座寺庙现已成为废墟，但其独特的神秘色彩依然存在，它拥有近 3,000 年的历史，位于帕纳苏斯山的高处。\n\n十. 阿布辛贝，埃及\n一座古埃及神庙，由法老拉美西斯二世建造，旨在荣耀法老拉美西斯二世，成为尼罗河上神一般的永恒哨兵。\n它在沙子下消失了两千多年，被挖掘出来，然后在建造阿斯旺大坝时，一块一块地移动。\n\n\n\n十一. 科特迪瓦亚穆苏克罗和平圣母大教堂\n一座建于 20 世纪 80 年代的大教堂，令人难以置信。它的灵感来自罗马圣彼得大教堂，但并非直接模仿。据一些人说，它是世界上最大的教堂。\n\n十二. 帕拉蒂纳无伴奏合唱团，巴勒莫，西西里岛\n许多建筑都被认为是独一无二的——这座建筑确实如此。前所未有的拜占庭式、诺曼式和法蒂玛式建筑矩阵；三种宗教和三种风格的结合。穆卡纳斯、半圆顶、圣像、圆形和尖形拱门……独一无二。\n\n\n\n十三. 贵州梵净山寺庙，中国\n这两座佛教寺庙坐落在武陵山脉深处的岩石上，其历史可以追溯到几个世纪前，看起来几乎是不可能的。\n但它们是真实存在的 — 它们的瓦片由于极端的风力而采用了铁质制作！\n\n十四. 印度泰米尔纳德邦米纳克希神庙\n这座庞大的建筑群有着悠久的历史，可以追溯到 1,000 多年前。它是德拉威建筑的一个令人惊叹的典范，拥有 14 座门楼（仪式性入口塔楼），其中一些具有纪念意义，覆盖着精美的彩色雕塑。', 'bodyHTML': '<p dir="auto">个人的信息周刊，每月记录我看到的有价值的信息，主要针对生物学和互联网科技领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。</p>\n<h2 dir="auto">工具</h2>\n<ol dir="auto">\n<li><a href="https://github.com/leptonai/tryemoji">通过人工智能将表情符号变成令人惊叹的艺术品</a></li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286827499-49d415e7-9473-449f-879c-52fac35d0900.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4Mjc0OTktNDlkNDE1ZTctOTQ3My00NDlmLTg3OWMtNTJmYWMzNWQwOTAwLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTA5ZDJiMzYwNzRiZDkzYWNjMjk0NWQ1ODEzZGI0YTg1NmRiMTBhY2Q3MmVjNWVjNDgwZDZkNzIwMDJiOTU3YzEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.CQMf5Adkb2lfZCQOP5p-7rObr-UdKen5Cpx0QU7Z3uI"><img width="600" src="https://private-user-images.githubusercontent.com/26101369/286827499-49d415e7-9473-449f-879c-52fac35d0900.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4Mjc0OTktNDlkNDE1ZTctOTQ3My00NDlmLTg3OWMtNTJmYWMzNWQwOTAwLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTA5ZDJiMzYwNzRiZDkzYWNjMjk0NWQ1ODEzZGI0YTg1NmRiMTBhY2Q3MmVjNWVjNDgwZDZkNzIwMDJiOTU3YzEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.CQMf5Adkb2lfZCQOP5p-7rObr-UdKen5Cpx0QU7Z3uI" alt="" style="max-width: 100%;"></a></p>\n<p dir="auto">GitHub 上的一个开源项目，包括了完整的前端和后端代码，支持本地和云端部署，可用于商业用途。</p>\n<ol start="2" dir="auto">\n<li><a href="https://github.com/pdf2htmlEX/pdf2htmlEX">pdf2htmlEX</a></li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286828244-9600b9ff-5ea2-43af-a419-6b6b33b64232.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4MjgyNDQtOTYwMGI5ZmYtNWVhMi00M2FmLWE0MTktNmI2YjMzYjY0MjMyLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI4ZjczNzdkYzEyNDdiNWY3NGJhNjQ3Mzc0ZTg5MzY2ZjY3ZDJiNjVhMzllNjRmY2RkNWZlNTRmMzM1OTA2ZTEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.VO7qH4-Cif2e2_mjTcjMCbZU32H7ycdXo5hpRS4msjA"><img width="600" src="https://private-user-images.githubusercontent.com/26101369/286828244-9600b9ff-5ea2-43af-a419-6b6b33b64232.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4MjgyNDQtOTYwMGI5ZmYtNWVhMi00M2FmLWE0MTktNmI2YjMzYjY0MjMyLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI4ZjczNzdkYzEyNDdiNWY3NGJhNjQ3Mzc0ZTg5MzY2ZjY3ZDJiNjVhMzllNjRmY2RkNWZlNTRmMzM1OTA2ZTEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.VO7qH4-Cif2e2_mjTcjMCbZU32H7ycdXo5hpRS4msjA" alt="" style="max-width: 100%;"></a></p>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286828335-03ea51e0-5167-443d-85e8-40e32a546eaa.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4MjgzMzUtMDNlYTUxZTAtNTE2Ny00NDNkLTg1ZTgtNDBlMzJhNTQ2ZWFhLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWVlZTk1ZmM4OWViNGQzZjUxZTg5MGI5ODVjYjU1Mjc4MmJlNmE0YTA3ZWZkZGU5MjQ4Y2QzY2ZhNjUyYzNlMTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.91BgLlZEMZ8aoPE9l0PUXe3XKmSB3DiyIp1pEznqONA"><img width="600" src="https://private-user-images.githubusercontent.com/26101369/286828335-03ea51e0-5167-443d-85e8-40e32a546eaa.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4MjgzMzUtMDNlYTUxZTAtNTE2Ny00NDNkLTg1ZTgtNDBlMzJhNTQ2ZWFhLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWVlZTk1ZmM4OWViNGQzZjUxZTg5MGI5ODVjYjU1Mjc4MmJlNmE0YTA3ZWZkZGU5MjQ4Y2QzY2ZhNjUyYzNlMTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.91BgLlZEMZ8aoPE9l0PUXe3XKmSB3DiyIp1pEznqONA" alt="" style="max-width: 100%;"></a></p>\n<p dir="auto">一个 PDF 转 HTML 程序，生成的结果和原始 PDF 几乎一模一样。其背后是利用的 Chrome Headless，让 Chrome 渲染 PDF，再导出成 HTML，甚至图片都转成了 base64 字符，所以一个网页就可以包含完整的文本、字体和图片等内容。</p>\n<ol start="3" dir="auto">\n<li><a href="https://github.com/jackyzha0/quartz">Quartz</a></li>\n</ol>\n<p dir="auto">Quartz 是一套可帮助您免费将数字花园和笔记发布为网站的工具。Quartz v4 进行了彻底重写，重点关注最终用户的可扩展性和易用性。该工具可直接把 obsidian 笔记部署到线上，可以认为是 Obsidian Publish 功能的替代品，但是是免费的。不仅是 Obsidian 笔记，任何 markdown 双链笔记都可以部署。</p>\n<ol start="4" dir="auto">\n<li><a href="https://github.com/gkd-kit/gkd">gkd</a></li>\n</ol>\n<p dir="auto">李跳跳被禁用后的一个替代品，基于高级选择器 + 订阅规则 + 快照审查，它可以实现点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告, 如关闭百度贴吧帖子广告卡片/知乎回答底部推荐广告卡片。</p>\n<ol start="5" dir="auto">\n<li><a href="https://github.com/blossom-editor/blossom">Blossom</a></li>\n</ol>\n<p dir="auto">Blossom 是一个支持私有部署的云端存储双链笔记软件，你可以将你所有的笔记，图片，个人计划安排保存在自己的服务器中，并在任意设备之间实时同步，且基于MIT协议完全开源。UI 非常漂亮的一款云端双链笔记。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b4c3b3e3a14d274658609e912f4e9cd4b721d3e326e5366e9f08fac5c30b5cfb/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f626c6f73736f6d2e706e67"><img width="400" src="https://camo.githubusercontent.com/b4c3b3e3a14d274658609e912f4e9cd4b721d3e326e5366e9f08fac5c30b5cfb/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f626c6f73736f6d2e706e67" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/blossom.png" style="max-width: 100%;"></a></p>\n<ol start="6" dir="auto">\n<li><a href="https://editor.runjs.cool/" rel="nofollow">MDX Editor</a> - 跨平台微信排版Markdown编辑器</li>\n</ol>\n<p dir="auto">mdx 是 markdown + jsx 的结合，即可以支持 markdown 语法也可以写自定义组件。</p>\n<p dir="auto">支持一键复制到微信公众号、自定义样式组件，样式、生成二维码、代码 diff 高亮、生成文章，软件还支持本地文件实时保存、文件目录树管理和导出 HTML。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/be9909c607fb2b14cf3724753fa99e11f1401a433a08c7b65860634165ac47d8/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6d64782d656469746f722e706e67"><img src="https://camo.githubusercontent.com/be9909c607fb2b14cf3724753fa99e11f1401a433a08c7b65860634165ac47d8/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6d64782d656469746f722e706e67" alt="mdx-editor" data-canonical-src="https://shub.weiyan.tech/kgarden/2023/mdx-editor.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">文章</h2>\n<ol dir="auto">\n<li><a href="https://blog.cloudflare.com/radar-2023-year-in-review/" rel="nofollow">Cloudflare 发布了 2023 年度回顾</a></li>\n</ol>\n<p dir="auto">2023 年 Cloudflare Radar <a href="https://twitter.com/hashtag/YearInReview?src=hashtag_click" rel="nofollow">#YearInReview</a> 是 Cloudflare 对全年在全球和国家/地区层面观察到的各种流量、连接性和速度指标的互联网趋势和模式的第四次年度回顾。</p>\n<h2 dir="auto">资源</h2>\n<ol dir="auto">\n<li><a href="https://www.reddit.com/r/Python/comments/17upt2f/whats_the_coolest_things_youve_done_with_python/" rel="nofollow">你用 Python 做过的最酷的事情是什么？</a></li>\n</ol>\n<p dir="auto">reddit 上很火的一个讨论，让人大开眼界。</p>\n<ol start="3" dir="auto">\n<li><a href="https://data-hacks.com/" rel="nofollow">Data Hacks</a></li>\n</ol>\n<p dir="auto">一个关于如何处理数据的网站，其中包含 1000 个快速 R 和 Python 教程。在这个网站上，您将会找到关于数据科学和统计学领域各种主题的 R 编程和 Python 编程指南。</p>\n<ol start="4" dir="auto">\n<li><a href="https://vikingz.me/best-font/" rel="nofollow">哪个是程序员最爱的编程字体？2百万阅读的帖子选出最帅的七种字体</a></li>\n</ol>\n<p dir="auto">最后根据评论选出几款最受欢迎的供大家参考：Consolas，最多人推荐；JetBrains Mono 更推荐它的魔改版本 Jetbrains Mono Nerd Font；SF Mono，同样也有魔改版本 SFMono Nerd Font Ligaturized。</p>\n<ol start="5" dir="auto">\n<li><a href="https://intro-llm.github.io/" rel="nofollow">大规模语言模型：从理论到实践</a></li>\n</ol>\n<p dir="auto">复旦大学张奇教授团队写的一本在线免费的电子书，《大规模语言模型：从理论到实践》，大概有 300 页篇幅，将大模型从理论到实战的每个阶段都描述的较为清楚。</p>\n<ol start="6" dir="auto">\n<li>《<a href="https://github.com/piglei/one-python-craftsman">Python 工匠</a>》</li>\n</ol>\n<p dir="auto">它专注于分享 Python 编程中的一些偏「小」的东西，例如变量和注释的使用、编写条件分支的技巧、编写跑的更快扩展性更好的代码，让函数反馈结果的技巧、异常处理的好习惯、装饰器的使用技巧等等。</p>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ad395d6ad742ded2a6251dab0357f5329470004724cdcd85313f7e7e1ab3fbce/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6f6e652d707974686f6e2d6372616674736d616e2e6a7067"><img width="600" src="https://camo.githubusercontent.com/ad395d6ad742ded2a6251dab0357f5329470004724cdcd85313f7e7e1ab3fbce/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f6f6e652d707974686f6e2d6372616674736d616e2e6a7067" alt="one-python-craftsman" data-canonical-src="https://shub.weiyan.tech/kgarden/2023/one-python-craftsman.jpg" style="max-width: 100%;"></a></p>\n<ol start="7" dir="auto">\n<li>《<a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html" rel="nofollow">Python Cookbook in Chinese</a>》 3rd Edition</li>\n</ol>\n<p align="left" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/17b949d28b66fd62244bd0f984205fdff39fef111c478b9f11f89284f4eeb6dd/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f707974686f6e332d636f6f6b626f6f6b2e6a7067"><img width="600" src="https://camo.githubusercontent.com/17b949d28b66fd62244bd0f984205fdff39fef111c478b9f11f89284f4eeb6dd/68747470733a2f2f736875622e77656979616e2e746563682f6b67617264656e2f323032332f707974686f6e332d636f6f6b626f6f6b2e6a7067" data-canonical-src="https://shub.weiyan.tech/kgarden/2023/python3-cookbook.jpg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">图片</h2>\n<ol dir="auto">\n<li><a href="https://twitter.com/culturaltutor/status/1728746068324631017" rel="nofollow">世界上 14 座最伟大的宗教建筑</a></li>\n</ol>\n<p dir="auto">来源于推特的信息，对于排名和入选不少网友表示怀疑，但的确很震撼。</p>\n<p dir="auto">一. 日本京都金阁寺</p>\n<p dir="auto">金阁寺（“金阁寺”）曾经是邪恶幕府将军的私人住宅，后来被他的儿子改建为禅宗佛教寺庙。<br>\n那是600年前的事了。它在 20 世纪 50 年代被一位和尚烧毁，并逐梁重建。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286839669-669c4d5d-7872-4f70-a3ad-f9e7c63fb045.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4Mzk2NjktNjY5YzRkNWQtNzg3Mi00ZjcwLWEzYWQtZjllN2M2M2ZiMDQ1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBiZWJlZmZmMTA2ZDA0NDcwMGI4NmZjYjdlMWFjODcyZjg5ZDhiNmRlOTdiNzQ1YWNlZjdiM2MwMmI3NTdjM2UmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.tLzxbPyky_updWQhBhx_fOWB8pF12kzCrZDc76TaMvQ"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286839669-669c4d5d-7872-4f70-a3ad-f9e7c63fb045.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4Mzk2NjktNjY5YzRkNWQtNzg3Mi00ZjcwLWEzYWQtZjllN2M2M2ZiMDQ1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBiZWJlZmZmMTA2ZDA0NDcwMGI4NmZjYjdlMWFjODcyZjg5ZDhiNmRlOTdiNzQ1YWNlZjdiM2MwMmI3NTdjM2UmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.tLzxbPyky_updWQhBhx_fOWB8pF12kzCrZDc76TaMvQ" style="max-width: 100%;"></a></p>\n<p dir="auto">二. 英国达勒姆大教堂</p>\n<p dir="auto">英国最精美的诺曼大教堂，以其巨大的 11 世纪鼓柱和坚固的塔楼仍然占据着达勒姆市的主导地位。<br>\n现在它和一千年前一样庞大，仍然是卡斯伯特和贝德坟墓的所在地。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286839192-224a6f1d-2908-4d02-b6d5-391823dea235.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4MzkxOTItMjI0YTZmMWQtMjkwOC00ZDAyLWI2ZDUtMzkxODIzZGVhMjM1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg4ZTI0YTQ2ZWZmZGJjOWEyYzBjYjdmYzdkNzRmYjFjY2Q5MzhhZWMzNjdhNGM5Yzg3YTY2NTg3MjU4M2M3YTImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.YPCW9E3mRVUEcmb0Hp2AH_JH848ooZl6_BN65fyShBs"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286839192-224a6f1d-2908-4d02-b6d5-391823dea235.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4MzkxOTItMjI0YTZmMWQtMjkwOC00ZDAyLWI2ZDUtMzkxODIzZGVhMjM1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg4ZTI0YTQ2ZWZmZGJjOWEyYzBjYjdmYzdkNzRmYjFjY2Q5MzhhZWMzNjdhNGM5Yzg3YTY2NTg3MjU4M2M3YTImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.YPCW9E3mRVUEcmb0Hp2AH_JH848ooZl6_BN65fyShBs" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286839828-2a6f2f93-365c-4640-901c-6f1efaba8423.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4Mzk4MjgtMmE2ZjJmOTMtMzY1Yy00NjQwLTkwMWMtNmYxZWZhYmE4NDIzLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQ2MDllZWFlNDVkMDUyMTcxNDA4NzExN2U3NTY5NWNmY2U1MjY1MmI2ZTQ1M2U3NDlkYjM0NTg1ODQ0OWZhY2QmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.9mwqdbegwYIpNZtdY2ZuqtlrbCpAzxpHXxq3rjgqrQs"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286839828-2a6f2f93-365c-4640-901c-6f1efaba8423.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4Mzk4MjgtMmE2ZjJmOTMtMzY1Yy00NjQwLTkwMWMtNmYxZWZhYmE4NDIzLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQ2MDllZWFlNDVkMDUyMTcxNDA4NzExN2U3NTY5NWNmY2U1MjY1MmI2ZTQ1M2U3NDlkYjM0NTg1ODQ0OWZhY2QmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.9mwqdbegwYIpNZtdY2ZuqtlrbCpAzxpHXxq3rjgqrQs" style="max-width: 100%;"></a></p>\n<p dir="auto">三. 哈尔格林姆教堂，雷克雅未克，冰岛</p>\n<p dir="auto">世界上最伟大的现代主义教堂之一，将哥特式原则融入现代混凝土和钢材材料中。<br>\n一个富有表现力、迷人、近乎神奇的传统与现代结合的象征。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286840026-2467d813-fed5-4944-81f7-0085bcfa8a44.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDAwMjYtMjQ2N2Q4MTMtZmVkNS00OTQ0LTgxZjctMDA4NWJjZmE4YTQ0LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTgzNzZhYzMxM2UwNTIzNDJhZWM0ZTc0MzdmMGU1MGZkZjhlODE4MGI4ODJlMGFhYjA3YmE1OThmMDdhMzMwMDcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.0EJ1OtRb1kIKE7bCCnMREsL1pqYyf1qIf5lwY9u_xmc"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286840026-2467d813-fed5-4944-81f7-0085bcfa8a44.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDAwMjYtMjQ2N2Q4MTMtZmVkNS00OTQ0LTgxZjctMDA4NWJjZmE4YTQ0LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTgzNzZhYzMxM2UwNTIzNDJhZWM0ZTc0MzdmMGU1MGZkZjhlODE4MGI4ODJlMGFhYjA3YmE1OThmMDdhMzMwMDcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.0EJ1OtRb1kIKE7bCCnMREsL1pqYyf1qIf5lwY9u_xmc" style="max-width: 100%;"></a></p>\n<p dir="auto">四. 印度北阿坎德邦 Gurdwara Sri Hemkund Sahib</p>\n<p dir="auto">有时，让一座建筑变得如此非凡的不仅仅是建筑，还有它的位置。<br>\n位于喜马拉雅山 Garhwal 近 5,000 米高的 Gurdwara Sri Hemkund Sahib 也是如此。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286840637-3167b4ae-953b-4935-9912-9528d651cb7b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDA2MzctMzE2N2I0YWUtOTUzYi00OTM1LTk5MTItOTUyOGQ2NTFjYjdiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJkZDI1NDc5Nzc4YmQzNjQ3YmE5ODAzNjlhNjFkYjRkZDg3MTMzNTg3ZmVjYWE4NDUxZWQ2NDM5ZTUyYmVlMGMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0._ze5cH2npjU_g80QQmfEyvqudO39u97vaz4GlAcI29g"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286840637-3167b4ae-953b-4935-9912-9528d651cb7b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDA2MzctMzE2N2I0YWUtOTUzYi00OTM1LTk5MTItOTUyOGQ2NTFjYjdiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJkZDI1NDc5Nzc4YmQzNjQ3YmE5ODAzNjlhNjFkYjRkZDg3MTMzNTg3ZmVjYWE4NDUxZWQ2NDM5ZTUyYmVlMGMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0._ze5cH2npjU_g80QQmfEyvqudO39u97vaz4GlAcI29g" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286841015-1d8aadaa-2c3a-458d-b3af-e79629cc6d87.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDEwMTUtMWQ4YWFkYWEtMmMzYS00NThkLWIzYWYtZTc5NjI5Y2M2ZDg3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWViZWYxZTQ5OGJjZGE5MzdjZjFkYTBmMjIwNzMwMjcwNzgwZjhhMjBmZjNmZTFiMTliMmEyMDA1NDFkMzVkODMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.-ngIaoJqkRsxTLH_3496MSh3OL9iVApGAmVkUA2-k0Y"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286841015-1d8aadaa-2c3a-458d-b3af-e79629cc6d87.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDEwMTUtMWQ4YWFkYWEtMmMzYS00NThkLWIzYWYtZTc5NjI5Y2M2ZDg3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWViZWYxZTQ5OGJjZGE5MzdjZjFkYTBmMjIwNzMwMjcwNzgwZjhhMjBmZjNmZTFiMTliMmEyMDA1NDFkMzVkODMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.-ngIaoJqkRsxTLH_3496MSh3OL9iVApGAmVkUA2-k0Y" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286841144-e4cf3166-2ad5-4880-88af-94333aacfe7a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDExNDQtZTRjZjMxNjYtMmFkNS00ODgwLTg4YWYtOTQzMzNhYWNmZTdhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJiMTQ2NTFkMzZjYjAzMTViZWZhNDM2NTZlZmRjZTFjMTUxOTk4MTBlMTdlNTMzZTAyYzhiNzhjNTE3OGFjOTYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.3JDKkj5K1VcFaPvK2cKyJ8xaQ2oOlG1vzC9TXdcgm0g"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286841144-e4cf3166-2ad5-4880-88af-94333aacfe7a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDExNDQtZTRjZjMxNjYtMmFkNS00ODgwLTg4YWYtOTQzMzNhYWNmZTdhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJiMTQ2NTFkMzZjYjAzMTViZWZhNDM2NTZlZmRjZTFjMTUxOTk4MTBlMTdlNTMzZTAyYzhiNzhjNTE3OGFjOTYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.3JDKkj5K1VcFaPvK2cKyJ8xaQ2oOlG1vzC9TXdcgm0g" style="max-width: 100%;"></a></p>\n<p dir="auto">五. 匈牙利塞格德犹太教堂</p>\n<p dir="auto">这是一件不拘一格的杰作，由 Lipót Baumhorn 于 1902 年设计，充满了彩色玻璃和锻铁。<br>\n新艺术风格、新哥特式、新罗马式和新摩尔式建筑融合成一个建筑仙境。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286841503-d4a0b13d-8708-4798-855a-6ea4cdfcde8f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDE1MDMtZDRhMGIxM2QtODcwOC00Nzk4LTg1NWEtNmVhNGNkZmNkZThmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBmYmI0ZmFjYmU2NTRmNmJhYTAyOGU4MDI0YTM3YzJjZDllZTk0ZTRkYzQyZWQ2ZjU4ODk5MDYzZjE2MzcxMDkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.g-K2iL7P4TRUESfCZ2uJFOR5M8w6VZaRvVrlZxQ3mRE"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286841503-d4a0b13d-8708-4798-855a-6ea4cdfcde8f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDE1MDMtZDRhMGIxM2QtODcwOC00Nzk4LTg1NWEtNmVhNGNkZmNkZThmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBmYmI0ZmFjYmU2NTRmNmJhYTAyOGU4MDI0YTM3YzJjZDllZTk0ZTRkYzQyZWQ2ZjU4ODk5MDYzZjE2MzcxMDkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.g-K2iL7P4TRUESfCZ2uJFOR5M8w6VZaRvVrlZxQ3mRE" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286841681-2d3c34cc-a087-4aa8-b8a6-fb97e562142c.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDE2ODEtMmQzYzM0Y2MtYTA4Ny00YWE4LWI4YTYtZmI5N2U1NjIxNDJjLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTZiMmQ3NDkzOGM4OWI3ZjliN2NmODFjZjRiYjlhZWE5NTc5NTc0YjZiY2M3ZmY4MjAyYjhhZmY5YTYzOTgxNjAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.7ae_lYSCMc0z7VPnXBhRpFD9Arl3isStBkuoarbwT78"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286841681-2d3c34cc-a087-4aa8-b8a6-fb97e562142c.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDE2ODEtMmQzYzM0Y2MtYTA4Ny00YWE4LWI4YTYtZmI5N2U1NjIxNDJjLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTZiMmQ3NDkzOGM4OWI3ZjliN2NmODFjZjRiYjlhZWE5NTc5NTc0YjZiY2M3ZmY4MjAyYjhhZmY5YTYzOTgxNjAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.7ae_lYSCMc0z7VPnXBhRpFD9Arl3isStBkuoarbwT78" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286841802-2b829eeb-1fa7-4824-af10-6eed754c619d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDE4MDItMmI4MjllZWItMWZhNy00ODI0LWFmMTAtNmVlZDc1NGM2MTlkLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWYzYmU2YTRhYTg5NTYyNWVkMTg5MTgwMzcyYzdkYjU4Y2U0MGQ5YTY1MGExY2ZjZjliNmFhM2UzYjg2NTg3YWUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.Ns52wWLcs-p3-rWZdmfdIxJLI8rkIBSXXjxc7StENj8"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286841802-2b829eeb-1fa7-4824-af10-6eed754c619d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDE4MDItMmI4MjllZWItMWZhNy00ODI0LWFmMTAtNmVlZDc1NGM2MTlkLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWYzYmU2YTRhYTg5NTYyNWVkMTg5MTgwMzcyYzdkYjU4Y2U0MGQ5YTY1MGExY2ZjZjliNmFhM2UzYjg2NTg3YWUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.Ns52wWLcs-p3-rWZdmfdIxJLI8rkIBSXXjxc7StENj8" style="max-width: 100%;"></a></p>\n<p dir="auto">六. 迪尔瓦拉耆那教寺庙，印度拉贾斯坦邦</p>\n<p dir="auto">这座寺庙建于 11 世纪至 16 世纪，历时五百年，也许是索兰基风格建筑的最佳典范。<br>\n精心雕刻的雪白大理石的聚宝盆。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286841994-5d8fb631-4ccc-4413-8e13-749bb2c48fef.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDE5OTQtNWQ4ZmI2MzEtNGNjYy00NDEzLThlMTMtNzQ5YmIyYzQ4ZmVmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk4ZDNhY2U1ZjY4NTA3NTJmNTI2MjI2MGE4ZTljZWE4MjFjMDY4YzMyNjM3ZTc3NDFlNGFmOGQwZDFiNDcyYjImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.1zK4QfH3xWvOWn_DUE8p8qBmZ-RW6QFbAhmf6RpWCD4"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286841994-5d8fb631-4ccc-4413-8e13-749bb2c48fef.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDE5OTQtNWQ4ZmI2MzEtNGNjYy00NDEzLThlMTMtNzQ5YmIyYzQ4ZmVmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk4ZDNhY2U1ZjY4NTA3NTJmNTI2MjI2MGE4ZTljZWE4MjFjMDY4YzMyNjM3ZTc3NDFlNGFmOGQwZDFiNDcyYjImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.1zK4QfH3xWvOWn_DUE8p8qBmZ-RW6QFbAhmf6RpWCD4" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286842092-a4d58526-4f36-44fd-892b-c5268ae912b1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDIwOTItYTRkNTg1MjYtNGYzNi00NGZkLTg5MmItYzUyNjhhZTkxMmIxLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk3NDA2MjFiYjY3MDE1MzIzMjRlMTM2MDJmMjJjZTIzZGFmY2M5ZDc4ZmZmOTMyYzUxMzI1ZjAwYmFlYzRjMTMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.PR7DXr-ybRGzNQBWXDI62X5pgTr61EyWcndkiEjDdjE"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286842092-a4d58526-4f36-44fd-892b-c5268ae912b1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDIwOTItYTRkNTg1MjYtNGYzNi00NGZkLTg5MmItYzUyNjhhZTkxMmIxLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk3NDA2MjFiYjY3MDE1MzIzMjRlMTM2MDJmMjJjZTIzZGFmY2M5ZDc4ZmZmOTMyYzUxMzI1ZjAwYmFlYzRjMTMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.PR7DXr-ybRGzNQBWXDI62X5pgTr61EyWcndkiEjDdjE" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286842232-2879a51b-5157-477a-8606-88b6d085cac1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDIyMzItMjg3OWE1MWItNTE1Ny00NzdhLTg2MDYtODhiNmQwODVjYWMxLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWIxMjJlNzliNzEzZDkyNmZiMjUzNzMwYWVkM2QwNWYzZTU1MDAxNjY2NzcwZTkzYjk5YzNkMWMzYzFkMjUwOTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.OytPV6uJ4mA2H-m1K7DCDRqZnJj7bhfirrfPYNqZ4PU"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286842232-2879a51b-5157-477a-8606-88b6d085cac1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDIyMzItMjg3OWE1MWItNTE1Ny00NzdhLTg2MDYtODhiNmQwODVjYWMxLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWIxMjJlNzliNzEzZDkyNmZiMjUzNzMwYWVkM2QwNWYzZTU1MDAxNjY2NzcwZTkzYjk5YzNkMWMzYzFkMjUwOTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.OytPV6uJ4mA2H-m1K7DCDRqZnJj7bhfirrfPYNqZ4PU" style="max-width: 100%;"></a></p>\n<p dir="auto">七. 保加利亚索非亚亚历山大涅夫斯基大教堂</p>\n<p dir="auto">一座新拜占庭式建筑的纪念碑，经过三十年的建造，也许是保加利亚脱离奥斯曼帝国独立的顶峰。<br>\n外面有金色和绿色的圆顶瀑布；里面有一个阴暗的洞穴，里面有蜡烛和图标。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286842416-664ca61f-b548-4a5d-876a-0125cff93f7d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI0MTYtNjY0Y2E2MWYtYjU0OC00YTVkLTg3NmEtMDEyNWNmZjkzZjdkLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWMwNTE3YzQ0MjAxODVhYjZmYzJmZDE1NTE3MThlMWZiNTk2ODQwNTY1YTBhOWQwYTcyMjA2YmUyYTQ5YzdjODgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.xWrYyyUfmKU8gbwvP3bbu6SIGENi0ulKXr_yK7jkXe8"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286842416-664ca61f-b548-4a5d-876a-0125cff93f7d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI0MTYtNjY0Y2E2MWYtYjU0OC00YTVkLTg3NmEtMDEyNWNmZjkzZjdkLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWMwNTE3YzQ0MjAxODVhYjZmYzJmZDE1NTE3MThlMWZiNTk2ODQwNTY1YTBhOWQwYTcyMjA2YmUyYTQ5YzdjODgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.xWrYyyUfmKU8gbwvP3bbu6SIGENi0ulKXr_yK7jkXe8" style="max-width: 100%;"></a></p>\n<p dir="auto">八. 叙利亚大马士革大清真寺</p>\n<p dir="auto">世界上最伟大的建筑之一。这座拥有 4,000 年历史的礼拜场所，在这座从倭马亚王朝到奥斯曼帝国一次又一次改建的杰作的金色马赛克中，仍能看到腓尼基、罗马和早期基督教的遗迹。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286842608-83352af7-8a27-4a4f-bd55-dbae26036e38.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI2MDgtODMzNTJhZjctOGEyNy00YTRmLWJkNTUtZGJhZTI2MDM2ZTM4LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWE4MzMyZjY5NTY1ODkzYWZiZWQ5NmE3ZTI4OThjNTA1Njg4YTQzODY1NzRjNTZmYmI3ODczOTQzOWUyYzEzMmImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.lGQY7MLqFuuEhwM1Ofjnf-PewgFqDmdqmLjJTyPQ_yM"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286842608-83352af7-8a27-4a4f-bd55-dbae26036e38.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI2MDgtODMzNTJhZjctOGEyNy00YTRmLWJkNTUtZGJhZTI2MDM2ZTM4LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWE4MzMyZjY5NTY1ODkzYWZiZWQ5NmE3ZTI4OThjNTA1Njg4YTQzODY1NzRjNTZmYmI3ODczOTQzOWUyYzEzMmImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.lGQY7MLqFuuEhwM1Ofjnf-PewgFqDmdqmLjJTyPQ_yM" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286842729-7550fce1-d751-41b9-8c2a-89f4aaad2e0f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI3MjktNzU1MGZjZTEtZDc1MS00MWI5LThjMmEtODlmNGFhYWQyZTBmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWMxMTU5YWRmMmFkMTkwMGNkZTYxM2M2NzAzYmU4YTdlYmQ2YmY0MjFkMmMyNDJlOWQyZTNiMjI2Njg1ZGM2OGUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.3Zb7kyJ5LIj1DSgZEGYCbSm3ctRkXPTcKmMA7GCQ2RQ"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286842729-7550fce1-d751-41b9-8c2a-89f4aaad2e0f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI3MjktNzU1MGZjZTEtZDc1MS00MWI5LThjMmEtODlmNGFhYWQyZTBmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWMxMTU5YWRmMmFkMTkwMGNkZTYxM2M2NzAzYmU4YTdlYmQ2YmY0MjFkMmMyNDJlOWQyZTNiMjI2Njg1ZGM2OGUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.3Zb7kyJ5LIj1DSgZEGYCbSm3ctRkXPTcKmMA7GCQ2RQ" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286842873-af48b742-2e6a-4ff5-90cb-3aa23642eb66.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI4NzMtYWY0OGI3NDItMmU2YS00ZmY1LTkwY2ItM2FhMjM2NDJlYjY2LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBhZDJhYzJmMmUyMDNjZTVmYTY0OGFlNDllZDcwZTMwNGYwMTI3NmU3M2NkZmE0YTEwMTJiMzc5ZWVmYzQwZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.PMdXacX6tIY3Yw9aq-OXyS9Cqy_dfBQgnrEgyyIGLBY"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286842873-af48b742-2e6a-4ff5-90cb-3aa23642eb66.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI4NzMtYWY0OGI3NDItMmU2YS00ZmY1LTkwY2ItM2FhMjM2NDJlYjY2LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBhZDJhYzJmMmUyMDNjZTVmYTY0OGFlNDllZDcwZTMwNGYwMTI3NmU3M2NkZmE0YTEwMTJiMzc5ZWVmYzQwZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.PMdXacX6tIY3Yw9aq-OXyS9Cqy_dfBQgnrEgyyIGLBY" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286842972-ae72320a-260b-442b-821a-97a0f5f1163f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI5NzItYWU3MjMyMGEtMjYwYi00NDJiLTgyMWEtOTdhMGY1ZjExNjNmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTE3ZGFlNWE2Y2NjZDhkNWUwZjY2ZTNmZDNmZTI2ZmIwY2FkMTg1Yjc4NzAyODA1NWEyOWZlNGY2YmVmYWY3ZjkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.ze8nf-8kQFnW_JtayYPG9B1uznxpJGI1VRb6XRxk0eQ"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286842972-ae72320a-260b-442b-821a-97a0f5f1163f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDI5NzItYWU3MjMyMGEtMjYwYi00NDJiLTgyMWEtOTdhMGY1ZjExNjNmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTE3ZGFlNWE2Y2NjZDhkNWUwZjY2ZTNmZDNmZTI2ZmIwY2FkMTg1Yjc4NzAyODA1NWEyOWZlNGY2YmVmYWY3ZjkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.ze8nf-8kQFnW_JtayYPG9B1uznxpJGI1VRb6XRxk0eQ" style="max-width: 100%;"></a></p>\n<p dir="auto">九. 希腊德尔斐阿波罗神庙</p>\n<p dir="auto">曾经是古代世界最神圣的地方之一，是德尔斐神谕的故乡，也是所有希腊人的圣地。<br>\n尽管这座寺庙现已成为废墟，但其独特的神秘色彩依然存在，它拥有近 3,000 年的历史，位于帕纳苏斯山的高处。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286843162-48dd9744-ef44-4878-a63c-9beb8d09ac0f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDMxNjItNDhkZDk3NDQtZWY0NC00ODc4LWE2M2MtOWJlYjhkMDlhYzBmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWQ4NTdhMGM1NTQ0YTAzZmQ3ZTUyNWExZmQ5YzQ5YTgyYjFkOTVhNGMyZjFiYWIwN2IwZTE2OTVjZTFjZDkwYTUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.U9RcAKuCqP_PSNITRtCSGOJCB7QVdDgv6o5m3wkilNM"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286843162-48dd9744-ef44-4878-a63c-9beb8d09ac0f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDMxNjItNDhkZDk3NDQtZWY0NC00ODc4LWE2M2MtOWJlYjhkMDlhYzBmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWQ4NTdhMGM1NTQ0YTAzZmQ3ZTUyNWExZmQ5YzQ5YTgyYjFkOTVhNGMyZjFiYWIwN2IwZTE2OTVjZTFjZDkwYTUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.U9RcAKuCqP_PSNITRtCSGOJCB7QVdDgv6o5m3wkilNM" style="max-width: 100%;"></a></p>\n<p dir="auto">十. 阿布辛贝，埃及</p>\n<p dir="auto">一座古埃及神庙，由法老拉美西斯二世建造，旨在荣耀法老拉美西斯二世，成为尼罗河上神一般的永恒哨兵。<br>\n它在沙子下消失了两千多年，被挖掘出来，然后在建造阿斯旺大坝时，一块一块地移动。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286843400-d969d02a-bb92-4e11-8ef4-6d31a0aa05ab.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM0MDAtZDk2OWQwMmEtYmI5Mi00ZTExLThlZjQtNmQzMWEwYWEwNWFiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTU2NGY3NGE3MjlkZTE1Y2UwNzEyZWU5ZWRhNTNiMjNhZjM1YTBkODRjMGE3ZDI2YzdkOWM0MzVjYjYxMzU0NGImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.d3P3Gs03e2XZg0vSb7xJmxREdXfdeh1858k4gQQUvO8"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286843400-d969d02a-bb92-4e11-8ef4-6d31a0aa05ab.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM0MDAtZDk2OWQwMmEtYmI5Mi00ZTExLThlZjQtNmQzMWEwYWEwNWFiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTU2NGY3NGE3MjlkZTE1Y2UwNzEyZWU5ZWRhNTNiMjNhZjM1YTBkODRjMGE3ZDI2YzdkOWM0MzVjYjYxMzU0NGImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.d3P3Gs03e2XZg0vSb7xJmxREdXfdeh1858k4gQQUvO8" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286843493-bb27ebaa-17ca-4f4b-8d49-f485a6d7a451.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM0OTMtYmIyN2ViYWEtMTdjYS00ZjRiLThkNDktZjQ4NWE2ZDdhNDUxLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTliOWRmOWQyNjI3NTg4YjBiZTU1MGYzMzFkYWViN2UyZDAxZjNlZDFiZmJlNzI0MTY5OTYxMjU5MTE1NDgxNGYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.1WY-wOXeJFYvQEBi0CSXYNW50BzVz_sKOlyHOt9AvuA"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286843493-bb27ebaa-17ca-4f4b-8d49-f485a6d7a451.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM0OTMtYmIyN2ViYWEtMTdjYS00ZjRiLThkNDktZjQ4NWE2ZDdhNDUxLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTliOWRmOWQyNjI3NTg4YjBiZTU1MGYzMzFkYWViN2UyZDAxZjNlZDFiZmJlNzI0MTY5OTYxMjU5MTE1NDgxNGYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.1WY-wOXeJFYvQEBi0CSXYNW50BzVz_sKOlyHOt9AvuA" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286843617-3d7d1f9e-2f09-4bae-bec2-5046d118309e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM2MTctM2Q3ZDFmOWUtMmYwOS00YmFlLWJlYzItNTA0NmQxMTgzMDllLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTllYTlmYTlmOTUxODlkYzE2Yzg3Y2RlZmExNzhhYmZjMmYyZGJiYzc4NDZmZjE5NWZiMzBiOGM1ZDUxZDZiODMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.b0FjxO097YeahA44TopUwC5txskt6Y4wnlCxMhorVDU"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286843617-3d7d1f9e-2f09-4bae-bec2-5046d118309e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM2MTctM2Q3ZDFmOWUtMmYwOS00YmFlLWJlYzItNTA0NmQxMTgzMDllLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTllYTlmYTlmOTUxODlkYzE2Yzg3Y2RlZmExNzhhYmZjMmYyZGJiYzc4NDZmZjE5NWZiMzBiOGM1ZDUxZDZiODMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.b0FjxO097YeahA44TopUwC5txskt6Y4wnlCxMhorVDU" style="max-width: 100%;"></a></p>\n<p dir="auto">十一. 科特迪瓦亚穆苏克罗和平圣母大教堂</p>\n<p dir="auto">一座建于 20 世纪 80 年代的大教堂，令人难以置信。它的灵感来自罗马圣彼得大教堂，但并非直接模仿。据一些人说，它是世界上最大的教堂。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286843785-ec95b588-1ac9-454b-bb63-3d57ca161b9b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM3ODUtZWM5NWI1ODgtMWFjOS00NTRiLWJiNjMtM2Q1N2NhMTYxYjliLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU1MzVkZmJiNTkyNzFlMDliNjllZGQwYjcxNzViNDZjODRkZGVlMWEwNzIyNmNjZDBlODI3MmEwN2M5YTYwYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.pNy8tDficKoOZI4kzRsF731dzr9IHrnLtEueJ5-Yj2I"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286843785-ec95b588-1ac9-454b-bb63-3d57ca161b9b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM3ODUtZWM5NWI1ODgtMWFjOS00NTRiLWJiNjMtM2Q1N2NhMTYxYjliLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU1MzVkZmJiNTkyNzFlMDliNjllZGQwYjcxNzViNDZjODRkZGVlMWEwNzIyNmNjZDBlODI3MmEwN2M5YTYwYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.pNy8tDficKoOZI4kzRsF731dzr9IHrnLtEueJ5-Yj2I" style="max-width: 100%;"></a></p>\n<p dir="auto">十二. 帕拉蒂纳无伴奏合唱团，巴勒莫，西西里岛</p>\n<p dir="auto">许多建筑都被认为是独一无二的——这座建筑确实如此。前所未有的拜占庭式、诺曼式和法蒂玛式建筑矩阵；三种宗教和三种风格的结合。穆卡纳斯、半圆顶、圣像、圆形和尖形拱门……独一无二。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286843984-9a77a06f-3e02-45df-864b-b000e60cfbb1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM5ODQtOWE3N2EwNmYtM2UwMi00NWRmLTg2NGItYjAwMGU2MGNmYmIxLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWYwOTc4MjVmYjJjYWI0ZDFmMmNkMGIxMGExZmRkMjAyYzE3YWFhMGQ3ZTg4ZDY4MTg0NGU5MWM5MjQzMWIxYTAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.d-GcmvT09jfFIYLWsxquV2Hyrvq9nLPsRhcE4DG0JWg"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286843984-9a77a06f-3e02-45df-864b-b000e60cfbb1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDM5ODQtOWE3N2EwNmYtM2UwMi00NWRmLTg2NGItYjAwMGU2MGNmYmIxLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWYwOTc4MjVmYjJjYWI0ZDFmMmNkMGIxMGExZmRkMjAyYzE3YWFhMGQ3ZTg4ZDY4MTg0NGU5MWM5MjQzMWIxYTAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.d-GcmvT09jfFIYLWsxquV2Hyrvq9nLPsRhcE4DG0JWg" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286844066-e6653eed-4cdd-42f6-9345-97f8959cc1be.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQwNjYtZTY2NTNlZWQtNGNkZC00MmY2LTkzNDUtOTdmODk1OWNjMWJlLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThhNmRiYjk4Yzc3NmExMzM0MTdjNGY3NWIxZmIxMDMwYjc4OWNhZGNhYThjNDkzYWRjODY3ZDBhMWFlZDYzY2YmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.PNADjroxD3-gttzSIkK-gGUPjEwRZej3WgqHMbIwqMY"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286844066-e6653eed-4cdd-42f6-9345-97f8959cc1be.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQwNjYtZTY2NTNlZWQtNGNkZC00MmY2LTkzNDUtOTdmODk1OWNjMWJlLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThhNmRiYjk4Yzc3NmExMzM0MTdjNGY3NWIxZmIxMDMwYjc4OWNhZGNhYThjNDkzYWRjODY3ZDBhMWFlZDYzY2YmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.PNADjroxD3-gttzSIkK-gGUPjEwRZej3WgqHMbIwqMY" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286844156-5441eb25-29bc-4350-bdcb-0e5124bdd2df.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQxNTYtNTQ0MWViMjUtMjliYy00MzUwLWJkY2ItMGU1MTI0YmRkMmRmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThjYTA5NzE1MjI4YWRhNGY5MzdiMzM1M2UzMTk3MWYwNTgxYjI3MDhiZGZlZjdhZjA0Zjc3NWQwY2Y2OGNmOWEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.lxvYghdLBdFzOu7i9lw_jok66kEfP0iZhASuNoNczX0"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286844156-5441eb25-29bc-4350-bdcb-0e5124bdd2df.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQxNTYtNTQ0MWViMjUtMjliYy00MzUwLWJkY2ItMGU1MTI0YmRkMmRmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThjYTA5NzE1MjI4YWRhNGY5MzdiMzM1M2UzMTk3MWYwNTgxYjI3MDhiZGZlZjdhZjA0Zjc3NWQwY2Y2OGNmOWEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.lxvYghdLBdFzOu7i9lw_jok66kEfP0iZhASuNoNczX0" style="max-width: 100%;"></a></p>\n<p dir="auto">十三. 贵州梵净山寺庙，中国</p>\n<p dir="auto">这两座佛教寺庙坐落在武陵山脉深处的岩石上，其历史可以追溯到几个世纪前，看起来几乎是不可能的。<br>\n但它们是真实存在的 — 它们的瓦片由于极端的风力而采用了铁质制作！<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286844524-62c8cd2e-af48-40f6-a1cd-f1e02768323b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQ1MjQtNjJjOGNkMmUtYWY0OC00MGY2LWExY2QtZjFlMDI3NjgzMjNiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM5MWQ0NDU2MzllNDQxMGFlYzAwOWNiYjViOGM0ZDZjNWIwYmVlMWY1NDdkOGMxZWIzMmM4MDcwZWEyMWJkMGQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.xnCIHErEAAX14JuIXuYAgUCj0rXQRwbzeGgM0wOk0wg"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286844524-62c8cd2e-af48-40f6-a1cd-f1e02768323b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQ1MjQtNjJjOGNkMmUtYWY0OC00MGY2LWExY2QtZjFlMDI3NjgzMjNiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM5MWQ0NDU2MzllNDQxMGFlYzAwOWNiYjViOGM0ZDZjNWIwYmVlMWY1NDdkOGMxZWIzMmM4MDcwZWEyMWJkMGQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.xnCIHErEAAX14JuIXuYAgUCj0rXQRwbzeGgM0wOk0wg" style="max-width: 100%;"></a></p>\n<p dir="auto">十四. 印度泰米尔纳德邦米纳克希神庙</p>\n<p dir="auto">这座庞大的建筑群有着悠久的历史，可以追溯到 1,000 多年前。它是德拉威建筑的一个令人惊叹的典范，拥有 14 座门楼（仪式性入口塔楼），其中一些具有纪念意义，覆盖着精美的彩色雕塑。<br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286844678-2d1fcedf-d187-49fe-aad9-6253bd4d4b8a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQ2NzgtMmQxZmNlZGYtZDE4Ny00OWZlLWFhZDktNjI1M2JkNGQ0YjhhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg3ZmY2YzBjZGQzOGVlYjQxMTc3OTU4NWQxYzg0M2EyYmZhYjdlZmFjMWI2MGZjNTlhZGVhZjhkYWViNGJlYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.heQ2Q2HKCgPPkij1PKyR_GEK004iqU5A1h76xBr86oI"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286844678-2d1fcedf-d187-49fe-aad9-6253bd4d4b8a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQ2NzgtMmQxZmNlZGYtZDE4Ny00OWZlLWFhZDktNjI1M2JkNGQ0YjhhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg3ZmY2YzBjZGQzOGVlYjQxMTc3OTU4NWQxYzg0M2EyYmZhYjdlZmFjMWI2MGZjNTlhZGVhZjhkYWViNGJlYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.heQ2Q2HKCgPPkij1PKyR_GEK004iqU5A1h76xBr86oI" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286844786-6f759a67-6c00-43d6-a262-cb9805929c87.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQ3ODYtNmY3NTlhNjctNmMwMC00M2Q2LWEyNjItY2I5ODA1OTI5Yzg3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWVmN2NjMGY2YmRjYmU2NzViYzhjNWY4NTViNmYyOTY3YjFmOWFhNDViYzcyYzI5ZmU2NWRjYTdmNDIxOTZlNjgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.uW2_BUbq0lIBpMAQfWDv4_ydyscHO19o5v_bz8rCwbE"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286844786-6f759a67-6c00-43d6-a262-cb9805929c87.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQ3ODYtNmY3NTlhNjctNmMwMC00M2Q2LWEyNjItY2I5ODA1OTI5Yzg3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWVmN2NjMGY2YmRjYmU2NzViYzhjNWY4NTViNmYyOTY3YjFmOWFhNDViYzcyYzI5ZmU2NWRjYTdmNDIxOTZlNjgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.uW2_BUbq0lIBpMAQfWDv4_ydyscHO19o5v_bz8rCwbE" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/26101369/286844879-6d566e60-933d-4905-a2da-ffdd6d7f5b0e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQ4NzktNmQ1NjZlNjAtOTMzZC00OTA1LWEyZGEtZmZkZDZkN2Y1YjBlLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJhZGNjZjQ0NjYyOGZkNjc2ZmUyOTRjOGJiZWY4NjViOGNlOWNmNzk2YjBlMjk3Y2IxZGVjNjJkY2I2ZDllYjgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.GC-ArLYXvONg5ETvmjBS6l2-l7NF01qLkq8KKqOCyTQ"><img width="400" src="https://private-user-images.githubusercontent.com/26101369/286844879-6d566e60-933d-4905-a2da-ffdd6d7f5b0e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMxMzU4NTEsIm5iZiI6MTcxMzEzNTU1MSwicGF0aCI6Ii8yNjEwMTM2OS8yODY4NDQ4NzktNmQ1NjZlNjAtOTMzZC00OTA1LWEyZGEtZmZkZDZkN2Y1YjBlLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE0VDIyNTkxMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJhZGNjZjQ0NjYyOGZkNjc2ZmUyOTRjOGJiZWY4NjViOGNlOWNmNzk2YjBlMjk3Y2IxZGVjNjJkY2I2ZDllYjgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.GC-ArLYXvONg5ETvmjBS6l2-l7NF01qLkq8KKqOCyTQ" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.2-月刊'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '公众号许久没有更新了', 'number': 28, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/28', 'createdAt': '2023-12-01T02:36:37Z', 'lastEditedAt': '2023-12-08T05:34:13Z', 'updatedAt': '2023-12-08T05:34:13Z', 'body': '大家可能会发现自从 2023 年下半年以来，**"BioIT 爱好者"** 公众号的更新频率越来越低了。\r\n\r\n这里面除了个人私人时间越来越少以外，还有一个原因就是个人把写文章从语雀转移到了 [GitHub](https://github.com/shenweiyan/) 的 Issues 和 Discussions 上。\r\n\r\n<!-- more -->\r\n\r\n虽然在很长一段时间以来，个人一直都在使用 [语雀](https://www.yuque.com/shenweiyan) 来记录个人工作、生活的各种知识，但直到今年的下半年在考虑数据多平台使用+备份+搜索的一些使用场景时才发现语雀无法批量导出的一些弊端，更重要的一个原因是正如在 "[博客与写作的一些思考](https://github.com/shenweiyan/Knowledge-Garden/issues/34)" 里面所提到的 **"博客其实就是写给自己看的"**，**"大部分人写所谓 \'博客\' 到最后都把时间花在装潢 CSS HTML 主题上了"**！几经考虑以后，选择了 [GitHub](https://github.com/shenweiyan/) 的 Issues 和 Discussions，对于其中的优点：\r\n\r\n- 全免费，不需要租用域名和服务器；\r\n- 不需要过多折腾，对不懂技术的人来说非常友好；\r\n- Issues/Discussions 自带评论功能，不需要后期为博客安装评论插件；\r\n- GitHub 有网页版和手机 App，只要有网，我们可以随时随地发布文章，而不仅仅局限于电脑；\r\n- 发布到 GitHub 的内容，在 Google 的搜索结果中有非常高的权重；\r\n- 回归 CommonMark 的编辑，方便各种支持 Markdown 平台间的备份迁移；\r\n- 借助 GitHub REST/GraphQL API 可以很方便实现 Issues/Discussions 的导入导出；\r\n- 借助 GitHub Pages 和 GitHub Actions，可以轻松把 Issues/Discussions 转化成静态博客\r\n\r\n借助一些开源的工具，个人目前大部分文章都已经从语 [语雀](https://www.yuque.com/shenweiyan) 同步到了 [shenweiyan/Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden)，并后续会继续在 GitHub 进行更新，由于[公众号的各种限制和封闭性](https://www.yuque.com/shenweiyan/articles/qw325a)，如精力和时间允许后续会同步至公众号。\r\n\r\n![Knowledge-Garden Repo image](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/github-knowledge-garden.png)\r\n\r\n![Knowledge-Garden Discussions image](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/knowledge-garden-discussions.png)\r\n', 'bodyText': '大家可能会发现自从 2023 年下半年以来，"BioIT 爱好者" 公众号的更新频率越来越低了。\n这里面除了个人私人时间越来越少以外，还有一个原因就是个人把写文章从语雀转移到了 GitHub 的 Issues 和 Discussions 上。\n\n虽然在很长一段时间以来，个人一直都在使用 语雀 来记录个人工作、生活的各种知识，但直到今年的下半年在考虑数据多平台使用+备份+搜索的一些使用场景时才发现语雀无法批量导出的一些弊端，更重要的一个原因是正如在 "博客与写作的一些思考" 里面所提到的 "博客其实就是写给自己看的"，"大部分人写所谓 \'博客\' 到最后都把时间花在装潢 CSS HTML 主题上了"！几经考虑以后，选择了 GitHub 的 Issues 和 Discussions，对于其中的优点：\n\n全免费，不需要租用域名和服务器；\n不需要过多折腾，对不懂技术的人来说非常友好；\nIssues/Discussions 自带评论功能，不需要后期为博客安装评论插件；\nGitHub 有网页版和手机 App，只要有网，我们可以随时随地发布文章，而不仅仅局限于电脑；\n发布到 GitHub 的内容，在 Google 的搜索结果中有非常高的权重；\n回归 CommonMark 的编辑，方便各种支持 Markdown 平台间的备份迁移；\n借助 GitHub REST/GraphQL API 可以很方便实现 Issues/Discussions 的导入导出；\n借助 GitHub Pages 和 GitHub Actions，可以轻松把 Issues/Discussions 转化成静态博客\n\n借助一些开源的工具，个人目前大部分文章都已经从语 语雀 同步到了 shenweiyan/Knowledge-Garden，并后续会继续在 GitHub 进行更新，由于公众号的各种限制和封闭性，如精力和时间允许后续会同步至公众号。', 'bodyHTML': '<p dir="auto">大家可能会发现自从 2023 年下半年以来，<strong>"BioIT 爱好者"</strong> 公众号的更新频率越来越低了。</p>\n<p dir="auto">这里面除了个人私人时间越来越少以外，还有一个原因就是个人把写文章从语雀转移到了 <a href="https://github.com/shenweiyan/">GitHub</a> 的 Issues 和 Discussions 上。</p>\n\n<p dir="auto">虽然在很长一段时间以来，个人一直都在使用 <a href="https://www.yuque.com/shenweiyan" rel="nofollow">语雀</a> 来记录个人工作、生活的各种知识，但直到今年的下半年在考虑数据多平台使用+备份+搜索的一些使用场景时才发现语雀无法批量导出的一些弊端，更重要的一个原因是正如在 "<a href="https://github.com/shenweiyan/Knowledge-Garden/issues/34" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Knowledge-Garden/discussions/34/hovercard">博客与写作的一些思考</a>" 里面所提到的 <strong>"博客其实就是写给自己看的"</strong>，<strong>"大部分人写所谓 \'博客\' 到最后都把时间花在装潢 CSS HTML 主题上了"</strong>！几经考虑以后，选择了 <a href="https://github.com/shenweiyan/">GitHub</a> 的 Issues 和 Discussions，对于其中的优点：</p>\n<ul dir="auto">\n<li>全免费，不需要租用域名和服务器；</li>\n<li>不需要过多折腾，对不懂技术的人来说非常友好；</li>\n<li>Issues/Discussions 自带评论功能，不需要后期为博客安装评论插件；</li>\n<li>GitHub 有网页版和手机 App，只要有网，我们可以随时随地发布文章，而不仅仅局限于电脑；</li>\n<li>发布到 GitHub 的内容，在 Google 的搜索结果中有非常高的权重；</li>\n<li>回归 CommonMark 的编辑，方便各种支持 Markdown 平台间的备份迁移；</li>\n<li>借助 GitHub REST/GraphQL API 可以很方便实现 Issues/Discussions 的导入导出；</li>\n<li>借助 GitHub Pages 和 GitHub Actions，可以轻松把 Issues/Discussions 转化成静态博客</li>\n</ul>\n<p dir="auto">借助一些开源的工具，个人目前大部分文章都已经从语 <a href="https://www.yuque.com/shenweiyan" rel="nofollow">语雀</a> 同步到了 <a href="https://github.com/shenweiyan/Knowledge-Garden">shenweiyan/Knowledge-Garden</a>，并后续会继续在 GitHub 进行更新，由于<a href="https://www.yuque.com/shenweiyan/articles/qw325a" rel="nofollow">公众号的各种限制和封闭性</a>，如精力和时间允许后续会同步至公众号。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f504a8754c3a9e3e497a00b98dc75b152583abcd16c3124df3ba46101dbc8198/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6769746875622d6b6e6f776c656467652d67617264656e2e706e67"><img src="https://camo.githubusercontent.com/f504a8754c3a9e3e497a00b98dc75b152583abcd16c3124df3ba46101dbc8198/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6769746875622d6b6e6f776c656467652d67617264656e2e706e67" alt="Knowledge-Garden Repo image" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/github-knowledge-garden.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/26e48688a18afd0fcb66101da438c7aacd9d600a922cab8740c62f8f680a285c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6b6e6f776c656467652d67617264656e2d64697363757373696f6e732e706e67"><img src="https://camo.githubusercontent.com/26e48688a18afd0fcb66101da438c7aacd9d600a922cab8740c62f8f680a285c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6b6e6f776c656467652d67617264656e2d64697363757373696f6e732e706e67" alt="Knowledge-Garden Discussions image" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/knowledge-garden-discussions.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': [{'name': '公众号'}]}, 'comments': {'nodes': []}}, {'title': 'Python3 编译安装 --with-openssl 无效的问题', 'number': 27, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/27', 'createdAt': '2023-12-01T02:32:24Z', 'lastEditedAt': None, 'updatedAt': '2024-01-03T07:57:48Z', 'body': '很多人在使用 Python3 经常会遇到一些 openssl 版本太低从而导致包无法正常使用的问题，尤其是 `urllib3` 这个包。\r\n```python\r\nPython 3.9.18 (main, Sep  7 2023, 14:32:17) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux\r\nType "help", "copyright", "credits" or "license" for more information.\r\n>>> import requests\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/requests/__init__.py", line 43, in <module>\r\n    import urllib3\r\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py", line 41, in <module>\r\n    raise ImportError(\r\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\r\n>>> import ssl\r\n>>> import urllib3\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py", line 41, in <module>\r\n    raise ImportError(\r\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\r\n```\r\n\r\n网络上有很多关于这方面的教程，主要解决方案：\r\n\r\n1. 降级 `urllib3` 的版本，例如：`pip install --upgrade urllib3==1.26.15`；\r\n2. 重新安装一个更高版本的 OpenSSL，然后备份并替换系统原来的 openssl，最后重新编译安装 Python。\r\n\r\n个人觉得这两个方法都不够好，尤其是第二个方法 —— \r\n\r\n- 新装了一个更高版本的 OpenSSL，但是又不想替换系统原来的 openssl 以免出现新的问题（或者没有管理员权限）；\r\n- 在编译的时候使用 `--with-openssl` 指定了新装的 OpenSSL 路径，编译安装完成后 Python **仍然使用旧版本的 OpenSSL**；\r\n\r\n很不幸的是，个人在 CentOS 7.3 + Python-3.9.18 就遇到了这个问题。\r\n\r\n1. 新装了 OpenSSL 3.0.10 \r\n```\r\nwget https://www.openssl.org/source/openssl-3.0.10.tar.gz --no-check-certificate\r\ntar zvxf openssl-3.0.10.tar.gz\r\ncd openssl-3.0.10\r\n./config --prefix=/usr/local/software/openssl-3.0.10 shared zlib\r\nmake && make install\r\n```\r\n\r\n2. 添加 `~/.bashrc` 环境变量\r\n```\r\nexport PATH=/usr/local/software/openssl-3.0.10/bin:$PATH\r\nexport LD_LIBRARY_PATH=/usr/local/software/openssl-3.0.10/lib64:$LD_LIBRARY_PATH\r\n```\r\n\r\n3. 重新编译安装 Python-3.9.18\r\n```\r\n./configure --prefix=/usr/local/software/python-3.9.18 --with-openssl=/usr/local/software/openssl-3.0.10/\r\nmake && make install\r\n```\r\n\r\n等编译完成后，你会神奇的发现重新编译安装后 Python 3.9.18 **仍然使用旧版本的 OpenSSL (OpenSSL 1.0.2k-fips  26 Jan 2017)**！\r\n\r\n其实，这还是因为 Python 在重新编译的时候没有识别到新编译的 OpenSSL，因此，我们需要把重新编译的命令调整一下：\r\n```\r\n/configure --prefix=/usr/local/software/python-3.9.18 \\\r\n--with-openssl=/usr/local/software/openssl-3.0.10/ \\\r\nLDFLAGS="-L/usr/local/software/openssl-3.0.10/lib64" \\\r\nCPPFLAGS="-I/usr/local/software/openssl-3.0.10/include" \\\r\nPKG_CONFIG_PATH="/usr/local/software/openssl-3.0.10/lib64/pkgconfig"\r\n```\r\n\r\n这样子一来，问题就迎刃而解了，编译安装完后，你会发现 Python 3.9.18 已经成功用用上了 OpenSSL 3.0.10 1 Aug 2023：\r\n```\r\n$ python3 -c "import ssl; print(ssl.OPENSSL_VERSION)"\r\nOpenSSL 3.0.10 1 Aug 2023\r\n```\r\n![OpenSSL 3.0.10 on Python3.9.18](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/python-3.9.18-openssl-3.0.10.png)\r\n\r\n## 参考资料\r\n\r\n1. [Drop support for OpenSSL<1.1.1 - urllib3/urllib3#2168](https://github.com/urllib3/urllib3/issues/2168)\r\n\r\n', 'bodyText': '很多人在使用 Python3 经常会遇到一些 openssl 版本太低从而导致包无法正常使用的问题，尤其是 urllib3 这个包。\nPython 3.9.18 (main, Sep  7 2023, 14:32:17) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> import requests\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/requests/__init__.py", line 43, in <module>\n    import urllib3\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py", line 41, in <module>\n    raise ImportError(\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\n>>> import ssl\n>>> import urllib3\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py", line 41, in <module>\n    raise ImportError(\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\n网络上有很多关于这方面的教程，主要解决方案：\n\n降级 urllib3 的版本，例如：pip install --upgrade urllib3==1.26.15；\n重新安装一个更高版本的 OpenSSL，然后备份并替换系统原来的 openssl，最后重新编译安装 Python。\n\n个人觉得这两个方法都不够好，尤其是第二个方法 ——\n\n新装了一个更高版本的 OpenSSL，但是又不想替换系统原来的 openssl 以免出现新的问题（或者没有管理员权限）；\n在编译的时候使用 --with-openssl 指定了新装的 OpenSSL 路径，编译安装完成后 Python 仍然使用旧版本的 OpenSSL；\n\n很不幸的是，个人在 CentOS 7.3 + Python-3.9.18 就遇到了这个问题。\n\n新装了 OpenSSL 3.0.10\n\nwget https://www.openssl.org/source/openssl-3.0.10.tar.gz --no-check-certificate\ntar zvxf openssl-3.0.10.tar.gz\ncd openssl-3.0.10\n./config --prefix=/usr/local/software/openssl-3.0.10 shared zlib\nmake && make install\n\n\n添加 ~/.bashrc 环境变量\n\nexport PATH=/usr/local/software/openssl-3.0.10/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/software/openssl-3.0.10/lib64:$LD_LIBRARY_PATH\n\n\n重新编译安装 Python-3.9.18\n\n./configure --prefix=/usr/local/software/python-3.9.18 --with-openssl=/usr/local/software/openssl-3.0.10/\nmake && make install\n\n等编译完成后，你会神奇的发现重新编译安装后 Python 3.9.18 仍然使用旧版本的 OpenSSL (OpenSSL 1.0.2k-fips  26 Jan 2017)！\n其实，这还是因为 Python 在重新编译的时候没有识别到新编译的 OpenSSL，因此，我们需要把重新编译的命令调整一下：\n/configure --prefix=/usr/local/software/python-3.9.18 \\\n--with-openssl=/usr/local/software/openssl-3.0.10/ \\\nLDFLAGS="-L/usr/local/software/openssl-3.0.10/lib64" \\\nCPPFLAGS="-I/usr/local/software/openssl-3.0.10/include" \\\nPKG_CONFIG_PATH="/usr/local/software/openssl-3.0.10/lib64/pkgconfig"\n\n这样子一来，问题就迎刃而解了，编译安装完后，你会发现 Python 3.9.18 已经成功用用上了 OpenSSL 3.0.10 1 Aug 2023：\n$ python3 -c "import ssl; print(ssl.OPENSSL_VERSION)"\nOpenSSL 3.0.10 1 Aug 2023\n\n\n参考资料\n\nDrop support for OpenSSL<1.1.1 - urllib3/urllib3#2168', 'bodyHTML': '<p dir="auto">很多人在使用 Python3 经常会遇到一些 openssl 版本太低从而导致包无法正常使用的问题，尤其是 <code class="notranslate">urllib3</code> 这个包。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Python 3.9.18 (main, Sep  7 2023, 14:32:17) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import requests\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;/usr/local/software/python-3.9.18/lib/python3.9/site-packages/requests/__init__.py&quot;, line 43, in &lt;module&gt;\n    import urllib3\n  File &quot;/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py&quot;, line 41, in &lt;module&gt;\n    raise ImportError(\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\n&gt;&gt;&gt; import ssl\n&gt;&gt;&gt; import urllib3\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py&quot;, line 41, in &lt;module&gt;\n    raise ImportError(\nImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168"><pre class="notranslate"><span class="pl-v">Python</span> <span class="pl-c1">3.9</span><span class="pl-c1">.18</span> (<span class="pl-s1">main</span>, <span class="pl-v">Sep</span>  <span class="pl-c1">7</span> <span class="pl-c1">2023</span>, <span class="pl-c1">14</span>:<span class="pl-c1">32</span>:<span class="pl-c1">17</span>) \n[<span class="pl-v">GCC</span> <span class="pl-c1">4.8</span><span class="pl-c1">.5</span> <span class="pl-c1">20150623</span> (<span class="pl-v">Red</span> <span class="pl-v">Hat</span> <span class="pl-c1">4.8</span><span class="pl-c1">.5</span><span class="pl-c1">-</span><span class="pl-c1">44</span>)] <span class="pl-s1">on</span> <span class="pl-s1">linux</span>\n<span class="pl-v">Type</span> <span class="pl-s">"help"</span>, <span class="pl-s">"copyright"</span>, <span class="pl-s">"credits"</span> <span class="pl-c1">or</span> <span class="pl-s">"license"</span> <span class="pl-k">for</span> <span class="pl-s1">more</span> <span class="pl-s1">information</span>.\n<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">requests</span>\n<span class="pl-v">Traceback</span> (<span class="pl-s1">most</span> <span class="pl-s1">recent</span> <span class="pl-s1">call</span> <span class="pl-s1">last</span>):\n  <span class="pl-v">File</span> <span class="pl-s">"&lt;stdin&gt;"</span>, <span class="pl-s1">line</span> <span class="pl-c1">1</span>, <span class="pl-c1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n  <span class="pl-v">File</span> <span class="pl-s">"/usr/local/software/python-3.9.18/lib/python3.9/site-packages/requests/__init__.py"</span>, <span class="pl-s1">line</span> <span class="pl-c1">43</span>, <span class="pl-s1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n    <span class="pl-s1">import</span> <span class="pl-s1">urllib3</span>\n  <span class="pl-v">File</span> <span class="pl-s">"/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py"</span>, <span class="pl-s1">line</span> <span class="pl-c1">41</span>, <span class="pl-s1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n    <span class="pl-s1">raise</span> <span class="pl-v">ImportError</span>(\n<span class="pl-v">ImportError</span>: <span class="pl-s1">urllib3</span> <span class="pl-s1">v2</span><span class="pl-c1">.0</span> <span class="pl-s1">only</span> <span class="pl-s1">supports</span> <span class="pl-v">OpenSSL</span> <span class="pl-c1">1.1</span>.<span class="pl-c1">1</span><span class="pl-c1">+</span>, <span class="pl-s1">currently</span> <span class="pl-s1">the</span> <span class="pl-s">\'ssl\'</span> <span class="pl-s1">module</span> <span class="pl-c1">is</span> <span class="pl-s1">compiled</span> <span class="pl-k">with</span> <span class="pl-s">\'OpenSSL 1.0.2k-fips  26 Jan 2017\'</span>. <span class="pl-v">See</span>: <span class="pl-s1">https</span>:<span class="pl-s1"></span><span class="pl-c1">//</span><span class="pl-s1">github</span>.<span class="pl-s1">com</span><span class="pl-c1">/</span><span class="pl-s1">urllib3</span><span class="pl-c1">/</span><span class="pl-s1">urllib3</span><span class="pl-c1">/</span><span class="pl-s1">issues</span><span class="pl-c1">/</span><span class="pl-c1">2168</span>\n<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">ssl</span>\n<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">urllib3</span>\n<span class="pl-v">Traceback</span> (<span class="pl-s1">most</span> <span class="pl-s1">recent</span> <span class="pl-s1">call</span> <span class="pl-s1">last</span>):\n  <span class="pl-v">File</span> <span class="pl-s">"&lt;stdin&gt;"</span>, <span class="pl-s1">line</span> <span class="pl-c1">1</span>, <span class="pl-s1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n  <span class="pl-v">File</span> <span class="pl-s">"/usr/local/software/python-3.9.18/lib/python3.9/site-packages/urllib3/__init__.py"</span>, <span class="pl-s1">line</span> <span class="pl-c1">41</span>, <span class="pl-s1">in</span> <span class="pl-c1">&lt;</span><span class="pl-s1">module</span><span class="pl-c1">&gt;</span>\n    <span class="pl-s1">raise</span> <span class="pl-v">ImportError</span>(\n<span class="pl-v">ImportError</span>: <span class="pl-s1">urllib3</span> <span class="pl-s1">v2</span>.<span class="pl-c1">0</span> <span class="pl-s1">only</span> <span class="pl-s1">supports</span> <span class="pl-v">OpenSSL</span> <span class="pl-c1">1.1</span><span class="pl-c1">.1</span><span class="pl-c1">+</span>, <span class="pl-s1">currently</span> <span class="pl-s1">the</span> <span class="pl-s">\'ssl\'</span> <span class="pl-s1">module</span> <span class="pl-c1">is</span> <span class="pl-s1">compiled</span> <span class="pl-s1">with</span> <span class="pl-s">\'OpenSSL 1.0.2k-fips  26 Jan 2017\'</span>. <span class="pl-v">See</span>: <span class="pl-s1">https</span>:<span class="pl-c1">//</span><span class="pl-s1">github</span>.<span class="pl-s1">com</span><span class="pl-c1">/</span><span class="pl-s1">urllib3</span><span class="pl-c1">/</span><span class="pl-s1">urllib3</span><span class="pl-c1">/</span><span class="pl-s1">issues</span><span class="pl-c1">/</span><span class="pl-c1">2168</span></pre></div>\n<p dir="auto">网络上有很多关于这方面的教程，主要解决方案：</p>\n<ol dir="auto">\n<li>降级 <code class="notranslate">urllib3</code> 的版本，例如：<code class="notranslate">pip install --upgrade urllib3==1.26.15</code>；</li>\n<li>重新安装一个更高版本的 OpenSSL，然后备份并替换系统原来的 openssl，最后重新编译安装 Python。</li>\n</ol>\n<p dir="auto">个人觉得这两个方法都不够好，尤其是第二个方法 ——</p>\n<ul dir="auto">\n<li>新装了一个更高版本的 OpenSSL，但是又不想替换系统原来的 openssl 以免出现新的问题（或者没有管理员权限）；</li>\n<li>在编译的时候使用 <code class="notranslate">--with-openssl</code> 指定了新装的 OpenSSL 路径，编译安装完成后 Python <strong>仍然使用旧版本的 OpenSSL</strong>；</li>\n</ul>\n<p dir="auto">很不幸的是，个人在 CentOS 7.3 + Python-3.9.18 就遇到了这个问题。</p>\n<ol dir="auto">\n<li>新装了 OpenSSL 3.0.10</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="wget https://www.openssl.org/source/openssl-3.0.10.tar.gz --no-check-certificate\ntar zvxf openssl-3.0.10.tar.gz\ncd openssl-3.0.10\n./config --prefix=/usr/local/software/openssl-3.0.10 shared zlib\nmake &amp;&amp; make install"><pre class="notranslate"><code class="notranslate">wget https://www.openssl.org/source/openssl-3.0.10.tar.gz --no-check-certificate\ntar zvxf openssl-3.0.10.tar.gz\ncd openssl-3.0.10\n./config --prefix=/usr/local/software/openssl-3.0.10 shared zlib\nmake &amp;&amp; make install\n</code></pre></div>\n<ol start="2" dir="auto">\n<li>添加 <code class="notranslate">~/.bashrc</code> 环境变量</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export PATH=/usr/local/software/openssl-3.0.10/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/software/openssl-3.0.10/lib64:$LD_LIBRARY_PATH"><pre class="notranslate"><code class="notranslate">export PATH=/usr/local/software/openssl-3.0.10/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/software/openssl-3.0.10/lib64:$LD_LIBRARY_PATH\n</code></pre></div>\n<ol start="3" dir="auto">\n<li>重新编译安装 Python-3.9.18</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure --prefix=/usr/local/software/python-3.9.18 --with-openssl=/usr/local/software/openssl-3.0.10/\nmake &amp;&amp; make install"><pre class="notranslate"><code class="notranslate">./configure --prefix=/usr/local/software/python-3.9.18 --with-openssl=/usr/local/software/openssl-3.0.10/\nmake &amp;&amp; make install\n</code></pre></div>\n<p dir="auto">等编译完成后，你会神奇的发现重新编译安装后 Python 3.9.18 <strong>仍然使用旧版本的 OpenSSL (OpenSSL 1.0.2k-fips  26 Jan 2017)</strong>！</p>\n<p dir="auto">其实，这还是因为 Python 在重新编译的时候没有识别到新编译的 OpenSSL，因此，我们需要把重新编译的命令调整一下：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="/configure --prefix=/usr/local/software/python-3.9.18 \\\n--with-openssl=/usr/local/software/openssl-3.0.10/ \\\nLDFLAGS=&quot;-L/usr/local/software/openssl-3.0.10/lib64&quot; \\\nCPPFLAGS=&quot;-I/usr/local/software/openssl-3.0.10/include&quot; \\\nPKG_CONFIG_PATH=&quot;/usr/local/software/openssl-3.0.10/lib64/pkgconfig&quot;"><pre class="notranslate"><code class="notranslate">/configure --prefix=/usr/local/software/python-3.9.18 \\\n--with-openssl=/usr/local/software/openssl-3.0.10/ \\\nLDFLAGS="-L/usr/local/software/openssl-3.0.10/lib64" \\\nCPPFLAGS="-I/usr/local/software/openssl-3.0.10/include" \\\nPKG_CONFIG_PATH="/usr/local/software/openssl-3.0.10/lib64/pkgconfig"\n</code></pre></div>\n<p dir="auto">这样子一来，问题就迎刃而解了，编译安装完后，你会发现 Python 3.9.18 已经成功用用上了 OpenSSL 3.0.10 1 Aug 2023：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ python3 -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;\nOpenSSL 3.0.10 1 Aug 2023"><pre class="notranslate"><code class="notranslate">$ python3 -c "import ssl; print(ssl.OPENSSL_VERSION)"\nOpenSSL 3.0.10 1 Aug 2023\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8fa2ab4157155daae5459565a1da6daf5a0bcf24d1a5611819985fc63e733328/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f707974686f6e2d332e392e31382d6f70656e73736c2d332e302e31302e706e67"><img src="https://camo.githubusercontent.com/8fa2ab4157155daae5459565a1da6daf5a0bcf24d1a5611819985fc63e733328/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f707974686f6e2d332e392e31382d6f70656e73736c2d332e302e31302e706e67" alt="OpenSSL 3.0.10 on Python3.9.18" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/python-3.9.18-openssl-3.0.10.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li><a href="https://github.com/urllib3/urllib3/issues/2168" data-hovercard-type="issue" data-hovercard-url="/urllib3/urllib3/issues/2168/hovercard">Drop support for OpenSSL&lt;1.1.1 - urllib3/urllib3#2168</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.5-Python'}]}, 'comments': {'nodes': []}}, {'title': '富文本编辑器与 md 语法的一些困惑', 'number': 26, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/26', 'createdAt': '2023-12-01T02:29:00Z', 'lastEditedAt': '2023-12-01T05:34:04Z', 'updatedAt': '2023-12-01T05:34:04Z', 'body': '在语雀写文档写得多的，会对原始的 Markdown 越来越不敏感。\r\n\r\n语雀的富文本编辑器虽然支持的依然是 markdown，但也有它自身的一些与传统 markdown 不一样的写法，例如 [高亮块](https://www.yuque.com/yuque/gpvawt/rhhxkx)。这样的编辑器把 markdown 的源码给隐藏了——在用户编辑的时候实时进行渲染，这样对于不熟悉 markdown 的用户也极容易上手。\r\n\r\n<!-- more -->\r\n\r\n但带来了一个问题，就是使用 markdown 对文档进行导出的时候，有时候会导致 markdown 格式错乱，尤其是当我们想要把语雀的一些文档导出到其他平台时候，这个问题特别烦人。\r\n\r\n![Markdown 语法异常](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/md-error.png)\r\n\r\n回到 GitHub，重新接触纯 Markdown 格式的写法，才真正感觉到这种模式的好处 —— 方便其他支持 Markdown 语法平台的转移，又可以最大限度解决 Markdown 语法错乱的尴尬。\r\n\r\n但也有不好的地方，就是对于多级有序缩进，插入代码后，有序序列(多级缩进)会被打断。。。。\r\n\r\n## 嵌套列表\r\n\r\n通过增加空格，Github 可以实现在嵌套列表中插入代码块；但是这样的做法在 MkDocs 中是有问题的。关于 MkDocs 的嵌套列表，在 https://github.com/mkdocs/mkdocs/issues/545 有一个讨论。\r\n\r\n参考的一个方法：<https://github.com/mkdocs/mkdocs/issues/2153>，即使用 [superfences](https://facelessuser.github.io/pymdown-extensions/extensions/superfences/) 插件，加上基于 Python 特有的 4 的倍数个空格进行缩进，可以比较好解决这个问题。\r\n', 'bodyText': '在语雀写文档写得多的，会对原始的 Markdown 越来越不敏感。\n语雀的富文本编辑器虽然支持的依然是 markdown，但也有它自身的一些与传统 markdown 不一样的写法，例如 高亮块。这样的编辑器把 markdown 的源码给隐藏了——在用户编辑的时候实时进行渲染，这样对于不熟悉 markdown 的用户也极容易上手。\n\n但带来了一个问题，就是使用 markdown 对文档进行导出的时候，有时候会导致 markdown 格式错乱，尤其是当我们想要把语雀的一些文档导出到其他平台时候，这个问题特别烦人。\n\n回到 GitHub，重新接触纯 Markdown 格式的写法，才真正感觉到这种模式的好处 —— 方便其他支持 Markdown 语法平台的转移，又可以最大限度解决 Markdown 语法错乱的尴尬。\n但也有不好的地方，就是对于多级有序缩进，插入代码后，有序序列(多级缩进)会被打断。。。。\n嵌套列表\n通过增加空格，Github 可以实现在嵌套列表中插入代码块；但是这样的做法在 MkDocs 中是有问题的。关于 MkDocs 的嵌套列表，在 mkdocs/mkdocs#545 有一个讨论。\n参考的一个方法：mkdocs/mkdocs#2153，即使用 superfences 插件，加上基于 Python 特有的 4 的倍数个空格进行缩进，可以比较好解决这个问题。', 'bodyHTML': '<p dir="auto">在语雀写文档写得多的，会对原始的 Markdown 越来越不敏感。</p>\n<p dir="auto">语雀的富文本编辑器虽然支持的依然是 markdown，但也有它自身的一些与传统 markdown 不一样的写法，例如 <a href="https://www.yuque.com/yuque/gpvawt/rhhxkx" rel="nofollow">高亮块</a>。这样的编辑器把 markdown 的源码给隐藏了——在用户编辑的时候实时进行渲染，这样对于不熟悉 markdown 的用户也极容易上手。</p>\n\n<p dir="auto">但带来了一个问题，就是使用 markdown 对文档进行导出的时候，有时候会导致 markdown 格式错乱，尤其是当我们想要把语雀的一些文档导出到其他平台时候，这个问题特别烦人。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0b0f9a6d8a4987e2278a883e89755f1c96af21a57e40d18fca87ce027cc2124e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d642d6572726f722e706e67"><img src="https://camo.githubusercontent.com/0b0f9a6d8a4987e2278a883e89755f1c96af21a57e40d18fca87ce027cc2124e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6d642d6572726f722e706e67" alt="Markdown 语法异常" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/md-error.png" style="max-width: 100%;"></a></p>\n<p dir="auto">回到 GitHub，重新接触纯 Markdown 格式的写法，才真正感觉到这种模式的好处 —— 方便其他支持 Markdown 语法平台的转移，又可以最大限度解决 Markdown 语法错乱的尴尬。</p>\n<p dir="auto">但也有不好的地方，就是对于多级有序缩进，插入代码后，有序序列(多级缩进)会被打断。。。。</p>\n<h2 dir="auto">嵌套列表</h2>\n<p dir="auto">通过增加空格，Github 可以实现在嵌套列表中插入代码块；但是这样的做法在 MkDocs 中是有问题的。关于 MkDocs 的嵌套列表，在 <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="79625651" data-permission-text="Title is private" data-url="https://github.com/mkdocs/mkdocs/issues/545" data-hovercard-type="issue" data-hovercard-url="/mkdocs/mkdocs/issues/545/hovercard" href="https://github.com/mkdocs/mkdocs/issues/545">mkdocs/mkdocs#545</a> 有一个讨论。</p>\n<p dir="auto">参考的一个方法：<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="657050632" data-permission-text="Title is private" data-url="https://github.com/mkdocs/mkdocs/issues/2153" data-hovercard-type="issue" data-hovercard-url="/mkdocs/mkdocs/issues/2153/hovercard" href="https://github.com/mkdocs/mkdocs/issues/2153">mkdocs/mkdocs#2153</a>，即使用 <a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/" rel="nofollow">superfences</a> 插件，加上基于 Python 特有的 4 的倍数个空格进行缩进，可以比较好解决这个问题。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '不同版本服务器间 SSH 免密码登录失败', 'number': 25, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/25', 'createdAt': '2023-11-30T05:43:06Z', 'lastEditedAt': '2023-12-01T03:01:45Z', 'updatedAt': '2024-01-03T07:56:12Z', 'body': "今天从服务器 A（CentOS 7.3）配置 SSH 无密码登录服务器 B（CentOS Steam 9），发现执行以下常规操作后无法实现：\r\n```\r\n$ ssh-keygen\r\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub shenweiyan@66.xx.xx.xx  # ssh-copy-id user@rhel-9-server-IP\r\n$ ssh shenweiyan@66.xx.xx.xx\r\n```\r\n![ssh-keygen-need-passwd](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/ssh-keygen-passwd.png)\r\n\r\n后来，更换 ecdsa 算法，问题才解决：\r\n```\r\n$ ssh-keygen -t ecdsa\r\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\r\n```\r\n![ssh-keygen-ecdsa](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/ssh-keygen-ecdsa.png)\r\n\r\n根本原因就在于 SHA-1 已经在 RHEL9 中弃用了！\r\n\r\n从 RHEL9 的官网文档《[1.0.2. Crypto-policies, RHEL core cryptographic components, and protocols](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/considerations_in_adopting_rhel_9/index#ref_considerations-security-crypto_changes-to-security)（加密策略、RHEL 核心加密组件和协议）》可以看到 SHA-1 已经在 RHEL9 中弃用了！\r\n> In RHEL 9, SHA-1 usage for signatures is restricted in the DEFAULT system-wide cryptographic policy. Except for HMAC, SHA-1 is no longer allowed in TLS, DTLS, SSH, IKEv2, DNSSEC, and Kerberos protocols. Individual applications not controlled by the RHEL system-wide crypto policies are also moving away from using SHA-1 hashes in RHEL 9.\r\n\r\n在 RHEL 9 中，用于签名的 SHA-1 用法在 DEFAULT 系统范围的加密策略中受到限制。除 HMAC 外，TLS、DTLS、**SSH**、IKEv2、DNSSEC 和 Kerberos 协议中不再允许使用 SHA-1。不受 RHEL 系统范围的加密策略控制的单个应用程序在 RHEL 9 中也不再使用 SHA-1 hashes。\r\n\r\n## 跨用户免密码登录\r\n\r\n从服务器 A（CentOS 7.3）的 root 用户已配置 SSH 无密码登录服务器 B（CentOS Steam 9）的 shenweiyan 用户。\r\n\r\n- 在服务器 A（CentOS 7.3）的 root 用户下执行以下命令，在 `/root/.ssh` 目录会得到两个文件：\r\n  - 私钥文件：**id_ecdsa**\r\n  - 公钥文件：**id_ecdsa.pub**\r\n```\r\nroot@centos-vm-7 11:47:20 ~ \r\n$ ssh-keygen -t ecdsa\r\nGenerating public/private ecdsa key pair.\r\nEnter file in which to save the key (/root/.ssh/id_ecdsa): \r\nEnter passphrase (empty for no passphrase): \r\nEnter same passphrase again: \r\nYour identification has been saved in /root/.ssh/id_ecdsa.\r\nYour public key has been saved in /root/.ssh/id_ecdsa.pub.\r\nThe key fingerprint is:\r\nad:15:01:5c:a9:db:69:64:2b:0c:4c:5f:be:f9:e1:44 root@centos-vm-7\r\nThe key's randomart image is:\r\n+--[ECDSA  256]---+\r\n|       ..oo.     |\r\n|      . . o.     |\r\n|     o . +.      |\r\n|      o o.+.E    |\r\n|       oS=o*     |\r\n|        +oB o    |\r\n|        .o + .   |\r\n|            o    |\r\n|                 |\r\n+-----------------+\r\n```\r\n\r\n- 把服务器 A 下 root 用户的公钥文件拷贝到服务器 B（CentOS Steam 9）的 shenweiyan 用户的 authorized_keys 中；\r\n```\r\nroot@centos-vm-7 11:53:25 ~\r\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\r\n```\r\n\r\n- 将公钥拷贝至目标服务器 B 后，在源服务器 A 通过密钥跨用户免密码登录云服务器。\r\n```\r\nroot@centos-vm-7 11:58:47 /root \r\n$ ssh shenweiyan@66.xx.xx.xx  # ssh -i id_ecdsa shenweiyan@66.xx.xx.xx\r\n```\r\n\r\n## 参考资料\r\n- [RHEL6 ssh 到 RHEL9 的 no hostkey alg 错误](https://www.yuque.com/shenweiyan/cookbook/rhel-9-no-hostkey-alg)，语雀\r\n- [How can I use a legacy ssh-rsa key on CentOS 9 Stream?](https://serverfault.com/questions/1095898/how-can-i-use-a-legacy-ssh-rsa-key-on-centos-9-stream)，Server Fault\r\n", 'bodyText': "今天从服务器 A（CentOS 7.3）配置 SSH 无密码登录服务器 B（CentOS Steam 9），发现执行以下常规操作后无法实现：\n$ ssh-keygen\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub shenweiyan@66.xx.xx.xx  # ssh-copy-id user@rhel-9-server-IP\n$ ssh shenweiyan@66.xx.xx.xx\n\n\n后来，更换 ecdsa 算法，问题才解决：\n$ ssh-keygen -t ecdsa\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\n\n\n根本原因就在于 SHA-1 已经在 RHEL9 中弃用了！\n从 RHEL9 的官网文档《1.0.2. Crypto-policies, RHEL core cryptographic components, and protocols（加密策略、RHEL 核心加密组件和协议）》可以看到 SHA-1 已经在 RHEL9 中弃用了！\n\nIn RHEL 9, SHA-1 usage for signatures is restricted in the DEFAULT system-wide cryptographic policy. Except for HMAC, SHA-1 is no longer allowed in TLS, DTLS, SSH, IKEv2, DNSSEC, and Kerberos protocols. Individual applications not controlled by the RHEL system-wide crypto policies are also moving away from using SHA-1 hashes in RHEL 9.\n\n在 RHEL 9 中，用于签名的 SHA-1 用法在 DEFAULT 系统范围的加密策略中受到限制。除 HMAC 外，TLS、DTLS、SSH、IKEv2、DNSSEC 和 Kerberos 协议中不再允许使用 SHA-1。不受 RHEL 系统范围的加密策略控制的单个应用程序在 RHEL 9 中也不再使用 SHA-1 hashes。\n跨用户免密码登录\n从服务器 A（CentOS 7.3）的 root 用户已配置 SSH 无密码登录服务器 B（CentOS Steam 9）的 shenweiyan 用户。\n\n在服务器 A（CentOS 7.3）的 root 用户下执行以下命令，在 /root/.ssh 目录会得到两个文件：\n\n私钥文件：id_ecdsa\n公钥文件：id_ecdsa.pub\n\n\n\nroot@centos-vm-7 11:47:20 ~ \n$ ssh-keygen -t ecdsa\nGenerating public/private ecdsa key pair.\nEnter file in which to save the key (/root/.ssh/id_ecdsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_ecdsa.\nYour public key has been saved in /root/.ssh/id_ecdsa.pub.\nThe key fingerprint is:\nad:15:01:5c:a9:db:69:64:2b:0c:4c:5f:be:f9:e1:44 root@centos-vm-7\nThe key's randomart image is:\n+--[ECDSA  256]---+\n|       ..oo.     |\n|      . . o.     |\n|     o . +.      |\n|      o o.+.E    |\n|       oS=o*     |\n|        +oB o    |\n|        .o + .   |\n|            o    |\n|                 |\n+-----------------+\n\n\n把服务器 A 下 root 用户的公钥文件拷贝到服务器 B（CentOS Steam 9）的 shenweiyan 用户的 authorized_keys 中；\n\nroot@centos-vm-7 11:53:25 ~\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\n\n\n将公钥拷贝至目标服务器 B 后，在源服务器 A 通过密钥跨用户免密码登录云服务器。\n\nroot@centos-vm-7 11:58:47 /root \n$ ssh shenweiyan@66.xx.xx.xx  # ssh -i id_ecdsa shenweiyan@66.xx.xx.xx\n\n参考资料\n\nRHEL6 ssh 到 RHEL9 的 no hostkey alg 错误，语雀\nHow can I use a legacy ssh-rsa key on CentOS 9 Stream?，Server Fault", 'bodyHTML': '<p dir="auto">今天从服务器 A（CentOS 7.3）配置 SSH 无密码登录服务器 B（CentOS Steam 9），发现执行以下常规操作后无法实现：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ ssh-keygen\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub shenweiyan@66.xx.xx.xx  # ssh-copy-id user@rhel-9-server-IP\n$ ssh shenweiyan@66.xx.xx.xx"><pre class="notranslate"><code class="notranslate">$ ssh-keygen\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub shenweiyan@66.xx.xx.xx  # ssh-copy-id user@rhel-9-server-IP\n$ ssh shenweiyan@66.xx.xx.xx\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d9fd59894f89d6d97580a0aee4c71e21797ffa668129ff287cb5c40e01925e2d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7373682d6b657967656e2d7061737377642e706e67"><img src="https://camo.githubusercontent.com/d9fd59894f89d6d97580a0aee4c71e21797ffa668129ff287cb5c40e01925e2d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7373682d6b657967656e2d7061737377642e706e67" alt="ssh-keygen-need-passwd" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/ssh-keygen-passwd.png" style="max-width: 100%;"></a></p>\n<p dir="auto">后来，更换 ecdsa 算法，问题才解决：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ ssh-keygen -t ecdsa\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx"><pre class="notranslate"><code class="notranslate">$ ssh-keygen -t ecdsa\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/db2d728bade32d44c87f82525bc89f42ff49412934530743ac0f29eb62366105/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7373682d6b657967656e2d65636473612e706e67"><img src="https://camo.githubusercontent.com/db2d728bade32d44c87f82525bc89f42ff49412934530743ac0f29eb62366105/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7373682d6b657967656e2d65636473612e706e67" alt="ssh-keygen-ecdsa" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/ssh-keygen-ecdsa.png" style="max-width: 100%;"></a></p>\n<p dir="auto">根本原因就在于 SHA-1 已经在 RHEL9 中弃用了！</p>\n<p dir="auto">从 RHEL9 的官网文档《<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/considerations_in_adopting_rhel_9/index#ref_considerations-security-crypto_changes-to-security" rel="nofollow">1.0.2. Crypto-policies, RHEL core cryptographic components, and protocols</a>（加密策略、RHEL 核心加密组件和协议）》可以看到 SHA-1 已经在 RHEL9 中弃用了！</p>\n<blockquote>\n<p dir="auto">In RHEL 9, SHA-1 usage for signatures is restricted in the DEFAULT system-wide cryptographic policy. Except for HMAC, SHA-1 is no longer allowed in TLS, DTLS, SSH, IKEv2, DNSSEC, and Kerberos protocols. Individual applications not controlled by the RHEL system-wide crypto policies are also moving away from using SHA-1 hashes in RHEL 9.</p>\n</blockquote>\n<p dir="auto">在 RHEL 9 中，用于签名的 SHA-1 用法在 DEFAULT 系统范围的加密策略中受到限制。除 HMAC 外，TLS、DTLS、<strong>SSH</strong>、IKEv2、DNSSEC 和 Kerberos 协议中不再允许使用 SHA-1。不受 RHEL 系统范围的加密策略控制的单个应用程序在 RHEL 9 中也不再使用 SHA-1 hashes。</p>\n<h2 dir="auto">跨用户免密码登录</h2>\n<p dir="auto">从服务器 A（CentOS 7.3）的 root 用户已配置 SSH 无密码登录服务器 B（CentOS Steam 9）的 shenweiyan 用户。</p>\n<ul dir="auto">\n<li>在服务器 A（CentOS 7.3）的 root 用户下执行以下命令，在 <code class="notranslate">/root/.ssh</code> 目录会得到两个文件：\n<ul dir="auto">\n<li>私钥文件：<strong>id_ecdsa</strong></li>\n<li>公钥文件：<strong>id_ecdsa.pub</strong></li>\n</ul>\n</li>\n</ul>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="root@centos-vm-7 11:47:20 ~ \n$ ssh-keygen -t ecdsa\nGenerating public/private ecdsa key pair.\nEnter file in which to save the key (/root/.ssh/id_ecdsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_ecdsa.\nYour public key has been saved in /root/.ssh/id_ecdsa.pub.\nThe key fingerprint is:\nad:15:01:5c:a9:db:69:64:2b:0c:4c:5f:be:f9:e1:44 root@centos-vm-7\nThe key\'s randomart image is:\n+--[ECDSA  256]---+\n|       ..oo.     |\n|      . . o.     |\n|     o . +.      |\n|      o o.+.E    |\n|       oS=o*     |\n|        +oB o    |\n|        .o + .   |\n|            o    |\n|                 |\n+-----------------+"><pre class="notranslate"><code class="notranslate">root@centos-vm-7 11:47:20 ~ \n$ ssh-keygen -t ecdsa\nGenerating public/private ecdsa key pair.\nEnter file in which to save the key (/root/.ssh/id_ecdsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_ecdsa.\nYour public key has been saved in /root/.ssh/id_ecdsa.pub.\nThe key fingerprint is:\nad:15:01:5c:a9:db:69:64:2b:0c:4c:5f:be:f9:e1:44 root@centos-vm-7\nThe key\'s randomart image is:\n+--[ECDSA  256]---+\n|       ..oo.     |\n|      . . o.     |\n|     o . +.      |\n|      o o.+.E    |\n|       oS=o*     |\n|        +oB o    |\n|        .o + .   |\n|            o    |\n|                 |\n+-----------------+\n</code></pre></div>\n<ul dir="auto">\n<li>把服务器 A 下 root 用户的公钥文件拷贝到服务器 B（CentOS Steam 9）的 shenweiyan 用户的 authorized_keys 中；</li>\n</ul>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="root@centos-vm-7 11:53:25 ~\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx"><pre class="notranslate"><code class="notranslate">root@centos-vm-7 11:53:25 ~\n$ ssh-copy-id -i ~/.ssh/id_ecdsa.pub shenweiyan@66.xx.xx.xx\n</code></pre></div>\n<ul dir="auto">\n<li>将公钥拷贝至目标服务器 B 后，在源服务器 A 通过密钥跨用户免密码登录云服务器。</li>\n</ul>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="root@centos-vm-7 11:58:47 /root \n$ ssh shenweiyan@66.xx.xx.xx  # ssh -i id_ecdsa shenweiyan@66.xx.xx.xx"><pre class="notranslate"><code class="notranslate">root@centos-vm-7 11:58:47 /root \n$ ssh shenweiyan@66.xx.xx.xx  # ssh -i id_ecdsa shenweiyan@66.xx.xx.xx\n</code></pre></div>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li><a href="https://www.yuque.com/shenweiyan/cookbook/rhel-9-no-hostkey-alg" rel="nofollow">RHEL6 ssh 到 RHEL9 的 no hostkey alg 错误</a>，语雀</li>\n<li><a href="https://serverfault.com/questions/1095898/how-can-i-use-a-legacy-ssh-rsa-key-on-centos-9-stream" rel="nofollow">How can I use a legacy ssh-rsa key on CentOS 9 Stream?</a>，Server Fault</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.17-服务器配置使用'}]}, 'comments': {'nodes': []}}, {'title': 'Micro/Mamba 安装与注意事项', 'number': 24, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/24', 'createdAt': '2023-11-27T05:37:10Z', 'lastEditedAt': '2024-03-19T06:59:48Z', 'updatedAt': '2024-03-19T06:59:48Z', 'body': '记录一下 Micromamba/Mamba 安装的步骤和注意事项。\r\n\r\n## Mamba 安装\r\n\r\nMamba 可以使用 Mambaforge 方法和已有 Mini/conda 的方式安装，官方推荐的是前面一种，即使用 Mambaforge 进行全新安装。\r\n\r\n### 全新安装\r\n关于 mamba 的安装，官方推荐 [Fresh install](https://mamba.readthedocs.io/en/latest/mamba-installation.html)，即全新安装。\r\n\r\n> We recommend that you start with the [Mambaforge distribution](https://github.com/conda-forge/miniforge#mambaforge). Mambaforge comes with the popular conda-forge channel preconfigured, but you can modify the configuration to use any channel you like. Note that Anaconda channels are generally incompatible with conda-forge, so you should not mix them.        \r\n> 我们建议您从 Mambaforge 发行版开始。 Mambaforge 预配置了流行的 conda-forge 通道，但您可以修改配置以使用您喜欢的任何通道。请注意，Anaconda 通道通常与 conda-forge 不兼容，因此您不应混合使用它们。\r\n\r\n其实就是：          \r\n1. 先去 [Mambaforge distribution](https://github.com/conda-forge/miniforge#mambaforge) 下载 Mambaforge-Linux-x86_64.sh。          \r\n2. 执行 `sh Mambaforge-Linux-x86_64.sh` 安装命令。\r\n\r\n### 在已有的 conda 中安装\r\n\r\n官方文档中明确说不推荐这种安装 Mamba 的方式，他们强烈建议使用 Mambaforge 方法（见上文）。\r\n\r\n这种方法，要获取 `mamba` ，其实只需将其从 `conda-forge` 通道安装到基础环境中即可；但是需要注意 **Installing mamba into any other environment than base is not supported**，即**不支持将 mamba 安装到 base 之外的任何其他环境中**。\r\n\r\n首先，安装 Miniconda。\r\n\r\n参考 <https://docs.conda.io/en/latest/miniconda.html>，下载完 Miniconda3-latest-Linux-x86_64.sh，sh 执行一下就可以安装了。\r\n```\r\nsh Miniconda3-latest-Linux-x86_64.sh\r\n```\r\n然后，安装 mamba。\r\n```\r\n~/miniconda3/bin/conda install -c conda-forge mamba\r\n```\r\n\r\n> For both `mamba` and `conda`, the `base` environment is meant to hold their dependencies. It is strongly discouraged to install anything else in the base envionment. Doing so may break `mamba` and `conda` installation.      \r\n> 对于 `mamba` 和 `conda` ， `base` 环境旨在保存它们的依赖关系。强烈建议不要在基础环境中安装任何其他东西。这样做可能会破坏 `mamba` 和 `conda` 安装。\r\n\r\n## Micromamba 安装\r\n参考 <https://mamba.readthedocs.io/en/latest/micromamba-installation.html>。\r\n\r\n> `micromamba` is a fully statically-linked, self-contained, executable. This means that the `base` environment is completely empty. The configuration for `micromamba` is slighly different, namely all environments and cache will be created by default under the `MAMBA_ROOT_PREFIX` environment variable. There is also no pre-configured `.condarc`/`.mambarc` shipped with micromamba (they are however still read if present).                         \r\n> `micromamba` 是一个完全静态链接的、独立的可执行文件。这意味着 `base` 环境完全是空的。`micromamba` 的配置略有不同，即默认情况下将在 `MAMBA_ROOT_PREFIX` 环境变量下创建所有环境和缓存。`micromamba` 也没有预配置的 `.condarc` / `.mambarc`（但是，如果存在，它们仍然会被读取）。\r\n\r\n### 脚本安装\r\n\r\n如果您使用的是 macOS、Linux 或 Windows 上的 Git Bash，则有一种简单的安装方法 `micromamba`。只需在您喜欢的 shell 中执行安装脚本即可。\r\n\r\n对于 Linux、macOS 或 Windows 上的 Git Bash，请使用以下命令安装：\r\n```\r\n"${SHELL}" <(curl -L micro.mamba.pm/install.sh)\r\n```\r\n\r\n### 自动更新\r\n安装后，`micromamba` 可以通过下面的方式更新：\r\n```\r\nmicromamba self-update\r\n```\r\n可以指定显式版本：\r\n```\r\nmicromamba self-update --version 1.4.6\r\n```\r\n### 手动更新\r\n\r\n#### Linux 和 macOS\r\n下载并解压可执行文件（来自官方 `conda-forge` 包）即可。\r\n> 其实，这就等同于我们直接去 <https://github.com/mamba-org/micromamba-releases/releases> 下载对应平台的二进制文件，或者 `tar.bz2` 文件，然后解压缩，把 `bin/micromamba` 部分提出来使用。\r\n\r\n确保安装了基本实用程序。我们需要 `curl` 和 `tar` 并支持 `bzip2` 。此外，您还需要一个基于 glibc 的系统，例如 Ubuntu、Fedora 或 Centos（Alpine Linux 本身无法运行）。\r\n\r\n以下 magic URL 始终返回 micromamba 的最新可用版本，并且使用 `tar` 自动提取 `bin/micromamba` 部分。\r\n```\r\n# Linux Intel (x86_64):\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\r\n# Linux ARM64:\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\r\n# Linux Power:\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\r\n# macOS Intel (x86_64):\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\r\n# macOS Silicon/M1 (ARM64):\r\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba\r\n```\r\n提取完成后，我们就可以使用 `micromamba` 二进制文件了。\r\n\r\n如果您想在临时用例中快速使用 micromamba，您可以运行：\r\n```\r\nexport MAMBA_ROOT_PREFIX=/some/prefix  # optional, defaults to ~/micromamba\r\neval "$(./bin/micromamba shell hook -s posix)"\r\n```\r\n这个 shell hook 会修改您的 shell 变量以包含 micromamba 命令。\r\n\r\n如果您想保留这些更改，可以通过运行 `./micromamba shell init ...` 自动将它们写入 `.bashrc` （或 `.zshrc` ）。这还允许您选择自定义 MAMBA_ROOT_ENVIRONMENT，这是包和 repodata 缓存所在的位置。\r\n```\r\n# Linux/bash:\r\n./bin/micromamba shell init -s bash -p ~/micromamba  # this writes to your .bashrc file\r\n# sourcing the bashrc file incorporates the changes into the running session.\r\n# better yet, restart your terminal!\r\nsource ~/.bashrc\r\n\r\n# macOS/zsh:\r\n./micromamba shell init -s zsh -p ~/micromamba\r\nsource ~/.zshrc\r\n```\r\n\r\n现在您可以激活基本环境并安装新软件包，或创建其他环境。\r\n```\r\nmicromamba activate  # this activates the base environment\r\nmicromamba install python=3.6 jupyter -c conda-forge\r\n# or\r\nmicromamba create -n env_name xtensor -c conda-forge\r\nmicromamba activate env_name\r\n```\r\n\r\n专有的 [conda-forge](https://conda-forge.org/) 设置可以配置为：\r\n```\r\nmicromamba config append channels conda-forge\r\nmicromamba config append channels nodefaults\r\nmicromamba config set channel_priority strict\r\n```\r\n', 'bodyText': '记录一下 Micromamba/Mamba 安装的步骤和注意事项。\nMamba 安装\nMamba 可以使用 Mambaforge 方法和已有 Mini/conda 的方式安装，官方推荐的是前面一种，即使用 Mambaforge 进行全新安装。\n全新安装\n关于 mamba 的安装，官方推荐 Fresh install，即全新安装。\n\nWe recommend that you start with the Mambaforge distribution. Mambaforge comes with the popular conda-forge channel preconfigured, but you can modify the configuration to use any channel you like. Note that Anaconda channels are generally incompatible with conda-forge, so you should not mix them.\n我们建议您从 Mambaforge 发行版开始。 Mambaforge 预配置了流行的 conda-forge 通道，但您可以修改配置以使用您喜欢的任何通道。请注意，Anaconda 通道通常与 conda-forge 不兼容，因此您不应混合使用它们。\n\n其实就是：\n\n先去 Mambaforge distribution 下载 Mambaforge-Linux-x86_64.sh。\n执行 sh Mambaforge-Linux-x86_64.sh 安装命令。\n\n在已有的 conda 中安装\n官方文档中明确说不推荐这种安装 Mamba 的方式，他们强烈建议使用 Mambaforge 方法（见上文）。\n这种方法，要获取 mamba ，其实只需将其从 conda-forge 通道安装到基础环境中即可；但是需要注意 Installing mamba into any other environment than base is not supported，即不支持将 mamba 安装到 base 之外的任何其他环境中。\n首先，安装 Miniconda。\n参考 https://docs.conda.io/en/latest/miniconda.html，下载完 Miniconda3-latest-Linux-x86_64.sh，sh 执行一下就可以安装了。\nsh Miniconda3-latest-Linux-x86_64.sh\n\n然后，安装 mamba。\n~/miniconda3/bin/conda install -c conda-forge mamba\n\n\nFor both mamba and conda, the base environment is meant to hold their dependencies. It is strongly discouraged to install anything else in the base envionment. Doing so may break mamba and conda installation.\n对于 mamba 和 conda ， base 环境旨在保存它们的依赖关系。强烈建议不要在基础环境中安装任何其他东西。这样做可能会破坏 mamba 和 conda 安装。\n\nMicromamba 安装\n参考 https://mamba.readthedocs.io/en/latest/micromamba-installation.html。\n\nmicromamba is a fully statically-linked, self-contained, executable. This means that the base environment is completely empty. The configuration for micromamba is slighly different, namely all environments and cache will be created by default under the MAMBA_ROOT_PREFIX environment variable. There is also no pre-configured .condarc/.mambarc shipped with micromamba (they are however still read if present).\nmicromamba 是一个完全静态链接的、独立的可执行文件。这意味着 base 环境完全是空的。micromamba 的配置略有不同，即默认情况下将在 MAMBA_ROOT_PREFIX 环境变量下创建所有环境和缓存。micromamba 也没有预配置的 .condarc / .mambarc（但是，如果存在，它们仍然会被读取）。\n\n脚本安装\n如果您使用的是 macOS、Linux 或 Windows 上的 Git Bash，则有一种简单的安装方法 micromamba。只需在您喜欢的 shell 中执行安装脚本即可。\n对于 Linux、macOS 或 Windows 上的 Git Bash，请使用以下命令安装：\n"${SHELL}" <(curl -L micro.mamba.pm/install.sh)\n\n自动更新\n安装后，micromamba 可以通过下面的方式更新：\nmicromamba self-update\n\n可以指定显式版本：\nmicromamba self-update --version 1.4.6\n\n手动更新\nLinux 和 macOS\n下载并解压可执行文件（来自官方 conda-forge 包）即可。\n\n其实，这就等同于我们直接去 https://github.com/mamba-org/micromamba-releases/releases 下载对应平台的二进制文件，或者 tar.bz2 文件，然后解压缩，把 bin/micromamba 部分提出来使用。\n\n确保安装了基本实用程序。我们需要 curl 和 tar 并支持 bzip2 。此外，您还需要一个基于 glibc 的系统，例如 Ubuntu、Fedora 或 Centos（Alpine Linux 本身无法运行）。\n以下 magic URL 始终返回 micromamba 的最新可用版本，并且使用 tar 自动提取 bin/micromamba 部分。\n# Linux Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\n# Linux ARM64:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\n# Linux Power:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\n# macOS Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\n# macOS Silicon/M1 (ARM64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba\n\n提取完成后，我们就可以使用 micromamba 二进制文件了。\n如果您想在临时用例中快速使用 micromamba，您可以运行：\nexport MAMBA_ROOT_PREFIX=/some/prefix  # optional, defaults to ~/micromamba\neval "$(./bin/micromamba shell hook -s posix)"\n\n这个 shell hook 会修改您的 shell 变量以包含 micromamba 命令。\n如果您想保留这些更改，可以通过运行 ./micromamba shell init ... 自动将它们写入 .bashrc （或 .zshrc ）。这还允许您选择自定义 MAMBA_ROOT_ENVIRONMENT，这是包和 repodata 缓存所在的位置。\n# Linux/bash:\n./bin/micromamba shell init -s bash -p ~/micromamba  # this writes to your .bashrc file\n# sourcing the bashrc file incorporates the changes into the running session.\n# better yet, restart your terminal!\nsource ~/.bashrc\n\n# macOS/zsh:\n./micromamba shell init -s zsh -p ~/micromamba\nsource ~/.zshrc\n\n现在您可以激活基本环境并安装新软件包，或创建其他环境。\nmicromamba activate  # this activates the base environment\nmicromamba install python=3.6 jupyter -c conda-forge\n# or\nmicromamba create -n env_name xtensor -c conda-forge\nmicromamba activate env_name\n\n专有的 conda-forge 设置可以配置为：\nmicromamba config append channels conda-forge\nmicromamba config append channels nodefaults\nmicromamba config set channel_priority strict', 'bodyHTML': '<p dir="auto">记录一下 Micromamba/Mamba 安装的步骤和注意事项。</p>\n<h2 dir="auto">Mamba 安装</h2>\n<p dir="auto">Mamba 可以使用 Mambaforge 方法和已有 Mini/conda 的方式安装，官方推荐的是前面一种，即使用 Mambaforge 进行全新安装。</p>\n<h3 dir="auto">全新安装</h3>\n<p dir="auto">关于 mamba 的安装，官方推荐 <a href="https://mamba.readthedocs.io/en/latest/mamba-installation.html" rel="nofollow">Fresh install</a>，即全新安装。</p>\n<blockquote>\n<p dir="auto">We recommend that you start with the <a href="https://github.com/conda-forge/miniforge#mambaforge">Mambaforge distribution</a>. Mambaforge comes with the popular conda-forge channel preconfigured, but you can modify the configuration to use any channel you like. Note that Anaconda channels are generally incompatible with conda-forge, so you should not mix them.<br>\n我们建议您从 Mambaforge 发行版开始。 Mambaforge 预配置了流行的 conda-forge 通道，但您可以修改配置以使用您喜欢的任何通道。请注意，Anaconda 通道通常与 conda-forge 不兼容，因此您不应混合使用它们。</p>\n</blockquote>\n<p dir="auto">其实就是：</p>\n<ol dir="auto">\n<li>先去 <a href="https://github.com/conda-forge/miniforge#mambaforge">Mambaforge distribution</a> 下载 Mambaforge-Linux-x86_64.sh。</li>\n<li>执行 <code class="notranslate">sh Mambaforge-Linux-x86_64.sh</code> 安装命令。</li>\n</ol>\n<h3 dir="auto">在已有的 conda 中安装</h3>\n<p dir="auto">官方文档中明确说不推荐这种安装 Mamba 的方式，他们强烈建议使用 Mambaforge 方法（见上文）。</p>\n<p dir="auto">这种方法，要获取 <code class="notranslate">mamba</code> ，其实只需将其从 <code class="notranslate">conda-forge</code> 通道安装到基础环境中即可；但是需要注意 <strong>Installing mamba into any other environment than base is not supported</strong>，即<strong>不支持将 mamba 安装到 base 之外的任何其他环境中</strong>。</p>\n<p dir="auto">首先，安装 Miniconda。</p>\n<p dir="auto">参考 <a href="https://docs.conda.io/en/latest/miniconda.html" rel="nofollow">https://docs.conda.io/en/latest/miniconda.html</a>，下载完 Miniconda3-latest-Linux-x86_64.sh，sh 执行一下就可以安装了。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sh Miniconda3-latest-Linux-x86_64.sh"><pre class="notranslate"><code class="notranslate">sh Miniconda3-latest-Linux-x86_64.sh\n</code></pre></div>\n<p dir="auto">然后，安装 mamba。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="~/miniconda3/bin/conda install -c conda-forge mamba"><pre class="notranslate"><code class="notranslate">~/miniconda3/bin/conda install -c conda-forge mamba\n</code></pre></div>\n<blockquote>\n<p dir="auto">For both <code class="notranslate">mamba</code> and <code class="notranslate">conda</code>, the <code class="notranslate">base</code> environment is meant to hold their dependencies. It is strongly discouraged to install anything else in the base envionment. Doing so may break <code class="notranslate">mamba</code> and <code class="notranslate">conda</code> installation.<br>\n对于 <code class="notranslate">mamba</code> 和 <code class="notranslate">conda</code> ， <code class="notranslate">base</code> 环境旨在保存它们的依赖关系。强烈建议不要在基础环境中安装任何其他东西。这样做可能会破坏 <code class="notranslate">mamba</code> 和 <code class="notranslate">conda</code> 安装。</p>\n</blockquote>\n<h2 dir="auto">Micromamba 安装</h2>\n<p dir="auto">参考 <a href="https://mamba.readthedocs.io/en/latest/micromamba-installation.html" rel="nofollow">https://mamba.readthedocs.io/en/latest/micromamba-installation.html</a>。</p>\n<blockquote>\n<p dir="auto"><code class="notranslate">micromamba</code> is a fully statically-linked, self-contained, executable. This means that the <code class="notranslate">base</code> environment is completely empty. The configuration for <code class="notranslate">micromamba</code> is slighly different, namely all environments and cache will be created by default under the <code class="notranslate">MAMBA_ROOT_PREFIX</code> environment variable. There is also no pre-configured <code class="notranslate">.condarc</code>/<code class="notranslate">.mambarc</code> shipped with micromamba (they are however still read if present).<br>\n<code class="notranslate">micromamba</code> 是一个完全静态链接的、独立的可执行文件。这意味着 <code class="notranslate">base</code> 环境完全是空的。<code class="notranslate">micromamba</code> 的配置略有不同，即默认情况下将在 <code class="notranslate">MAMBA_ROOT_PREFIX</code> 环境变量下创建所有环境和缓存。<code class="notranslate">micromamba</code> 也没有预配置的 <code class="notranslate">.condarc</code> / <code class="notranslate">.mambarc</code>（但是，如果存在，它们仍然会被读取）。</p>\n</blockquote>\n<h3 dir="auto">脚本安装</h3>\n<p dir="auto">如果您使用的是 macOS、Linux 或 Windows 上的 Git Bash，则有一种简单的安装方法 <code class="notranslate">micromamba</code>。只需在您喜欢的 shell 中执行安装脚本即可。</p>\n<p dir="auto">对于 Linux、macOS 或 Windows 上的 Git Bash，请使用以下命令安装：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&quot;${SHELL}&quot; &lt;(curl -L micro.mamba.pm/install.sh)"><pre class="notranslate"><code class="notranslate">"${SHELL}" &lt;(curl -L micro.mamba.pm/install.sh)\n</code></pre></div>\n<h3 dir="auto">自动更新</h3>\n<p dir="auto">安装后，<code class="notranslate">micromamba</code> 可以通过下面的方式更新：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="micromamba self-update"><pre class="notranslate"><code class="notranslate">micromamba self-update\n</code></pre></div>\n<p dir="auto">可以指定显式版本：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="micromamba self-update --version 1.4.6"><pre class="notranslate"><code class="notranslate">micromamba self-update --version 1.4.6\n</code></pre></div>\n<h3 dir="auto">手动更新</h3>\n<h4 dir="auto">Linux 和 macOS</h4>\n<p dir="auto">下载并解压可执行文件（来自官方 <code class="notranslate">conda-forge</code> 包）即可。</p>\n<blockquote>\n<p dir="auto">其实，这就等同于我们直接去 <a href="https://github.com/mamba-org/micromamba-releases/releases">https://github.com/mamba-org/micromamba-releases/releases</a> 下载对应平台的二进制文件，或者 <code class="notranslate">tar.bz2</code> 文件，然后解压缩，把 <code class="notranslate">bin/micromamba</code> 部分提出来使用。</p>\n</blockquote>\n<p dir="auto">确保安装了基本实用程序。我们需要 <code class="notranslate">curl</code> 和 <code class="notranslate">tar</code> 并支持 <code class="notranslate">bzip2</code> 。此外，您还需要一个基于 glibc 的系统，例如 Ubuntu、Fedora 或 Centos（Alpine Linux 本身无法运行）。</p>\n<p dir="auto">以下 magic URL 始终返回 micromamba 的最新可用版本，并且使用 <code class="notranslate">tar</code> 自动提取 <code class="notranslate">bin/micromamba</code> 部分。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Linux Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\n# Linux ARM64:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\n# Linux Power:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\n# macOS Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\n# macOS Silicon/M1 (ARM64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba"><pre class="notranslate"><code class="notranslate"># Linux Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\n# Linux ARM64:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\n# Linux Power:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\n# macOS Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\n# macOS Silicon/M1 (ARM64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba\n</code></pre></div>\n<p dir="auto">提取完成后，我们就可以使用 <code class="notranslate">micromamba</code> 二进制文件了。</p>\n<p dir="auto">如果您想在临时用例中快速使用 micromamba，您可以运行：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export MAMBA_ROOT_PREFIX=/some/prefix  # optional, defaults to ~/micromamba\neval &quot;$(./bin/micromamba shell hook -s posix)&quot;"><pre class="notranslate"><code class="notranslate">export MAMBA_ROOT_PREFIX=/some/prefix  # optional, defaults to ~/micromamba\neval "$(./bin/micromamba shell hook -s posix)"\n</code></pre></div>\n<p dir="auto">这个 shell hook 会修改您的 shell 变量以包含 micromamba 命令。</p>\n<p dir="auto">如果您想保留这些更改，可以通过运行 <code class="notranslate">./micromamba shell init ...</code> 自动将它们写入 <code class="notranslate">.bashrc</code> （或 <code class="notranslate">.zshrc</code> ）。这还允许您选择自定义 MAMBA_ROOT_ENVIRONMENT，这是包和 repodata 缓存所在的位置。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Linux/bash:\n./bin/micromamba shell init -s bash -p ~/micromamba  # this writes to your .bashrc file\n# sourcing the bashrc file incorporates the changes into the running session.\n# better yet, restart your terminal!\nsource ~/.bashrc\n\n# macOS/zsh:\n./micromamba shell init -s zsh -p ~/micromamba\nsource ~/.zshrc"><pre class="notranslate"><code class="notranslate"># Linux/bash:\n./bin/micromamba shell init -s bash -p ~/micromamba  # this writes to your .bashrc file\n# sourcing the bashrc file incorporates the changes into the running session.\n# better yet, restart your terminal!\nsource ~/.bashrc\n\n# macOS/zsh:\n./micromamba shell init -s zsh -p ~/micromamba\nsource ~/.zshrc\n</code></pre></div>\n<p dir="auto">现在您可以激活基本环境并安装新软件包，或创建其他环境。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="micromamba activate  # this activates the base environment\nmicromamba install python=3.6 jupyter -c conda-forge\n# or\nmicromamba create -n env_name xtensor -c conda-forge\nmicromamba activate env_name"><pre class="notranslate"><code class="notranslate">micromamba activate  # this activates the base environment\nmicromamba install python=3.6 jupyter -c conda-forge\n# or\nmicromamba create -n env_name xtensor -c conda-forge\nmicromamba activate env_name\n</code></pre></div>\n<p dir="auto">专有的 <a href="https://conda-forge.org/" rel="nofollow">conda-forge</a> 设置可以配置为：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="micromamba config append channels conda-forge\nmicromamba config append channels nodefaults\nmicromamba config set channel_priority strict"><pre class="notranslate"><code class="notranslate">micromamba config append channels conda-forge\nmicromamba config append channels nodefaults\nmicromamba config set channel_priority strict\n</code></pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.22-虚拟环境'}]}, 'comments': {'nodes': []}}, {'title': '大学计算机没有的一课', 'number': 23, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/23', 'createdAt': '2023-11-23T02:04:09Z', 'lastEditedAt': None, 'updatedAt': '2023-11-23T02:04:10Z', 'body': '今天是2023年1月19日，马上要过年了，在这里先提前给大家拜年了，祝大家新年快乐，阖家幸福安康！\r\n\r\n今天来给大家推荐一个不错的开源项目。\r\n\r\n<!-- more -->\r\n\r\n大学里的计算机课程往往只专注于讲授数据结构、操作系统这些知识，对于编程开发中常用的工具则留给学生自行学习。在 MIT 这个课程中，你可以了解和掌握命令行(shell)、文本编辑器(Vim)、版本控制系统(Git)等强大的工具，越早接触越能更加熟练地使用它们，有助于未来的职业生涯。\r\n![missing-semester](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/23019-missing-semester.png)\r\n\r\n**地址：**<https://github.com/missing-semester/missing-semester>\r\n**中文：**<https://missing-semester-cn.github.io/>\r\n', 'bodyText': '今天是2023年1月19日，马上要过年了，在这里先提前给大家拜年了，祝大家新年快乐，阖家幸福安康！\n今天来给大家推荐一个不错的开源项目。\n\n大学里的计算机课程往往只专注于讲授数据结构、操作系统这些知识，对于编程开发中常用的工具则留给学生自行学习。在 MIT 这个课程中，你可以了解和掌握命令行(shell)、文本编辑器(Vim)、版本控制系统(Git)等强大的工具，越早接触越能更加熟练地使用它们，有助于未来的职业生涯。\n\n地址：https://github.com/missing-semester/missing-semester\n中文：https://missing-semester-cn.github.io/', 'bodyHTML': '<p dir="auto">今天是2023年1月19日，马上要过年了，在这里先提前给大家拜年了，祝大家新年快乐，阖家幸福安康！</p>\n<p dir="auto">今天来给大家推荐一个不错的开源项目。</p>\n\n<p dir="auto">大学里的计算机课程往往只专注于讲授数据结构、操作系统这些知识，对于编程开发中常用的工具则留给学生自行学习。在 MIT 这个课程中，你可以了解和掌握命令行(shell)、文本编辑器(Vim)、版本控制系统(Git)等强大的工具，越早接触越能更加熟练地使用它们，有助于未来的职业生涯。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1e02a4abf98f7d73b4986f0fad142341db51a0be5af4c16dcd98cf3e6532a4a9/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f32333031392d6d697373696e672d73656d65737465722e706e67"><img src="https://camo.githubusercontent.com/1e02a4abf98f7d73b4986f0fad142341db51a0be5af4c16dcd98cf3e6532a4a9/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f32333031392d6d697373696e672d73656d65737465722e706e67" alt="missing-semester" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/23019-missing-semester.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>地址：</strong><a href="https://github.com/missing-semester/missing-semester">https://github.com/missing-semester/missing-semester</a><br>\n<strong>中文：</strong><a href="https://missing-semester-cn.github.io/" rel="nofollow">https://missing-semester-cn.github.io/</a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.4-知识'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Notepad++ 在 GitHub 已经沦为战场了', 'number': 22, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/22', 'createdAt': '2023-11-23T01:59:33Z', 'lastEditedAt': '2023-11-23T01:59:44Z', 'updatedAt': '2023-12-01T02:50:04Z', 'body': 'Notepad++ 这片瓜田的瓜都吃了好几年了，作者却一直还在死性不改 。。。。。\r\n\r\n同样的 Notepad++ 在 GitHub 仓库 [notepad-plus-plus](https://github.com/notepad-plus-plus/notepad-plus-plus) 早已沦为反华辱华的垃圾场，群魔乱舞，简直惨不忍睹！\r\n\r\n<!-- more -->\r\n\r\n![say-no-to-Notepad++](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/say-no.png)\r\n\r\n## Add random characters\r\n\r\nTwitter：<https://twitter.com/Notepad_plus/status/1618276938342359042>\r\nV2EX：<https://www.v2ex.com/t/910777>\r\n![Twitter Notepad++](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/twitter-notepad%2B%2B.png)\r\n\r\n## Free Uyghur\r\n\r\n不知道大家有没有留意，前两天（2019 年 10 月 29）开源文本编辑器 Notepad++ 发布了最新的 \xa0[7.8.1](https://notepad-plus-plus.org/downloads/v7.8.1/)\xa0 版本。\r\n\r\n然而，软件新版本发布后，在该版本中 Notepad++ 的作者同时附加了一篇名为《[Notepad++ v7.8.1 : Free Uyghur](https://notepad-plus-plus.org/news/v781-free-uyghur-edition/)》抹黑中国的文章，具体的内容请大家自行百度（图片是文章部分截图）。而且这已经不是 Notepad++ 第一次这么干了！\r\n![Notepad++ Free Uyghur](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad%2B%2Bv781.png)\r\n\r\nNotepad++ 的 "Free Uyghur" 出来以后，Notepad++ 所在的 Github 瞬间被广大中国的开发者占领，他们用自己的方式进行了回击。小编也忍不住上去看一下，发现 \xa0GitHub 上面基本上都是骂 Notepad++ 作者的，不过也有少数支持作者。\r\n![notepad-781-github-issue1](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-781-github-issue1.png)\r\n\r\n![notepad-781-github-issue2](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-781-github-issue2.png)\r\n\r\n## 起底一下开发者\r\n\r\n后来查了一下，Notepad++ 的作者，原来名字叫做侯今吾（英语：DonHO，<https://github.com/donho>），是一个毕业于台湾淡江大学及巴黎第七大学的电脑工程师，作为一个台湾人，也是一个台独积极分子，侯今吾借助 Notepad++ 抹黑中国可谓由来已久。\r\n\r\n![Notepad++ DonHO](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-donho.png)\r\n\r\n## 我也来说几句\r\n\r\n在这里我想说的是，Notepad++ 作为一款免费开源，深受国外编程爱好者赞扬，也为台湾开源界赢得好评，效率很高的文本编辑器，在早年间也是小编最喜欢常用的软件之一。但对于政见这件事情，小编觉得就像吃一道菜一样，你可以选择吃与不吃，不吃，你可以一笑而过，喜欢的人照常吃，与你无关，但你绝对不能吐一口脏东西上去。\r\n\r\n软件本身是没什么问题的，要说软件和作者之间的关系，那就是爱用不用的关系了。同类软件，我不喜欢你作者，当然就不用了，当然我不用也不会对软件发展有什么影响，不过我想说，这就像是去餐馆吃饭。对于顾客来说，他吃与不吃，不会影响服务员的工资。但对于服务员来说，至少不能让顾客觉得你讨厌。\r\n\r\n最后，有人说要抵制 Notepad++，但对我而言，小编是反对把开源与政治挂钩的，因此小编选择不用 Notepad++ —— 我有选择的权利，既然开源的编辑器那么多（我可以用 [Sublime Text](https://www.sublimetext.com/) (虽然 [Sublime Text](https://www.sublimetext.com/) 是非开源的)，可以用 [Visual Studio Code](https://code.visualstudio.com/)，可以用 [Github Atom](https://atom.io/)，也可以用 [BowPad](https://tools.stefankueng.com/BowPad.html)、[Editra](http://editra.org/)，甚至是国人开发的 [Notepad--](https://gitee.com/cxasm/notepad--)），我又何必选择一个带政治倾向自己又不喜欢的编辑器呢！\r\n', 'bodyText': 'Notepad++ 这片瓜田的瓜都吃了好几年了，作者却一直还在死性不改 。。。。。\n同样的 Notepad++ 在 GitHub 仓库 notepad-plus-plus 早已沦为反华辱华的垃圾场，群魔乱舞，简直惨不忍睹！\n\n\nAdd random characters\nTwitter：https://twitter.com/Notepad_plus/status/1618276938342359042\nV2EX：https://www.v2ex.com/t/910777\n\nFree Uyghur\n不知道大家有没有留意，前两天（2019 年 10 月 29）开源文本编辑器 Notepad++ 发布了最新的 \xa07.8.1\xa0 版本。\n然而，软件新版本发布后，在该版本中 Notepad++ 的作者同时附加了一篇名为《Notepad++ v7.8.1 : Free Uyghur》抹黑中国的文章，具体的内容请大家自行百度（图片是文章部分截图）。而且这已经不是 Notepad++ 第一次这么干了！\n\nNotepad++ 的 "Free Uyghur" 出来以后，Notepad++ 所在的 Github 瞬间被广大中国的开发者占领，他们用自己的方式进行了回击。小编也忍不住上去看一下，发现 \xa0GitHub 上面基本上都是骂 Notepad++ 作者的，不过也有少数支持作者。\n\n\n起底一下开发者\n后来查了一下，Notepad++ 的作者，原来名字叫做侯今吾（英语：DonHO，https://github.com/donho），是一个毕业于台湾淡江大学及巴黎第七大学的电脑工程师，作为一个台湾人，也是一个台独积极分子，侯今吾借助 Notepad++ 抹黑中国可谓由来已久。\n\n我也来说几句\n在这里我想说的是，Notepad++ 作为一款免费开源，深受国外编程爱好者赞扬，也为台湾开源界赢得好评，效率很高的文本编辑器，在早年间也是小编最喜欢常用的软件之一。但对于政见这件事情，小编觉得就像吃一道菜一样，你可以选择吃与不吃，不吃，你可以一笑而过，喜欢的人照常吃，与你无关，但你绝对不能吐一口脏东西上去。\n软件本身是没什么问题的，要说软件和作者之间的关系，那就是爱用不用的关系了。同类软件，我不喜欢你作者，当然就不用了，当然我不用也不会对软件发展有什么影响，不过我想说，这就像是去餐馆吃饭。对于顾客来说，他吃与不吃，不会影响服务员的工资。但对于服务员来说，至少不能让顾客觉得你讨厌。\n最后，有人说要抵制 Notepad++，但对我而言，小编是反对把开源与政治挂钩的，因此小编选择不用 Notepad++ —— 我有选择的权利，既然开源的编辑器那么多（我可以用 Sublime Text (虽然 Sublime Text 是非开源的)，可以用 Visual Studio Code，可以用 Github Atom，也可以用 BowPad、Editra，甚至是国人开发的 Notepad--），我又何必选择一个带政治倾向自己又不喜欢的编辑器呢！', 'bodyHTML': '<p dir="auto">Notepad++ 这片瓜田的瓜都吃了好几年了，作者却一直还在死性不改 。。。。。</p>\n<p dir="auto">同样的 Notepad++ 在 GitHub 仓库 <a href="https://github.com/notepad-plus-plus/notepad-plus-plus">notepad-plus-plus</a> 早已沦为反华辱华的垃圾场，群魔乱舞，简直惨不忍睹！</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3591a16f1fa87000977da72a7a42552f0b768acffd171fba3d5b439d202c7f61/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7361792d6e6f2e706e67"><img src="https://camo.githubusercontent.com/3591a16f1fa87000977da72a7a42552f0b768acffd171fba3d5b439d202c7f61/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7361792d6e6f2e706e67" alt="say-no-to-Notepad++" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/say-no.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Add random characters</h2>\n<p dir="auto">Twitter：<a href="https://twitter.com/Notepad_plus/status/1618276938342359042" rel="nofollow">https://twitter.com/Notepad_plus/status/1618276938342359042</a><br>\nV2EX：<a href="https://www.v2ex.com/t/910777" rel="nofollow">https://www.v2ex.com/t/910777</a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cf557d0a98c496c117999aa0fb7804c8b562eedf9fac00f3fa3726ba18a7887b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f747769747465722d6e6f74657061642532422532422e706e67"><img src="https://camo.githubusercontent.com/cf557d0a98c496c117999aa0fb7804c8b562eedf9fac00f3fa3726ba18a7887b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f747769747465722d6e6f74657061642532422532422e706e67" alt="Twitter Notepad++" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/twitter-notepad%2B%2B.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Free Uyghur</h2>\n<p dir="auto">不知道大家有没有留意，前两天（2019 年 10 月 29）开源文本编辑器 Notepad++ 发布了最新的 \xa0<a href="https://notepad-plus-plus.org/downloads/v7.8.1/" rel="nofollow">7.8.1</a>\xa0 版本。</p>\n<p dir="auto">然而，软件新版本发布后，在该版本中 Notepad++ 的作者同时附加了一篇名为《<a href="https://notepad-plus-plus.org/news/v781-free-uyghur-edition/" rel="nofollow">Notepad++ v7.8.1 : Free Uyghur</a>》抹黑中国的文章，具体的内容请大家自行百度（图片是文章部分截图）。而且这已经不是 Notepad++ 第一次这么干了！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1910427ed91d91df75640abd611c51a5a105b13b8fd89ba8454570bbb6b3c8d8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f7465706164253242253242763738312e706e67"><img src="https://camo.githubusercontent.com/1910427ed91d91df75640abd611c51a5a105b13b8fd89ba8454570bbb6b3c8d8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f7465706164253242253242763738312e706e67" alt="Notepad++ Free Uyghur" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad%2B%2Bv781.png" style="max-width: 100%;"></a></p>\n<p dir="auto">Notepad++ 的 "Free Uyghur" 出来以后，Notepad++ 所在的 Github 瞬间被广大中国的开发者占领，他们用自己的方式进行了回击。小编也忍不住上去看一下，发现 \xa0GitHub 上面基本上都是骂 Notepad++ 作者的，不过也有少数支持作者。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c380c4ab0f4ab94d4ebaf8a694282de0eefd2edbdd44c10e1c34c464cbdda39f/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d3738312d6769746875622d6973737565312e706e67"><img src="https://camo.githubusercontent.com/c380c4ab0f4ab94d4ebaf8a694282de0eefd2edbdd44c10e1c34c464cbdda39f/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d3738312d6769746875622d6973737565312e706e67" alt="notepad-781-github-issue1" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-781-github-issue1.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f594f9c3b1ba52f8122e19e9dd8e4cc1ec18f08aef9dbfe08858367de807bba2/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d3738312d6769746875622d6973737565322e706e67"><img src="https://camo.githubusercontent.com/f594f9c3b1ba52f8122e19e9dd8e4cc1ec18f08aef9dbfe08858367de807bba2/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d3738312d6769746875622d6973737565322e706e67" alt="notepad-781-github-issue2" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-781-github-issue2.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">起底一下开发者</h2>\n<p dir="auto">后来查了一下，Notepad++ 的作者，原来名字叫做侯今吾（英语：DonHO，<a href="https://github.com/donho">https://github.com/donho</a>），是一个毕业于台湾淡江大学及巴黎第七大学的电脑工程师，作为一个台湾人，也是一个台独积极分子，侯今吾借助 Notepad++ 抹黑中国可谓由来已久。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cbc1ae9eb020050f50fee06ab4672199db90b93931c0e9a4b4ac33d064dfcd08/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d646f6e686f2e706e67"><img src="https://camo.githubusercontent.com/cbc1ae9eb020050f50fee06ab4672199db90b93931c0e9a4b4ac33d064dfcd08/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6e6f74657061642d646f6e686f2e706e67" alt="Notepad++ DonHO" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/notepad-donho.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">我也来说几句</h2>\n<p dir="auto">在这里我想说的是，Notepad++ 作为一款免费开源，深受国外编程爱好者赞扬，也为台湾开源界赢得好评，效率很高的文本编辑器，在早年间也是小编最喜欢常用的软件之一。但对于政见这件事情，小编觉得就像吃一道菜一样，你可以选择吃与不吃，不吃，你可以一笑而过，喜欢的人照常吃，与你无关，但你绝对不能吐一口脏东西上去。</p>\n<p dir="auto">软件本身是没什么问题的，要说软件和作者之间的关系，那就是爱用不用的关系了。同类软件，我不喜欢你作者，当然就不用了，当然我不用也不会对软件发展有什么影响，不过我想说，这就像是去餐馆吃饭。对于顾客来说，他吃与不吃，不会影响服务员的工资。但对于服务员来说，至少不能让顾客觉得你讨厌。</p>\n<p dir="auto">最后，有人说要抵制 Notepad++，但对我而言，小编是反对把开源与政治挂钩的，因此小编选择不用 Notepad++ —— 我有选择的权利，既然开源的编辑器那么多（我可以用 <a href="https://www.sublimetext.com/" rel="nofollow">Sublime Text</a> (虽然 <a href="https://www.sublimetext.com/" rel="nofollow">Sublime Text</a> 是非开源的)，可以用 <a href="https://code.visualstudio.com/" rel="nofollow">Visual Studio Code</a>，可以用 <a href="https://atom.io/" rel="nofollow">Github Atom</a>，也可以用 <a href="https://tools.stefankueng.com/BowPad.html" rel="nofollow">BowPad</a>、<a href="http://editra.org/" rel="nofollow">Editra</a>，甚至是国人开发的 <a href="https://gitee.com/cxasm/notepad--" rel="nofollow">Notepad--</a>），我又何必选择一个带政治倾向自己又不喜欢的编辑器呢！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '2023 年 Galaxy 社区大会会议报告', 'number': 21, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/21', 'createdAt': '2023-11-23T01:47:28Z', 'lastEditedAt': '2023-12-01T05:36:10Z', 'updatedAt': '2024-01-04T05:45:31Z', 'body': '> 作者：Natalie Whitaker    \r\n> 编译：[沈维燕](https://weiyan.cc)    \r\n> 时间：2023-08-14    \r\n> 原文：[2023 Galaxy Community Conference Meeting Report](https://galaxyproject.org/blog/2023-08-14-gc-c2023-meeting-report/)    \r\n\r\n<!-- more -->\r\n\t\t\r\n## GCC 2023 会议纪要\r\n\r\n### 概述\r\n2023 年 Galaxy 社区会议（GCC2023）于7月10日至16日在澳大利亚昆士兰州布里斯班昆士兰科技大学举行。GCC 是 Galaxy 社区的年度会议，这是一个旨在在科学和技术层面展示过去一年内在 Galaxy 研究领域做出的令人惊叹的新工作，同时为与会者提供发现合作机会、加强联系、并开辟新的研究方向的大会。 GCC2023 由 Galaxy Australia 和 Australian BioCommons 主办，为期四天，包括了演讲、研讨会/培训、海报和演示等活动，还有三位主题演讲嘉宾和三天的协作节 (CoFest)。除了会议内容，整个 Galaxy 社区会议周还会举办网络交流和社交活动。总体而言，GCC2023 包括了 12.8 小时的长短演讲、37.5 小时的培训、3.3 小时的海报展示和演示，以及 10.6 小时的社交活动和交流。\r\n![GCC2023 Meeting Report Image1](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image1.png)\r\n\r\nGCC2023 共有 91 名现场参会者和 40 名虚拟参会者。来自 21 个不同国家的与会者出席了本次会议：澳大利亚、比利时、巴西、加拿大、捷克、丹麦、法国、德国、印度、爱尔兰、马耳他、摩洛哥、荷兰、新西兰、挪威、新加坡、韩国、斯里兰卡、瑞士、英国和美国（图1）。在总参会人数中，22.4% 是研究助理或技术人员，17.6% 是高级科学家或首席调查员，9.6% 是研究生，7.2% 是博士后，2.4% 是本科生，40% 是其他身份。\r\n\r\n<div align="center">\r\n    <img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image2.png" alt="GCC2023 Meeting Report Image2">\r\n    <em>Figure 1. Map of GCC2023 attendees’ countries of origin.</em>\r\n</div>\r\n\r\n\r\n## 奖学金获得者\r\nGCC2023 非常感谢能够利用一位匿名捐赠者的资金提供现场和虚拟参会的奖学金。作为奖学金的一部分，受奖者被要求通过演讲、海报或二者兼有的方式参与会议。\r\n\r\n今年，一个现场奖学金授予了英国开放大学的一年级博士生 Marisa Loach（Twitter: @Marisa_Loach）。Marisa 进行了一次题为 “为什么使用 Galaxy？用户友好的生物信息学选项的初步结果” 的演讲并展示了一份海报。\r\n![GCC2023 Meeting Report Image3](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image3.png)\r\n\r\nGCC2023共颁发了六个虚拟奖学金。以下列出了每位受奖者及其角色、机构和对会议的贡献。\r\n\r\n### Coline Royaux\r\nTwitter: @ColineRoyaux\r\n\r\n研究生 (Graduate student)\r\n\r\n巴黎索邦大学，法国自然历史博物馆，法国 (Sorbonne University, French Natural History Museum, France)\r\n\r\n演讲标题 “Galaxy-E：基于生态学的 Galaxy 倡议，2022-2023 年更新！” \r\n\r\n### Vajiha Hussain\r\n高年级本科生 (Senior undergraduate student)\r\n\r\n印度维尼昂大学 (Vignan University, India)\r\n\r\n海报标题 “利用 RNASeq 分析识别棕榈蓟马中潜在的 GBNV 生物标志物”\r\n\r\n### Sudeepti Kulshrestha\r\n研究生 (Graduate student)\r\n\r\n印度阿米蒂大学 (Amity University, India)\r\n\r\n海报标题为“使用基于网络的方法探索 Vaginal Microbiome 和先兆子痫的关联”\r\n\r\n### Jonas Bucher\r\n研究生 (Graduate student)\r\n\r\n瑞士苏黎世联邦理工学院，苏黎世大学，瑞士 (Swiss Federal Institute of Technology in Zurich (ETH Zurich), University of Zurich, Switzerland)\r\n\r\n海报标题 “Methylator - DNA cytosine methylation pipeline”\r\n\r\n\r\n### Katarzyna Kamieniecka\r\nTwitter: @katemurat\r\n\r\n研究生 (Graduate student)\r\n\r\n英国布拉德福德大学 (University of Bradford, United Kingdom)\r\n\r\n海报标题 "Galaxy 中的 FAIR 数据管理"\r\n\r\n#### Taoufik Bensellak\r\n研究生 (Graduate student)\r\n\r\n英国利物浦大学 (University of Liverpool, United Kingdom)\r\n\r\n海报标题 “用于微阵列数据分析的 Galaxy 实例和工具”\r\n\r\n## 主讲嘉宾\r\nGCC2023 邀请了三位主题演讲嘉宾，分别就野生动物保护、结构生物学和生物安全等领域分享了他们的思考和研究成果。演讲者展示了他们团队如何通过使用 Galaxy 平台，以更易获取和可复现的方式完成工作。\r\n\r\n三位主题发言人分别发表了内容丰富的演讲，讨论了各自前瞻性研究领域的进展，重点关注开放存取端到端生物信息学 (open-access end-to-end bioinformatics)。Galaxy 在每位主题发言人的最新研究进展中都发挥了重要作用，Galaxy 开发人员和 Galaxy 社区能够亲眼目睹 Galaxy 对科学界的影响。此外，每位主题发言人都为 Galaxy 的未来提供了灵感，并有时间与平台发展轨迹背后的开发人员直接交流。\r\n\r\n### Carolyn Hogg, PhD (University of Sydney，悉尼大学)\r\n来自悉尼大学的 Carolyn Hogg 博士作为第一位主讲人拉开了 GCC2023 的序幕。霍格博士在 "拯救塔斯马尼亚袋獾计划 (Save the Tasmanian Devil Program)" 进行的研究中发挥了重要作用，此外还重点研究了其他澳大利亚物种，如橙腹鹦鹉、考拉、兔耳袋狸和袋鼠。她在 GCC2023 上的演讲题为 “走向无限和超越：结合基因组学和云技术来拯救我们的物种”，强调了自然资源保护主义者和基因组科学家之间合作研究的必要性。她的愿景是通过改变科学、管理和政策的整合方式，为澳大利亚创造保护遗产，而 Galaxy 的使用增强了她的这一愿景。通过使用像 Galaxy 这样的开源平台，Hogg 博士能够产生可重复的基因组科学，以帮助澳大利亚的物种保护和管理实践。\r\n![GCC2023 Meeting Report Image4](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image4.png)\r\n\r\n### Kate Michie, PhD (University of New South Wales，新南威尔士大学)\r\n来自新南威尔士大学的 Kate Michie 博士作为 GCC2023 的第二位主讲人发表了题为 “Alphafold2 和深度学习时代：结构生物学的最新进展” 的演讲。 Michie 博士在蛋白质结构生物学方面拥有二十多年的经验，并广泛使用 Alphafold2，并与众多研究人员密切合作，教他们如何使用这一强大的工具来推进他们的研究。在她的主题演讲中，Michie 博士呼吁关注 Galaxy 为结构生物学研究进展做好准备的迫切需要，这些进展肯定会伴随 Alphafold2 的巨大成功。 Michie 博士的演讲对 GCC2023 来说是一个有影响力的补充，因为 Galaxy 致力于保持竞争力并领先于社区的巨大研究需求。\r\n![GCC2023 Meeting Report Image5](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image5.png)\r\n\r\n### Roberto Barrero, PhD (Queensland University of Technology，昆士兰科技大学)\r\nGCC2023 的最后一位主讲人是来自昆士兰科技大学的 Roberto Barrero 博士。巴雷罗博士的演讲题为 “通过更快、更准确地诊断植物病毒和类病毒，改善植物行业获得新遗传学的机会”，重点讨论利用生物信息学解决农业、植物生物安全和人类健康方面的现实问题。最近，Barrero 博士在开发植物诊断工具包方面发挥了重要作用，该工具包可以在一次测试中准确检测一系列病毒和类病毒，并于 2018 年向他和他的团队授予生物安全影响奖。Barrero 博士的研究进展得到了 Galaxy 的支持通过 GA-VirReport 和高通量测序技术。访问开放式端到端生物信息学工作流程对于诊断植物病毒和类病毒至关重要，Galaxy 很高兴能在 GCC2023 上将这一主题置于前沿。\r\n![GCC2023 Meeting Report Image6](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image6.png)\r\n\r\n## 培训课程\r\n![GCC2023 Meeting Report Image7](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image7.png)\r\n培训是 Galaxy 社区的首要任务。让研究人员能够轻松学习使用该平台、如何进行新的分析或探索能够解决研究人员面临的实际需求的功能和工具，对于 Galaxy 的发展和可持续发展发挥了重要作用。本着这种精神，在 GCC2023 的三天里，共举办了 15 场不同的培训课程，供与会者与专家一起学习和实践生物信息学。专家包括主要研究员、Galaxy 开发人员、项目经理和 Galaxy 高级用户。培训课程主题多种多样，为 GCC2023 的所有与会者提供相关且实用的学习机会。从微生物学和人类遗传学到工作流程和工具开发，GCC2023 培训课程提供了扩大与会者特定研究兴趣和遇到新主题的机会。\r\n\r\n每节课将近三个小时，让学员有时间充分沉浸在教材中，与培训师和其他学员交流，并与来自不同背景的人交流经验和方法。\r\n\r\n## Birds of a Feather (BoF)\r\nBirds of a Feather (BoF) 会议是 GCC 期间的非正式聚会，参与者可以讨论感兴趣的话题。 BoF 每天在会议结束时举行，各小组分成焦点小组，与专家和其他与会者进行交流和讨论。\r\n\r\nGCC2023 期间，与会者有九种不同的机会参加 BoF。今年的 BoF 提出了各种主题，包括备受期待的 Galaxy 高级用户与开发人员对话的机会。此外，BoF 还提供了举办迷你社交活动的机会，例如棋盘游戏、串酒吧和澳大利亚布里斯班徒步之旅！\r\n\r\n## CoFest\r\nGCC2023 主会之后，举办了为期三天的协作节（CoFest）。 CoFest 是 Galaxy 成员的社区聚会，这些成员有兴趣为 Galaxy 的工具集、文档、培训材料、代码库以及扩展 Galaxy 生态系统的其他任何地方做出贡献。 CoFest 的目标是：\r\n\r\n1. 扩大贡献者社区。这次 CoFest 的首要目的是欢迎新的贡献者，帮助您学习资源并结识能够帮助您做出贡献的人。\r\n2. 扩大 Galaxy 生态系统。不仅仅是代码，而是整个生态系统。这包括培训、工具、最佳实践工作流程、文档、测试用例、翻译、基础设施，甚至代码。\r\n\r\nCoFest 的参与者围绕着共同的兴趣，讨论与这些兴趣相关的共同话题。这些群组在 CoFest 开始前、开始时和整个过程中形成，旨在相互之间保持流动和高度互动。今年的 CoFest 分为九大主题：前端、后端、社区、设计、工具、工作流程、培训、测试和辅助项目。由于 CoFest 在整个活动期间都在不断变化和构建，因此主题被进一步细分，重点关注以下主题：交互式工具；升级 Vue3 和上传功能；吸引和保留社区参与活动、管理和领导力；ChatGXY；实施 Galaxy 工具健康审计服务；以及 Simon 的数据俱乐部。\r\n\r\n## 社会事件\r\nGCC2023 希望将 Galaxy 社区的成员联系在一起，因此在整个会议期间举办了不同的社交活动。今年的 GCC2023 社交活动包括为会议拉开序幕的欢迎晚宴、由 Galaxy 社区成员主持的布里斯班徒步游、带有街机游戏的酒馆爬行、桌游之夜、会议晚宴，以及广受好评的 Lone Pine 考拉保护区之行！\r\n\r\n毫无疑问，Lone Pine 考拉保护区是今年社交活动的亮点！一大群 GCC2023 与会者参观了世界上最大的考拉保护区，度过了一个下午，与动物邂逅、野生动物表演，并了解一些澳大利亚最受欢迎的野生动物！\r\n![GCC2023 Meeting Report Image8](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image8.png)\r\n\r\n通过这些有组织的社交活动，Galaxy 社区的成员们在建立职业关系的同时，也建立了友谊。此外，许多社区成员还通过非组织活动，包括游览植物园、参观动物园医院和热带雨林，以及一日游等，彼此建立联系。\r\n\r\n请参阅附录一，了解今年社交活动的更多照片以及遇到的所有令人惊叹的澳大利亚动物！\r\n\r\n## 纪念 Simon Gladman\r\n### Simon 数据俱乐部\r\nSimon Gladman 是 GCC2023 的最初发起者和组织者，如果看到他的伴侣和孩子参加这次会议，他一定会感到非常自豪。Simon 获得了多项荣誉，他作为创新者、榜样、支持者和社区联系者的遗产将继续受到表彰，“星际数据委员会 (Intergalactic Data Commission)” 更名为 “Simon 数据俱乐部 (Simon’s Data Club)”，并在他的组织中获得年度奖项。姓名。\r\n![GCC2023 Meeting Report Image9](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image9.png)\r\n\r\n### Simon Gladman 旅行补助金\r\n已故西蒙·格拉德曼 (Simon Gladman) 对 Galaxy 的贡献将获得以他名字命名的年度奖项。 Galaxy Australia 才华横溢的技术主管和大家的伙伴 Simon 在 GCC2023 上受到了人们的深深怀念，人们对他表示了许多敬意。\r\n\r\nSimon 对 Galaxy 充满热情并与人交流，并且很高兴能够组织在澳大利亚举办的首届国际 Galaxy 社区会议 (GCC)。在 GCC2023 上，我们宣布了首届 Simon Gladman 旅行补助金，以此来庆祝他。每年将向参加 Galaxy 社区活动的澳大利亚公民颁发 5,000 澳元的补助金。\r\n\r\n如果您与 Simon 一样充满热情并希望为 Galaxy 做出贡献，我们鼓励您申请 Simon Gladman 旅行补助金。\r\n\r\n## 感言\r\nGalaxy 执行董事会成员 Michael Schatz 是约翰·霍普金斯大学计算机科学和生物学的彭博杰出教授，他很高兴地看到：\r\n\r\n> *"The keynotes really highlighted how Galaxy enables cutting edge science.”*\r\n> *“主题演讲真正强调了 Galaxy 如何实现尖端科学。”*\r\n\r\n来自 BioCommons、昆士兰网络基础设施基金会 (QCIF)、昆士兰大学、墨尔本生物信息学和 AARNet 的 Galaxy Australia 团队成员发表了从监测工具健康状况到开发最近发布的 Galaxy Australia 基因组实验室等主题。澳大利亚银河服务项目负责人 Gareth Price 博士表示：\r\n\r\n> *“There was a fantastic exchange between our team and international colleagues and wonderful opportunities to engage with the global Galaxy community. GCC was an exhilarating experience, and it was inspiring to be surrounded by like-minded people. The team left full of energy to keep improving Galaxy Australia and strengthen their collaborations with the wider Galaxy community.”*\r\n> *“我们的团队与国际同事之间进行了精彩的交流，并有绝佳的机会与全球 Galaxy 社区互动。 GCC 是一次令人兴奋的经历，周围都是志趣相投的人，这很鼓舞人心。该团队充满活力地继续改进 Galaxy Australia，并加强与更广泛的 Galaxy 社区的合作。”*\r\n\r\n虽然我们是在昆士兰科技大学 (QUT) 的 The Cube 一流设施中举办的，但远程参与的能力是举办真正国际会议的关键因素。尽管 Amrita 大学系统基因组学首席科学家 Prash Suravajhala 博士是 GCC2023 组委会成员，但他无法从印度出发，但他：\r\n\r\n> *“Very excited and happy to be a part of GCC2023 virtually. We witnessed scintillating talks and brainstorming sessions, and the virtual attendance was a treat. This was a cherishing moment for me as I guzzled the talks from early morning India time! It has created a great camaraderie."*\r\n> *“能够以虚拟方式参加 GCC2023 感到非常兴奋和高兴。我们目睹了精彩的演讲和头脑风暴会议，虚拟出席是一种享受。这对我来说是一个珍贵的时刻，因为我沉迷于印度时间清晨的演讲！它创造了伟大的友情。"*\r\n\r\n## Recognition\r\n特别感谢 GCC2023 的赞助商：\r\n\r\n### 白金赞助商\r\nBizData (<https://www.bizdata.com.au/>)\r\n\r\n### 银牌赞助商\r\nLimagrain (<https://www.limagrain.com/en>)\r\n\r\nGalaxyWorks (<https://galaxyworks.io/>)\r\n\r\n### 铜牌赞助商\r\nGIGA Science (<https://academic.oup.com/gigascience?login=false>)\r\n\r\n\r\n非常感谢所有使 GCC2023 取得成功的个人：\r\n\r\n### 组织和科学委员会\r\nAndrew Lonie\r\n\r\nChristina Hall\r\n\r\nEnis Afgan\r\n\r\nGareth Price\r\n\r\nJenn Vessio\r\n\r\nMargita Jadan\r\n\r\nPrash Suravajhala\r\n\r\nRoberto Barrero Gumiel\r\n\r\nRoss Lazarus\r\n\r\nAssunta DeSanto\r\n\r\nNatalie Whitaker\r\n\r\nSimon Gladman\r\n\r\nClaudia Melogno de Sandoval \r\n\r\n\r\n### 培训协调员\r\nAssunta DeSanto\r\n\r\nIgor Makunin\r\n\r\nMark Crowe\r\n\r\n\r\n### 在线支持\r\nMelissa Burke\r\n\r\nPatrick Capon\r\n\r\n\r\n### 科学计划成员\r\nAndrew Lonie\r\n\r\nAnne Claire Fouilloux\r\n\r\nAnna Syme\r\n\r\nAnshu Bhardwaj\r\n\r\nBérénice Batut\r\n\r\nBryan Raubenolt\r\n\r\nCameron Hyde\r\n\r\nCatherine Bromhead\r\n\r\nClare Sloggett\r\n\r\nCristóbal Gallardo\r\n\r\nDan Blankenberg\r\n\r\nDavor Davidović\r\n\r\nEnis Afgan\r\n\r\nFrederik Coppens\r\n\r\nHans-Rudolf Hotz\r\n\r\nIvan Jakovlić\r\n\r\nJeremy Goecks\r\n\r\nJustin Lee\r\n\r\nMargita Jadan\r\n\r\nMaria Doyle\r\n\r\nMatthias Bernt\r\n\r\nNatalie Kucher\r\n\r\nNicola Soranzo\r\n\r\nNuwan Goonasekera\r\n\r\nPeter van Heusden\r\n\r\nRalf Weber\r\n\r\nRoss Lazarus\r\n\r\nSoyean Kim\r\n\r\nThomas Harrop\r\n\r\nTimothy Griffin\r\n\r\nTyler Collins\r\n\r\nWendi Bacon\r\n\r\nYvan Le Bras\r\n\r\n\r\n### 联合节主办方\r\nCameron Hyde\r\n\r\n## *附录一*\r\n\r\n![GCC2023 Meeting Report Image10](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image10.png)\r\n\r\n![GCC2023 Meeting Report Image11](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image11.png)\r\n\r\n![GCC2023 Meeting Report Image12](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image12.png)\r\n\r\n![GCC2023 Meeting Report Image13](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image13.png)\r\n\r\n![GCC2023 Meeting Report Image14](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image14.png)', 'bodyText': '作者：Natalie Whitaker\n编译：沈维燕\n时间：2023-08-14\n原文：2023 Galaxy Community Conference Meeting Report\n\n\nGCC 2023 会议纪要\n概述\n2023 年 Galaxy 社区会议（GCC2023）于7月10日至16日在澳大利亚昆士兰州布里斯班昆士兰科技大学举行。GCC 是 Galaxy 社区的年度会议，这是一个旨在在科学和技术层面展示过去一年内在 Galaxy 研究领域做出的令人惊叹的新工作，同时为与会者提供发现合作机会、加强联系、并开辟新的研究方向的大会。 GCC2023 由 Galaxy Australia 和 Australian BioCommons 主办，为期四天，包括了演讲、研讨会/培训、海报和演示等活动，还有三位主题演讲嘉宾和三天的协作节 (CoFest)。除了会议内容，整个 Galaxy 社区会议周还会举办网络交流和社交活动。总体而言，GCC2023 包括了 12.8 小时的长短演讲、37.5 小时的培训、3.3 小时的海报展示和演示，以及 10.6 小时的社交活动和交流。\n\nGCC2023 共有 91 名现场参会者和 40 名虚拟参会者。来自 21 个不同国家的与会者出席了本次会议：澳大利亚、比利时、巴西、加拿大、捷克、丹麦、法国、德国、印度、爱尔兰、马耳他、摩洛哥、荷兰、新西兰、挪威、新加坡、韩国、斯里兰卡、瑞士、英国和美国（图1）。在总参会人数中，22.4% 是研究助理或技术人员，17.6% 是高级科学家或首席调查员，9.6% 是研究生，7.2% 是博士后，2.4% 是本科生，40% 是其他身份。\n\n    \n    Figure 1. Map of GCC2023 attendees’ countries of origin.\n\n奖学金获得者\nGCC2023 非常感谢能够利用一位匿名捐赠者的资金提供现场和虚拟参会的奖学金。作为奖学金的一部分，受奖者被要求通过演讲、海报或二者兼有的方式参与会议。\n今年，一个现场奖学金授予了英国开放大学的一年级博士生 Marisa Loach（Twitter: @Marisa_Loach）。Marisa 进行了一次题为 “为什么使用 Galaxy？用户友好的生物信息学选项的初步结果” 的演讲并展示了一份海报。\n\nGCC2023共颁发了六个虚拟奖学金。以下列出了每位受奖者及其角色、机构和对会议的贡献。\nColine Royaux\nTwitter: @ColineRoyaux\n研究生 (Graduate student)\n巴黎索邦大学，法国自然历史博物馆，法国 (Sorbonne University, French Natural History Museum, France)\n演讲标题 “Galaxy-E：基于生态学的 Galaxy 倡议，2022-2023 年更新！”\nVajiha Hussain\n高年级本科生 (Senior undergraduate student)\n印度维尼昂大学 (Vignan University, India)\n海报标题 “利用 RNASeq 分析识别棕榈蓟马中潜在的 GBNV 生物标志物”\nSudeepti Kulshrestha\n研究生 (Graduate student)\n印度阿米蒂大学 (Amity University, India)\n海报标题为“使用基于网络的方法探索 Vaginal Microbiome 和先兆子痫的关联”\nJonas Bucher\n研究生 (Graduate student)\n瑞士苏黎世联邦理工学院，苏黎世大学，瑞士 (Swiss Federal Institute of Technology in Zurich (ETH Zurich), University of Zurich, Switzerland)\n海报标题 “Methylator - DNA cytosine methylation pipeline”\nKatarzyna Kamieniecka\nTwitter: @katemurat\n研究生 (Graduate student)\n英国布拉德福德大学 (University of Bradford, United Kingdom)\n海报标题 "Galaxy 中的 FAIR 数据管理"\nTaoufik Bensellak\n研究生 (Graduate student)\n英国利物浦大学 (University of Liverpool, United Kingdom)\n海报标题 “用于微阵列数据分析的 Galaxy 实例和工具”\n主讲嘉宾\nGCC2023 邀请了三位主题演讲嘉宾，分别就野生动物保护、结构生物学和生物安全等领域分享了他们的思考和研究成果。演讲者展示了他们团队如何通过使用 Galaxy 平台，以更易获取和可复现的方式完成工作。\n三位主题发言人分别发表了内容丰富的演讲，讨论了各自前瞻性研究领域的进展，重点关注开放存取端到端生物信息学 (open-access end-to-end bioinformatics)。Galaxy 在每位主题发言人的最新研究进展中都发挥了重要作用，Galaxy 开发人员和 Galaxy 社区能够亲眼目睹 Galaxy 对科学界的影响。此外，每位主题发言人都为 Galaxy 的未来提供了灵感，并有时间与平台发展轨迹背后的开发人员直接交流。\nCarolyn Hogg, PhD (University of Sydney，悉尼大学)\n来自悉尼大学的 Carolyn Hogg 博士作为第一位主讲人拉开了 GCC2023 的序幕。霍格博士在 "拯救塔斯马尼亚袋獾计划 (Save the Tasmanian Devil Program)" 进行的研究中发挥了重要作用，此外还重点研究了其他澳大利亚物种，如橙腹鹦鹉、考拉、兔耳袋狸和袋鼠。她在 GCC2023 上的演讲题为 “走向无限和超越：结合基因组学和云技术来拯救我们的物种”，强调了自然资源保护主义者和基因组科学家之间合作研究的必要性。她的愿景是通过改变科学、管理和政策的整合方式，为澳大利亚创造保护遗产，而 Galaxy 的使用增强了她的这一愿景。通过使用像 Galaxy 这样的开源平台，Hogg 博士能够产生可重复的基因组科学，以帮助澳大利亚的物种保护和管理实践。\n\nKate Michie, PhD (University of New South Wales，新南威尔士大学)\n来自新南威尔士大学的 Kate Michie 博士作为 GCC2023 的第二位主讲人发表了题为 “Alphafold2 和深度学习时代：结构生物学的最新进展” 的演讲。 Michie 博士在蛋白质结构生物学方面拥有二十多年的经验，并广泛使用 Alphafold2，并与众多研究人员密切合作，教他们如何使用这一强大的工具来推进他们的研究。在她的主题演讲中，Michie 博士呼吁关注 Galaxy 为结构生物学研究进展做好准备的迫切需要，这些进展肯定会伴随 Alphafold2 的巨大成功。 Michie 博士的演讲对 GCC2023 来说是一个有影响力的补充，因为 Galaxy 致力于保持竞争力并领先于社区的巨大研究需求。\n\nRoberto Barrero, PhD (Queensland University of Technology，昆士兰科技大学)\nGCC2023 的最后一位主讲人是来自昆士兰科技大学的 Roberto Barrero 博士。巴雷罗博士的演讲题为 “通过更快、更准确地诊断植物病毒和类病毒，改善植物行业获得新遗传学的机会”，重点讨论利用生物信息学解决农业、植物生物安全和人类健康方面的现实问题。最近，Barrero 博士在开发植物诊断工具包方面发挥了重要作用，该工具包可以在一次测试中准确检测一系列病毒和类病毒，并于 2018 年向他和他的团队授予生物安全影响奖。Barrero 博士的研究进展得到了 Galaxy 的支持通过 GA-VirReport 和高通量测序技术。访问开放式端到端生物信息学工作流程对于诊断植物病毒和类病毒至关重要，Galaxy 很高兴能在 GCC2023 上将这一主题置于前沿。\n\n培训课程\n\n培训是 Galaxy 社区的首要任务。让研究人员能够轻松学习使用该平台、如何进行新的分析或探索能够解决研究人员面临的实际需求的功能和工具，对于 Galaxy 的发展和可持续发展发挥了重要作用。本着这种精神，在 GCC2023 的三天里，共举办了 15 场不同的培训课程，供与会者与专家一起学习和实践生物信息学。专家包括主要研究员、Galaxy 开发人员、项目经理和 Galaxy 高级用户。培训课程主题多种多样，为 GCC2023 的所有与会者提供相关且实用的学习机会。从微生物学和人类遗传学到工作流程和工具开发，GCC2023 培训课程提供了扩大与会者特定研究兴趣和遇到新主题的机会。\n每节课将近三个小时，让学员有时间充分沉浸在教材中，与培训师和其他学员交流，并与来自不同背景的人交流经验和方法。\nBirds of a Feather (BoF)\nBirds of a Feather (BoF) 会议是 GCC 期间的非正式聚会，参与者可以讨论感兴趣的话题。 BoF 每天在会议结束时举行，各小组分成焦点小组，与专家和其他与会者进行交流和讨论。\nGCC2023 期间，与会者有九种不同的机会参加 BoF。今年的 BoF 提出了各种主题，包括备受期待的 Galaxy 高级用户与开发人员对话的机会。此外，BoF 还提供了举办迷你社交活动的机会，例如棋盘游戏、串酒吧和澳大利亚布里斯班徒步之旅！\nCoFest\nGCC2023 主会之后，举办了为期三天的协作节（CoFest）。 CoFest 是 Galaxy 成员的社区聚会，这些成员有兴趣为 Galaxy 的工具集、文档、培训材料、代码库以及扩展 Galaxy 生态系统的其他任何地方做出贡献。 CoFest 的目标是：\n\n扩大贡献者社区。这次 CoFest 的首要目的是欢迎新的贡献者，帮助您学习资源并结识能够帮助您做出贡献的人。\n扩大 Galaxy 生态系统。不仅仅是代码，而是整个生态系统。这包括培训、工具、最佳实践工作流程、文档、测试用例、翻译、基础设施，甚至代码。\n\nCoFest 的参与者围绕着共同的兴趣，讨论与这些兴趣相关的共同话题。这些群组在 CoFest 开始前、开始时和整个过程中形成，旨在相互之间保持流动和高度互动。今年的 CoFest 分为九大主题：前端、后端、社区、设计、工具、工作流程、培训、测试和辅助项目。由于 CoFest 在整个活动期间都在不断变化和构建，因此主题被进一步细分，重点关注以下主题：交互式工具；升级 Vue3 和上传功能；吸引和保留社区参与活动、管理和领导力；ChatGXY；实施 Galaxy 工具健康审计服务；以及 Simon 的数据俱乐部。\n社会事件\nGCC2023 希望将 Galaxy 社区的成员联系在一起，因此在整个会议期间举办了不同的社交活动。今年的 GCC2023 社交活动包括为会议拉开序幕的欢迎晚宴、由 Galaxy 社区成员主持的布里斯班徒步游、带有街机游戏的酒馆爬行、桌游之夜、会议晚宴，以及广受好评的 Lone Pine 考拉保护区之行！\n毫无疑问，Lone Pine 考拉保护区是今年社交活动的亮点！一大群 GCC2023 与会者参观了世界上最大的考拉保护区，度过了一个下午，与动物邂逅、野生动物表演，并了解一些澳大利亚最受欢迎的野生动物！\n\n通过这些有组织的社交活动，Galaxy 社区的成员们在建立职业关系的同时，也建立了友谊。此外，许多社区成员还通过非组织活动，包括游览植物园、参观动物园医院和热带雨林，以及一日游等，彼此建立联系。\n请参阅附录一，了解今年社交活动的更多照片以及遇到的所有令人惊叹的澳大利亚动物！\n纪念 Simon Gladman\nSimon 数据俱乐部\nSimon Gladman 是 GCC2023 的最初发起者和组织者，如果看到他的伴侣和孩子参加这次会议，他一定会感到非常自豪。Simon 获得了多项荣誉，他作为创新者、榜样、支持者和社区联系者的遗产将继续受到表彰，“星际数据委员会 (Intergalactic Data Commission)” 更名为 “Simon 数据俱乐部 (Simon’s Data Club)”，并在他的组织中获得年度奖项。姓名。\n\nSimon Gladman 旅行补助金\n已故西蒙·格拉德曼 (Simon Gladman) 对 Galaxy 的贡献将获得以他名字命名的年度奖项。 Galaxy Australia 才华横溢的技术主管和大家的伙伴 Simon 在 GCC2023 上受到了人们的深深怀念，人们对他表示了许多敬意。\nSimon 对 Galaxy 充满热情并与人交流，并且很高兴能够组织在澳大利亚举办的首届国际 Galaxy 社区会议 (GCC)。在 GCC2023 上，我们宣布了首届 Simon Gladman 旅行补助金，以此来庆祝他。每年将向参加 Galaxy 社区活动的澳大利亚公民颁发 5,000 澳元的补助金。\n如果您与 Simon 一样充满热情并希望为 Galaxy 做出贡献，我们鼓励您申请 Simon Gladman 旅行补助金。\n感言\nGalaxy 执行董事会成员 Michael Schatz 是约翰·霍普金斯大学计算机科学和生物学的彭博杰出教授，他很高兴地看到：\n\n"The keynotes really highlighted how Galaxy enables cutting edge science.”\n“主题演讲真正强调了 Galaxy 如何实现尖端科学。”\n\n来自 BioCommons、昆士兰网络基础设施基金会 (QCIF)、昆士兰大学、墨尔本生物信息学和 AARNet 的 Galaxy Australia 团队成员发表了从监测工具健康状况到开发最近发布的 Galaxy Australia 基因组实验室等主题。澳大利亚银河服务项目负责人 Gareth Price 博士表示：\n\n“There was a fantastic exchange between our team and international colleagues and wonderful opportunities to engage with the global Galaxy community. GCC was an exhilarating experience, and it was inspiring to be surrounded by like-minded people. The team left full of energy to keep improving Galaxy Australia and strengthen their collaborations with the wider Galaxy community.”\n“我们的团队与国际同事之间进行了精彩的交流，并有绝佳的机会与全球 Galaxy 社区互动。 GCC 是一次令人兴奋的经历，周围都是志趣相投的人，这很鼓舞人心。该团队充满活力地继续改进 Galaxy Australia，并加强与更广泛的 Galaxy 社区的合作。”\n\n虽然我们是在昆士兰科技大学 (QUT) 的 The Cube 一流设施中举办的，但远程参与的能力是举办真正国际会议的关键因素。尽管 Amrita 大学系统基因组学首席科学家 Prash Suravajhala 博士是 GCC2023 组委会成员，但他无法从印度出发，但他：\n\n“Very excited and happy to be a part of GCC2023 virtually. We witnessed scintillating talks and brainstorming sessions, and the virtual attendance was a treat. This was a cherishing moment for me as I guzzled the talks from early morning India time! It has created a great camaraderie."\n“能够以虚拟方式参加 GCC2023 感到非常兴奋和高兴。我们目睹了精彩的演讲和头脑风暴会议，虚拟出席是一种享受。这对我来说是一个珍贵的时刻，因为我沉迷于印度时间清晨的演讲！它创造了伟大的友情。"\n\nRecognition\n特别感谢 GCC2023 的赞助商：\n白金赞助商\nBizData (https://www.bizdata.com.au/)\n银牌赞助商\nLimagrain (https://www.limagrain.com/en)\nGalaxyWorks (https://galaxyworks.io/)\n铜牌赞助商\nGIGA Science (https://academic.oup.com/gigascience?login=false)\n非常感谢所有使 GCC2023 取得成功的个人：\n组织和科学委员会\nAndrew Lonie\nChristina Hall\nEnis Afgan\nGareth Price\nJenn Vessio\nMargita Jadan\nPrash Suravajhala\nRoberto Barrero Gumiel\nRoss Lazarus\nAssunta DeSanto\nNatalie Whitaker\nSimon Gladman\nClaudia Melogno de Sandoval\n培训协调员\nAssunta DeSanto\nIgor Makunin\nMark Crowe\n在线支持\nMelissa Burke\nPatrick Capon\n科学计划成员\nAndrew Lonie\nAnne Claire Fouilloux\nAnna Syme\nAnshu Bhardwaj\nBérénice Batut\nBryan Raubenolt\nCameron Hyde\nCatherine Bromhead\nClare Sloggett\nCristóbal Gallardo\nDan Blankenberg\nDavor Davidović\nEnis Afgan\nFrederik Coppens\nHans-Rudolf Hotz\nIvan Jakovlić\nJeremy Goecks\nJustin Lee\nMargita Jadan\nMaria Doyle\nMatthias Bernt\nNatalie Kucher\nNicola Soranzo\nNuwan Goonasekera\nPeter van Heusden\nRalf Weber\nRoss Lazarus\nSoyean Kim\nThomas Harrop\nTimothy Griffin\nTyler Collins\nWendi Bacon\nYvan Le Bras\n联合节主办方\nCameron Hyde\n附录一', 'bodyHTML': '<blockquote>\n<p dir="auto">作者：Natalie Whitaker<br>\n编译：<a href="https://weiyan.cc" rel="nofollow">沈维燕</a><br>\n时间：2023-08-14<br>\n原文：<a href="https://galaxyproject.org/blog/2023-08-14-gc-c2023-meeting-report/" rel="nofollow">2023 Galaxy Community Conference Meeting Report</a></p>\n</blockquote>\n\n<h2 dir="auto">GCC 2023 会议纪要</h2>\n<h3 dir="auto">概述</h3>\n<p dir="auto">2023 年 Galaxy 社区会议（GCC2023）于7月10日至16日在澳大利亚昆士兰州布里斯班昆士兰科技大学举行。GCC 是 Galaxy 社区的年度会议，这是一个旨在在科学和技术层面展示过去一年内在 Galaxy 研究领域做出的令人惊叹的新工作，同时为与会者提供发现合作机会、加强联系、并开辟新的研究方向的大会。 GCC2023 由 Galaxy Australia 和 Australian BioCommons 主办，为期四天，包括了演讲、研讨会/培训、海报和演示等活动，还有三位主题演讲嘉宾和三天的协作节 (CoFest)。除了会议内容，整个 Galaxy 社区会议周还会举办网络交流和社交活动。总体而言，GCC2023 包括了 12.8 小时的长短演讲、37.5 小时的培训、3.3 小时的海报展示和演示，以及 10.6 小时的社交活动和交流。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/be1efc7e01327079a4b80b0494e32992c76d3e7844b9f4bd263504faff7dd3c8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765312e706e67"><img src="https://camo.githubusercontent.com/be1efc7e01327079a4b80b0494e32992c76d3e7844b9f4bd263504faff7dd3c8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765312e706e67" alt="GCC2023 Meeting Report Image1" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image1.png" style="max-width: 100%;"></a></p>\n<p dir="auto">GCC2023 共有 91 名现场参会者和 40 名虚拟参会者。来自 21 个不同国家的与会者出席了本次会议：澳大利亚、比利时、巴西、加拿大、捷克、丹麦、法国、德国、印度、爱尔兰、马耳他、摩洛哥、荷兰、新西兰、挪威、新加坡、韩国、斯里兰卡、瑞士、英国和美国（图1）。在总参会人数中，22.4% 是研究助理或技术人员，17.6% 是高级科学家或首席调查员，9.6% 是研究生，7.2% 是博士后，2.4% 是本科生，40% 是其他身份。</p>\n<div align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4de2333634fc99fa90193b17fccc4aa2019d82691bb2dc58ca70e59b3d953df5/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765322e706e67"><img src="https://camo.githubusercontent.com/4de2333634fc99fa90193b17fccc4aa2019d82691bb2dc58ca70e59b3d953df5/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765322e706e67" alt="GCC2023 Meeting Report Image2" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image2.png" style="max-width: 100%;"></a>\n    <em>Figure 1. Map of GCC2023 attendees’ countries of origin.</em>\n</div>\n<h2 dir="auto">奖学金获得者</h2>\n<p dir="auto">GCC2023 非常感谢能够利用一位匿名捐赠者的资金提供现场和虚拟参会的奖学金。作为奖学金的一部分，受奖者被要求通过演讲、海报或二者兼有的方式参与会议。</p>\n<p dir="auto">今年，一个现场奖学金授予了英国开放大学的一年级博士生 Marisa Loach（Twitter: @Marisa_Loach）。Marisa 进行了一次题为 “为什么使用 Galaxy？用户友好的生物信息学选项的初步结果” 的演讲并展示了一份海报。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f5d611c1ffdc53813e5c2f11734143a847c8fc1d878660c3d179908a6227e4f1/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765332e706e67"><img src="https://camo.githubusercontent.com/f5d611c1ffdc53813e5c2f11734143a847c8fc1d878660c3d179908a6227e4f1/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765332e706e67" alt="GCC2023 Meeting Report Image3" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image3.png" style="max-width: 100%;"></a></p>\n<p dir="auto">GCC2023共颁发了六个虚拟奖学金。以下列出了每位受奖者及其角色、机构和对会议的贡献。</p>\n<h3 dir="auto">Coline Royaux</h3>\n<p dir="auto">Twitter: <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/ColineRoyaux/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ColineRoyaux">@ColineRoyaux</a></p>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">巴黎索邦大学，法国自然历史博物馆，法国 (Sorbonne University, French Natural History Museum, France)</p>\n<p dir="auto">演讲标题 “Galaxy-E：基于生态学的 Galaxy 倡议，2022-2023 年更新！”</p>\n<h3 dir="auto">Vajiha Hussain</h3>\n<p dir="auto">高年级本科生 (Senior undergraduate student)</p>\n<p dir="auto">印度维尼昂大学 (Vignan University, India)</p>\n<p dir="auto">海报标题 “利用 RNASeq 分析识别棕榈蓟马中潜在的 GBNV 生物标志物”</p>\n<h3 dir="auto">Sudeepti Kulshrestha</h3>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">印度阿米蒂大学 (Amity University, India)</p>\n<p dir="auto">海报标题为“使用基于网络的方法探索 Vaginal Microbiome 和先兆子痫的关联”</p>\n<h3 dir="auto">Jonas Bucher</h3>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">瑞士苏黎世联邦理工学院，苏黎世大学，瑞士 (Swiss Federal Institute of Technology in Zurich (ETH Zurich), University of Zurich, Switzerland)</p>\n<p dir="auto">海报标题 “Methylator - DNA cytosine methylation pipeline”</p>\n<h3 dir="auto">Katarzyna Kamieniecka</h3>\n<p dir="auto">Twitter: @katemurat</p>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">英国布拉德福德大学 (University of Bradford, United Kingdom)</p>\n<p dir="auto">海报标题 "Galaxy 中的 FAIR 数据管理"</p>\n<h4 dir="auto">Taoufik Bensellak</h4>\n<p dir="auto">研究生 (Graduate student)</p>\n<p dir="auto">英国利物浦大学 (University of Liverpool, United Kingdom)</p>\n<p dir="auto">海报标题 “用于微阵列数据分析的 Galaxy 实例和工具”</p>\n<h2 dir="auto">主讲嘉宾</h2>\n<p dir="auto">GCC2023 邀请了三位主题演讲嘉宾，分别就野生动物保护、结构生物学和生物安全等领域分享了他们的思考和研究成果。演讲者展示了他们团队如何通过使用 Galaxy 平台，以更易获取和可复现的方式完成工作。</p>\n<p dir="auto">三位主题发言人分别发表了内容丰富的演讲，讨论了各自前瞻性研究领域的进展，重点关注开放存取端到端生物信息学 (open-access end-to-end bioinformatics)。Galaxy 在每位主题发言人的最新研究进展中都发挥了重要作用，Galaxy 开发人员和 Galaxy 社区能够亲眼目睹 Galaxy 对科学界的影响。此外，每位主题发言人都为 Galaxy 的未来提供了灵感，并有时间与平台发展轨迹背后的开发人员直接交流。</p>\n<h3 dir="auto">Carolyn Hogg, PhD (University of Sydney，悉尼大学)</h3>\n<p dir="auto">来自悉尼大学的 Carolyn Hogg 博士作为第一位主讲人拉开了 GCC2023 的序幕。霍格博士在 "拯救塔斯马尼亚袋獾计划 (Save the Tasmanian Devil Program)" 进行的研究中发挥了重要作用，此外还重点研究了其他澳大利亚物种，如橙腹鹦鹉、考拉、兔耳袋狸和袋鼠。她在 GCC2023 上的演讲题为 “走向无限和超越：结合基因组学和云技术来拯救我们的物种”，强调了自然资源保护主义者和基因组科学家之间合作研究的必要性。她的愿景是通过改变科学、管理和政策的整合方式，为澳大利亚创造保护遗产，而 Galaxy 的使用增强了她的这一愿景。通过使用像 Galaxy 这样的开源平台，Hogg 博士能够产生可重复的基因组科学，以帮助澳大利亚的物种保护和管理实践。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9e3a4772a6eb00828c58cf2f3deeaad104b04b1ee1b4604b9c89850a5d205ee4/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765342e706e67"><img src="https://camo.githubusercontent.com/9e3a4772a6eb00828c58cf2f3deeaad104b04b1ee1b4604b9c89850a5d205ee4/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765342e706e67" alt="GCC2023 Meeting Report Image4" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image4.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">Kate Michie, PhD (University of New South Wales，新南威尔士大学)</h3>\n<p dir="auto">来自新南威尔士大学的 Kate Michie 博士作为 GCC2023 的第二位主讲人发表了题为 “Alphafold2 和深度学习时代：结构生物学的最新进展” 的演讲。 Michie 博士在蛋白质结构生物学方面拥有二十多年的经验，并广泛使用 Alphafold2，并与众多研究人员密切合作，教他们如何使用这一强大的工具来推进他们的研究。在她的主题演讲中，Michie 博士呼吁关注 Galaxy 为结构生物学研究进展做好准备的迫切需要，这些进展肯定会伴随 Alphafold2 的巨大成功。 Michie 博士的演讲对 GCC2023 来说是一个有影响力的补充，因为 Galaxy 致力于保持竞争力并领先于社区的巨大研究需求。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ded6510b00466589d4eb17aaaed49092da7fa9eedf1bf55003ae9137800658f4/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765352e706e67"><img src="https://camo.githubusercontent.com/ded6510b00466589d4eb17aaaed49092da7fa9eedf1bf55003ae9137800658f4/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765352e706e67" alt="GCC2023 Meeting Report Image5" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image5.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">Roberto Barrero, PhD (Queensland University of Technology，昆士兰科技大学)</h3>\n<p dir="auto">GCC2023 的最后一位主讲人是来自昆士兰科技大学的 Roberto Barrero 博士。巴雷罗博士的演讲题为 “通过更快、更准确地诊断植物病毒和类病毒，改善植物行业获得新遗传学的机会”，重点讨论利用生物信息学解决农业、植物生物安全和人类健康方面的现实问题。最近，Barrero 博士在开发植物诊断工具包方面发挥了重要作用，该工具包可以在一次测试中准确检测一系列病毒和类病毒，并于 2018 年向他和他的团队授予生物安全影响奖。Barrero 博士的研究进展得到了 Galaxy 的支持通过 GA-VirReport 和高通量测序技术。访问开放式端到端生物信息学工作流程对于诊断植物病毒和类病毒至关重要，Galaxy 很高兴能在 GCC2023 上将这一主题置于前沿。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c9972b74a1651d3315bb72c809329f74c97d807ad00c8231412af7ab9d333542/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765362e706e67"><img src="https://camo.githubusercontent.com/c9972b74a1651d3315bb72c809329f74c97d807ad00c8231412af7ab9d333542/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765362e706e67" alt="GCC2023 Meeting Report Image6" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image6.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">培训课程</h2>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/820aabba6dcc38c691136c2d24773883811de97e91573fc936fcd238909d1af8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765372e706e67"><img src="https://camo.githubusercontent.com/820aabba6dcc38c691136c2d24773883811de97e91573fc936fcd238909d1af8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765372e706e67" alt="GCC2023 Meeting Report Image7" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image7.png" style="max-width: 100%;"></a><br>\n培训是 Galaxy 社区的首要任务。让研究人员能够轻松学习使用该平台、如何进行新的分析或探索能够解决研究人员面临的实际需求的功能和工具，对于 Galaxy 的发展和可持续发展发挥了重要作用。本着这种精神，在 GCC2023 的三天里，共举办了 15 场不同的培训课程，供与会者与专家一起学习和实践生物信息学。专家包括主要研究员、Galaxy 开发人员、项目经理和 Galaxy 高级用户。培训课程主题多种多样，为 GCC2023 的所有与会者提供相关且实用的学习机会。从微生物学和人类遗传学到工作流程和工具开发，GCC2023 培训课程提供了扩大与会者特定研究兴趣和遇到新主题的机会。</p>\n<p dir="auto">每节课将近三个小时，让学员有时间充分沉浸在教材中，与培训师和其他学员交流，并与来自不同背景的人交流经验和方法。</p>\n<h2 dir="auto">Birds of a Feather (BoF)</h2>\n<p dir="auto">Birds of a Feather (BoF) 会议是 GCC 期间的非正式聚会，参与者可以讨论感兴趣的话题。 BoF 每天在会议结束时举行，各小组分成焦点小组，与专家和其他与会者进行交流和讨论。</p>\n<p dir="auto">GCC2023 期间，与会者有九种不同的机会参加 BoF。今年的 BoF 提出了各种主题，包括备受期待的 Galaxy 高级用户与开发人员对话的机会。此外，BoF 还提供了举办迷你社交活动的机会，例如棋盘游戏、串酒吧和澳大利亚布里斯班徒步之旅！</p>\n<h2 dir="auto">CoFest</h2>\n<p dir="auto">GCC2023 主会之后，举办了为期三天的协作节（CoFest）。 CoFest 是 Galaxy 成员的社区聚会，这些成员有兴趣为 Galaxy 的工具集、文档、培训材料、代码库以及扩展 Galaxy 生态系统的其他任何地方做出贡献。 CoFest 的目标是：</p>\n<ol dir="auto">\n<li>扩大贡献者社区。这次 CoFest 的首要目的是欢迎新的贡献者，帮助您学习资源并结识能够帮助您做出贡献的人。</li>\n<li>扩大 Galaxy 生态系统。不仅仅是代码，而是整个生态系统。这包括培训、工具、最佳实践工作流程、文档、测试用例、翻译、基础设施，甚至代码。</li>\n</ol>\n<p dir="auto">CoFest 的参与者围绕着共同的兴趣，讨论与这些兴趣相关的共同话题。这些群组在 CoFest 开始前、开始时和整个过程中形成，旨在相互之间保持流动和高度互动。今年的 CoFest 分为九大主题：前端、后端、社区、设计、工具、工作流程、培训、测试和辅助项目。由于 CoFest 在整个活动期间都在不断变化和构建，因此主题被进一步细分，重点关注以下主题：交互式工具；升级 Vue3 和上传功能；吸引和保留社区参与活动、管理和领导力；ChatGXY；实施 Galaxy 工具健康审计服务；以及 Simon 的数据俱乐部。</p>\n<h2 dir="auto">社会事件</h2>\n<p dir="auto">GCC2023 希望将 Galaxy 社区的成员联系在一起，因此在整个会议期间举办了不同的社交活动。今年的 GCC2023 社交活动包括为会议拉开序幕的欢迎晚宴、由 Galaxy 社区成员主持的布里斯班徒步游、带有街机游戏的酒馆爬行、桌游之夜、会议晚宴，以及广受好评的 Lone Pine 考拉保护区之行！</p>\n<p dir="auto">毫无疑问，Lone Pine 考拉保护区是今年社交活动的亮点！一大群 GCC2023 与会者参观了世界上最大的考拉保护区，度过了一个下午，与动物邂逅、野生动物表演，并了解一些澳大利亚最受欢迎的野生动物！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/27fba3c7317251c144f30eefb6ed75fc6b5fc7ea9a723f3c03f92fef4058334e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765382e706e67"><img src="https://camo.githubusercontent.com/27fba3c7317251c144f30eefb6ed75fc6b5fc7ea9a723f3c03f92fef4058334e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765382e706e67" alt="GCC2023 Meeting Report Image8" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image8.png" style="max-width: 100%;"></a></p>\n<p dir="auto">通过这些有组织的社交活动，Galaxy 社区的成员们在建立职业关系的同时，也建立了友谊。此外，许多社区成员还通过非组织活动，包括游览植物园、参观动物园医院和热带雨林，以及一日游等，彼此建立联系。</p>\n<p dir="auto">请参阅附录一，了解今年社交活动的更多照片以及遇到的所有令人惊叹的澳大利亚动物！</p>\n<h2 dir="auto">纪念 Simon Gladman</h2>\n<h3 dir="auto">Simon 数据俱乐部</h3>\n<p dir="auto">Simon Gladman 是 GCC2023 的最初发起者和组织者，如果看到他的伴侣和孩子参加这次会议，他一定会感到非常自豪。Simon 获得了多项荣誉，他作为创新者、榜样、支持者和社区联系者的遗产将继续受到表彰，“星际数据委员会 (Intergalactic Data Commission)” 更名为 “Simon 数据俱乐部 (Simon’s Data Club)”，并在他的组织中获得年度奖项。姓名。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/dc697b26aa7ab20e978f5103338b9cdbc32bc07f47024252e116f671ba6f3409/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765392e706e67"><img src="https://camo.githubusercontent.com/dc697b26aa7ab20e978f5103338b9cdbc32bc07f47024252e116f671ba6f3409/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d616765392e706e67" alt="GCC2023 Meeting Report Image9" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image9.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">Simon Gladman 旅行补助金</h3>\n<p dir="auto">已故西蒙·格拉德曼 (Simon Gladman) 对 Galaxy 的贡献将获得以他名字命名的年度奖项。 Galaxy Australia 才华横溢的技术主管和大家的伙伴 Simon 在 GCC2023 上受到了人们的深深怀念，人们对他表示了许多敬意。</p>\n<p dir="auto">Simon 对 Galaxy 充满热情并与人交流，并且很高兴能够组织在澳大利亚举办的首届国际 Galaxy 社区会议 (GCC)。在 GCC2023 上，我们宣布了首届 Simon Gladman 旅行补助金，以此来庆祝他。每年将向参加 Galaxy 社区活动的澳大利亚公民颁发 5,000 澳元的补助金。</p>\n<p dir="auto">如果您与 Simon 一样充满热情并希望为 Galaxy 做出贡献，我们鼓励您申请 Simon Gladman 旅行补助金。</p>\n<h2 dir="auto">感言</h2>\n<p dir="auto">Galaxy 执行董事会成员 Michael Schatz 是约翰·霍普金斯大学计算机科学和生物学的彭博杰出教授，他很高兴地看到：</p>\n<blockquote>\n<p dir="auto"><em>"The keynotes really highlighted how Galaxy enables cutting edge science.”</em><br>\n<em>“主题演讲真正强调了 Galaxy 如何实现尖端科学。”</em></p>\n</blockquote>\n<p dir="auto">来自 BioCommons、昆士兰网络基础设施基金会 (QCIF)、昆士兰大学、墨尔本生物信息学和 AARNet 的 Galaxy Australia 团队成员发表了从监测工具健康状况到开发最近发布的 Galaxy Australia 基因组实验室等主题。澳大利亚银河服务项目负责人 Gareth Price 博士表示：</p>\n<blockquote>\n<p dir="auto"><em>“There was a fantastic exchange between our team and international colleagues and wonderful opportunities to engage with the global Galaxy community. GCC was an exhilarating experience, and it was inspiring to be surrounded by like-minded people. The team left full of energy to keep improving Galaxy Australia and strengthen their collaborations with the wider Galaxy community.”</em><br>\n<em>“我们的团队与国际同事之间进行了精彩的交流，并有绝佳的机会与全球 Galaxy 社区互动。 GCC 是一次令人兴奋的经历，周围都是志趣相投的人，这很鼓舞人心。该团队充满活力地继续改进 Galaxy Australia，并加强与更广泛的 Galaxy 社区的合作。”</em></p>\n</blockquote>\n<p dir="auto">虽然我们是在昆士兰科技大学 (QUT) 的 The Cube 一流设施中举办的，但远程参与的能力是举办真正国际会议的关键因素。尽管 Amrita 大学系统基因组学首席科学家 Prash Suravajhala 博士是 GCC2023 组委会成员，但他无法从印度出发，但他：</p>\n<blockquote>\n<p dir="auto"><em>“Very excited and happy to be a part of GCC2023 virtually. We witnessed scintillating talks and brainstorming sessions, and the virtual attendance was a treat. This was a cherishing moment for me as I guzzled the talks from early morning India time! It has created a great camaraderie."</em><br>\n<em>“能够以虚拟方式参加 GCC2023 感到非常兴奋和高兴。我们目睹了精彩的演讲和头脑风暴会议，虚拟出席是一种享受。这对我来说是一个珍贵的时刻，因为我沉迷于印度时间清晨的演讲！它创造了伟大的友情。"</em></p>\n</blockquote>\n<h2 dir="auto">Recognition</h2>\n<p dir="auto">特别感谢 GCC2023 的赞助商：</p>\n<h3 dir="auto">白金赞助商</h3>\n<p dir="auto">BizData (<a href="https://www.bizdata.com.au/" rel="nofollow">https://www.bizdata.com.au/</a>)</p>\n<h3 dir="auto">银牌赞助商</h3>\n<p dir="auto">Limagrain (<a href="https://www.limagrain.com/en" rel="nofollow">https://www.limagrain.com/en</a>)</p>\n<p dir="auto">GalaxyWorks (<a href="https://galaxyworks.io/" rel="nofollow">https://galaxyworks.io/</a>)</p>\n<h3 dir="auto">铜牌赞助商</h3>\n<p dir="auto">GIGA Science (<a href="https://academic.oup.com/gigascience?login=false" rel="nofollow">https://academic.oup.com/gigascience?login=false</a>)</p>\n<p dir="auto">非常感谢所有使 GCC2023 取得成功的个人：</p>\n<h3 dir="auto">组织和科学委员会</h3>\n<p dir="auto">Andrew Lonie</p>\n<p dir="auto">Christina Hall</p>\n<p dir="auto">Enis Afgan</p>\n<p dir="auto">Gareth Price</p>\n<p dir="auto">Jenn Vessio</p>\n<p dir="auto">Margita Jadan</p>\n<p dir="auto">Prash Suravajhala</p>\n<p dir="auto">Roberto Barrero Gumiel</p>\n<p dir="auto">Ross Lazarus</p>\n<p dir="auto">Assunta DeSanto</p>\n<p dir="auto">Natalie Whitaker</p>\n<p dir="auto">Simon Gladman</p>\n<p dir="auto">Claudia Melogno de Sandoval</p>\n<h3 dir="auto">培训协调员</h3>\n<p dir="auto">Assunta DeSanto</p>\n<p dir="auto">Igor Makunin</p>\n<p dir="auto">Mark Crowe</p>\n<h3 dir="auto">在线支持</h3>\n<p dir="auto">Melissa Burke</p>\n<p dir="auto">Patrick Capon</p>\n<h3 dir="auto">科学计划成员</h3>\n<p dir="auto">Andrew Lonie</p>\n<p dir="auto">Anne Claire Fouilloux</p>\n<p dir="auto">Anna Syme</p>\n<p dir="auto">Anshu Bhardwaj</p>\n<p dir="auto">Bérénice Batut</p>\n<p dir="auto">Bryan Raubenolt</p>\n<p dir="auto">Cameron Hyde</p>\n<p dir="auto">Catherine Bromhead</p>\n<p dir="auto">Clare Sloggett</p>\n<p dir="auto">Cristóbal Gallardo</p>\n<p dir="auto">Dan Blankenberg</p>\n<p dir="auto">Davor Davidović</p>\n<p dir="auto">Enis Afgan</p>\n<p dir="auto">Frederik Coppens</p>\n<p dir="auto">Hans-Rudolf Hotz</p>\n<p dir="auto">Ivan Jakovlić</p>\n<p dir="auto">Jeremy Goecks</p>\n<p dir="auto">Justin Lee</p>\n<p dir="auto">Margita Jadan</p>\n<p dir="auto">Maria Doyle</p>\n<p dir="auto">Matthias Bernt</p>\n<p dir="auto">Natalie Kucher</p>\n<p dir="auto">Nicola Soranzo</p>\n<p dir="auto">Nuwan Goonasekera</p>\n<p dir="auto">Peter van Heusden</p>\n<p dir="auto">Ralf Weber</p>\n<p dir="auto">Ross Lazarus</p>\n<p dir="auto">Soyean Kim</p>\n<p dir="auto">Thomas Harrop</p>\n<p dir="auto">Timothy Griffin</p>\n<p dir="auto">Tyler Collins</p>\n<p dir="auto">Wendi Bacon</p>\n<p dir="auto">Yvan Le Bras</p>\n<h3 dir="auto">联合节主办方</h3>\n<p dir="auto">Cameron Hyde</p>\n<h2 dir="auto"><em>附录一</em></h2>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/517f9a7f3cbc96473a501d782f1c4e77174889fa372bcc53f525f9e0d869ac0a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531302e706e67"><img src="https://camo.githubusercontent.com/517f9a7f3cbc96473a501d782f1c4e77174889fa372bcc53f525f9e0d869ac0a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531302e706e67" alt="GCC2023 Meeting Report Image10" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image10.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0c9e143102898b208edf63b861ae6e8b88451c8519960ed5de7b86ffd22d4199/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531312e706e67"><img src="https://camo.githubusercontent.com/0c9e143102898b208edf63b861ae6e8b88451c8519960ed5de7b86ffd22d4199/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531312e706e67" alt="GCC2023 Meeting Report Image11" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image11.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5845a4c32926550b3b3e1a743ed017458b03a98d9a3b72b65a759e5edba69afc/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531322e706e67"><img src="https://camo.githubusercontent.com/5845a4c32926550b3b3e1a743ed017458b03a98d9a3b72b65a759e5edba69afc/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531322e706e67" alt="GCC2023 Meeting Report Image12" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image12.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/aa083b1fe485dcb6b87606fe86caa7b3bd4bf897f5c0d305fa3f32987fda635e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531332e706e67"><img src="https://camo.githubusercontent.com/aa083b1fe485dcb6b87606fe86caa7b3bd4bf897f5c0d305fa3f32987fda635e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531332e706e67" alt="GCC2023 Meeting Report Image13" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image13.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d0a63d7ebe1cb2d504e819e5b3265f166a210dceb97abbb0e4c2ba0a426d2c4b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531342e706e67"><img src="https://camo.githubusercontent.com/d0a63d7ebe1cb2d504e819e5b3265f166a210dceb97abbb0e4c2ba0a426d2c4b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f474343323032332d4d656574696e672d5265706f72742d496d61676531342e706e67" alt="GCC2023 Meeting Report Image14" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/GCC2023-Meeting-Report-Image14.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.3-资讯'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '兆碱基中关于 Kb、KB、Bps、bps 的区别', 'number': 20, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/20', 'createdAt': '2023-11-23T01:39:14Z', 'lastEditedAt': '2023-11-23T02:48:23Z', 'updatedAt': '2023-11-23T02:48:23Z', 'body': '生物信息很多文章都提到 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。借着这个问题，我们今天来聊一聊计算机存储和数据传输中 Kb、KB、Bps、bps 的一些区别，分析一下所谓的兆碱基到底是使用哪一种标准（单位）怎么计算出来的。\r\n\r\n<!-- more -->\r\n\r\n## 计算机存储容量单位\r\n\r\nBit (binary digit)：亦称二进制位，指二进制中的一位，是信息的最小单位。位的值只会是 0 或 1。虽然计算机也提供对位的判断和操作，但是计算机指令一般以字节(Byte)为单位。在大多数的计算机系统中，八位是一个字节。一位的值通常以存储电容是否带电来衡量。\r\n\r\nB (Byte)：字节。8 个二进制位构成 1 个"字节(Byte)"，它是电脑存储空间的基本计量单位。1 字节 (Byte)=8(bit) 位，就是有 8 个二进制数组成。1 个英文字符是 1 个字节,也就是 1B；1 个汉字为 2 个字符，也就是 2B。\r\n\r\nGB (Gigabyte)：吉字节，是一种**十进制**的信息计量单位。Gibibyte（giga binary byte 的缩写）则是**二进制**信息计量的一个单位，简称 GiB。吉字节（Gigabyte）常容易和二进制的信息计量单位 Gibibyte 混淆。\r\n\r\n> Gibibyte 与 Gigabyte 常常被混淆，前者的计算方式是二进制，后者的计算方式是十进制。现今的计算上，常把 Gigabyte 以二进制的方式计算，即 $2^{30} = 1,073,741,824$ 。(因为 Windows 对 GB 这个信息计量单位的误用，因此在 Windows 中显示的 "1GB"，其实应是指 "1GiB"，但 Windows 却显示为 "1GB"，而常造成误解。误用会普遍化的一大因素，是因为 Windows 的操作系统占有率高)，由于两种换算方法的不同，使容量在计算上相差了 7.3%，所以常有 Windows 系统报告的容量比硬盘标示的容量还要小的情况发生。但在苹果公司的 OS X 操作系统中，对于存储设备的容量计算方式与硬盘厂商一致，均为 1GB = 1,000,000,000 ( $10^{9}$ ) 字节的十进制，避免了计算和使用上的麻烦。\r\n>\r\n> —— 维基百科 - Gibibyte，<https://zh.wikipedia.org/wiki/Gibibyte>\r\n\r\nK、M、G 都是 KB、MB、GB 的简称。由于混淆已经普遍化，Gigabyte 往往是指 Gibibyte，所以平时我们说的 1 兆存储就是 1M（MB），1G 存储就是 1GB）。我们的照片一般是 104KB、209KB、1.45MB、2.45MB、3.32MB 等等。\r\n\r\n在说明其他储存单位的换算前，我们来看看两个标准：SI、IEC。\r\n\r\n### 国际单位制（SI）\r\n\r\n国际单位制(简称 SI，来自于法语 Système International d\'Unités)，是世界上最普遍采用的标准度量系统。国际单位制以七个基本单位(米（m），千克（kg），秒（s），安培（A），开尔文（K），摩尔（mol），坎德拉（cd）)为基础，由此建立起一系列相互换算关系明确的"一致单位"。另有二十个基于十进制的词头，当加在单位名称或符号前的时候，可用于表达该单位的倍数或分数。\r\n\r\n### 国际电工委员会（IEC）\r\n\r\n国际电工委员会（IEC, International Electrotechnical Commission）成立于 1906 年，至今已有 90 多年的历史。它是世界上成立最早的国际性电工标准化机构，负责有关电气工程和电子工程领域中的国际标准化工作。\r\n\r\nIEC 的宗旨是，促进电气、电子工程领域中标准化及有关问题的国际合作，增进国际间的相互了解。为实现这一目的，IEC 出版包括国际标准在内的各种出版物，并希望各成员在本国条件允许的情况下，在本国的标准化工作中使用这些标准。\r\n\r\n目前 IEC 的工作领域已由单纯研究电气设备、电机的名词术语和功率等问题扩展到电子、电力、微电子及其应用、通讯、视听、机器人、信息技术、新型医疗器械和核仪表等电工技术的各个方面。IEC 标准的权威性是世界公认的，截止到 2008 年 12 月底，IEC 已制定了 5425 个国际标准。\r\n\r\n不同标准下储存单位的次方单位 ( $2^{10}=1024$ )：\r\n\r\n![字节的次方单位](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/byte-wiki.png)\r\n\r\n## 比特率单位\r\n\r\n在电信和计算领域，比特率（Bit rate）是指单位时间内传输送或处理的比特的数量。比特率经常在电信领域用作连接速度、传输速度、信息传输速率和数字带宽容量的同义词。\r\n\r\n在数字多媒体领域，比特率是单位时间播放连续的媒体如压缩后的音频或视频的比特数量。在这个意义上讲，它相当于术语数字带宽消耗量，或吞吐量。\r\n\r\n比特率规定使用"比特每秒"（bit/s 或 bps）为单位，经常和国际单位制词头关联在一起：\r\n\r\n- bps(bit/s)，即 bit pro second（位每秒）；\r\n\r\n- Kbps(Kbit/s)，即 Kilobit pro second(千位每秒)；\r\n\r\n- Mbps(Mbit/s)，即 Milionbit pro second(百万位每秒)。\r\n\r\n其中，bit 即比特，通常用 b（小写）表示，指一位二进制位，Milionbit=1000Kilobit=1000 000bit，所以 1Mbps=1000 000bps；\r\n\r\n### bps 和 Bps\r\n\r\nbps 是通常用来**衡量带宽**的单位，常见于表示数据机及网络通讯的传输速率，指每秒钟传输的二进制位数。例如 GigabitEthernet 端口。\r\n```\r\n5 minute input rate 38410000 bits/sec, 6344 packets/sec\r\n382410000 bits/sec = 382.41Mbps\r\n```\r\n\r\n通常电脑(软件)上显示的上传下载速度（如下面的阿里云 OSSBrowser、Google Chrome 数据下载速度），则是指每秒种传输的字节数（Byte）通常用 B（大写）表示：MB 即百万字节也称兆字节；KB 即千字节；B 即字节。\r\n\r\n- 1B=8b\r\n\r\n- 1MB=1024KB=1024\\*1024B\r\n\r\n- 1Mbps=1000Kbps=1000/8KBps=125KBps\r\n\r\n我们通常说的 1M 带宽即指 1Mbps，因此 1M 的带宽下载的速度一般不会超过 125KB 每秒。2M、3M 带宽的下载速度分别不会超过 250KB、375KB 每秒。\r\n\r\n![download-byte-rate](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/download-byte-rate.png)\r\n\r\n**数据传输速率的衡量单位 K 是十进制含义，但数据存储的 K 是 2 进制含义。**\r\n\r\n1kbit/s 就是 1000bit/s，而 KB 是 1024 个字节,注意 KB(KByte) 和 kbit 的区别，另外，数据传输速率的单位是 bit/s 记作：bps 。\r\n\r\n在实际应用中：\r\n\r\n- 1kbps=1000bps\r\n\r\n- 1Mbps=1000,000bps\r\n\r\n- 1bps=0.000001bps\r\n\r\n1Mbps 与 1m/s 是有区别的，1m/s 指的是 1024KB/s，而 1Mbps 指的是(1000/8)KB/s 也就是 125KB/S。\r\n\r\n记住 K 和 k 是没区别的 \xa0，区别在于 bps 属于位每秒的单位，而 m/s ,KB/s 这两个属于字节每秒的单位，一字节等于 8 位，即 1k=8b。\r\n\r\n## 兆碱基\r\n\r\n所以，在文章开头提到的 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。其实也就是这么计算来得：\r\n\r\n一个碱基就是一个英文字母，而一个英文字母是 1 个字节（Byte），所以 100 万个碱基就是 1000,000 Byte。按照 SI 国际单位的十进制标准，正好相当于 1 MB，如果按照 IEC 国际电工委员会的二进制标准，应该为：1000,000 / 1024 /1024 ≈ 0.95 MB，则是大致相当于计算机 1 兆的存储空间。\r\n\r\n## 参考资料\r\n\r\n- [Wiki: Gibibyte](https://zh.wikipedia.org/wiki/Gibibyte)，维基百科\r\n- [Wiki：比特率](https://zh.wikipedia.org/wiki/%E6%AF%94%E7%89%B9%E7%8E%87)，维基百科\r\n- 沙翁，《[什么是 Mbps、Kbps、bps、kb、mb 及其换算和区别](https://www.cnblogs.com/shaweng/p/3816985.html)》，博客园\r\n- 大任 Dren，《[bit、Byte、bps、Bps、pps、Gbps 的单位详细说明及换算](https://blog.csdn.net/a9254778/article/details/8513086)》，CSDN-专业 IT 技术社区\r\n', 'bodyText': '生物信息很多文章都提到 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。借着这个问题，我们今天来聊一聊计算机存储和数据传输中 Kb、KB、Bps、bps 的一些区别，分析一下所谓的兆碱基到底是使用哪一种标准（单位）怎么计算出来的。\n\n计算机存储容量单位\nBit (binary digit)：亦称二进制位，指二进制中的一位，是信息的最小单位。位的值只会是 0 或 1。虽然计算机也提供对位的判断和操作，但是计算机指令一般以字节(Byte)为单位。在大多数的计算机系统中，八位是一个字节。一位的值通常以存储电容是否带电来衡量。\nB (Byte)：字节。8 个二进制位构成 1 个"字节(Byte)"，它是电脑存储空间的基本计量单位。1 字节 (Byte)=8(bit) 位，就是有 8 个二进制数组成。1 个英文字符是 1 个字节,也就是 1B；1 个汉字为 2 个字符，也就是 2B。\nGB (Gigabyte)：吉字节，是一种十进制的信息计量单位。Gibibyte（giga binary byte 的缩写）则是二进制信息计量的一个单位，简称 GiB。吉字节（Gigabyte）常容易和二进制的信息计量单位 Gibibyte 混淆。\n\nGibibyte 与 Gigabyte 常常被混淆，前者的计算方式是二进制，后者的计算方式是十进制。现今的计算上，常把 Gigabyte 以二进制的方式计算，即 $2^{30} = 1,073,741,824$ 。(因为 Windows 对 GB 这个信息计量单位的误用，因此在 Windows 中显示的 "1GB"，其实应是指 "1GiB"，但 Windows 却显示为 "1GB"，而常造成误解。误用会普遍化的一大因素，是因为 Windows 的操作系统占有率高)，由于两种换算方法的不同，使容量在计算上相差了 7.3%，所以常有 Windows 系统报告的容量比硬盘标示的容量还要小的情况发生。但在苹果公司的 OS X 操作系统中，对于存储设备的容量计算方式与硬盘厂商一致，均为 1GB = 1,000,000,000 ( $10^{9}$ ) 字节的十进制，避免了计算和使用上的麻烦。\n—— 维基百科 - Gibibyte，https://zh.wikipedia.org/wiki/Gibibyte\n\nK、M、G 都是 KB、MB、GB 的简称。由于混淆已经普遍化，Gigabyte 往往是指 Gibibyte，所以平时我们说的 1 兆存储就是 1M（MB），1G 存储就是 1GB）。我们的照片一般是 104KB、209KB、1.45MB、2.45MB、3.32MB 等等。\n在说明其他储存单位的换算前，我们来看看两个标准：SI、IEC。\n国际单位制（SI）\n国际单位制(简称 SI，来自于法语 Système International d\'Unités)，是世界上最普遍采用的标准度量系统。国际单位制以七个基本单位(米（m），千克（kg），秒（s），安培（A），开尔文（K），摩尔（mol），坎德拉（cd）)为基础，由此建立起一系列相互换算关系明确的"一致单位"。另有二十个基于十进制的词头，当加在单位名称或符号前的时候，可用于表达该单位的倍数或分数。\n国际电工委员会（IEC）\n国际电工委员会（IEC, International Electrotechnical Commission）成立于 1906 年，至今已有 90 多年的历史。它是世界上成立最早的国际性电工标准化机构，负责有关电气工程和电子工程领域中的国际标准化工作。\nIEC 的宗旨是，促进电气、电子工程领域中标准化及有关问题的国际合作，增进国际间的相互了解。为实现这一目的，IEC 出版包括国际标准在内的各种出版物，并希望各成员在本国条件允许的情况下，在本国的标准化工作中使用这些标准。\n目前 IEC 的工作领域已由单纯研究电气设备、电机的名词术语和功率等问题扩展到电子、电力、微电子及其应用、通讯、视听、机器人、信息技术、新型医疗器械和核仪表等电工技术的各个方面。IEC 标准的权威性是世界公认的，截止到 2008 年 12 月底，IEC 已制定了 5425 个国际标准。\n不同标准下储存单位的次方单位 ( $2^{10}=1024$ )：\n\n比特率单位\n在电信和计算领域，比特率（Bit rate）是指单位时间内传输送或处理的比特的数量。比特率经常在电信领域用作连接速度、传输速度、信息传输速率和数字带宽容量的同义词。\n在数字多媒体领域，比特率是单位时间播放连续的媒体如压缩后的音频或视频的比特数量。在这个意义上讲，它相当于术语数字带宽消耗量，或吞吐量。\n比特率规定使用"比特每秒"（bit/s 或 bps）为单位，经常和国际单位制词头关联在一起：\n\n\nbps(bit/s)，即 bit pro second（位每秒）；\n\n\nKbps(Kbit/s)，即 Kilobit pro second(千位每秒)；\n\n\nMbps(Mbit/s)，即 Milionbit pro second(百万位每秒)。\n\n\n其中，bit 即比特，通常用 b（小写）表示，指一位二进制位，Milionbit=1000Kilobit=1000 000bit，所以 1Mbps=1000 000bps；\nbps 和 Bps\nbps 是通常用来衡量带宽的单位，常见于表示数据机及网络通讯的传输速率，指每秒钟传输的二进制位数。例如 GigabitEthernet 端口。\n5 minute input rate 38410000 bits/sec, 6344 packets/sec\n382410000 bits/sec = 382.41Mbps\n\n通常电脑(软件)上显示的上传下载速度（如下面的阿里云 OSSBrowser、Google Chrome 数据下载速度），则是指每秒种传输的字节数（Byte）通常用 B（大写）表示：MB 即百万字节也称兆字节；KB 即千字节；B 即字节。\n\n\n1B=8b\n\n\n1MB=1024KB=1024*1024B\n\n\n1Mbps=1000Kbps=1000/8KBps=125KBps\n\n\n我们通常说的 1M 带宽即指 1Mbps，因此 1M 的带宽下载的速度一般不会超过 125KB 每秒。2M、3M 带宽的下载速度分别不会超过 250KB、375KB 每秒。\n\n数据传输速率的衡量单位 K 是十进制含义，但数据存储的 K 是 2 进制含义。\n1kbit/s 就是 1000bit/s，而 KB 是 1024 个字节,注意 KB(KByte) 和 kbit 的区别，另外，数据传输速率的单位是 bit/s 记作：bps 。\n在实际应用中：\n\n\n1kbps=1000bps\n\n\n1Mbps=1000,000bps\n\n\n1bps=0.000001bps\n\n\n1Mbps 与 1m/s 是有区别的，1m/s 指的是 1024KB/s，而 1Mbps 指的是(1000/8)KB/s 也就是 125KB/S。\n记住 K 和 k 是没区别的 \xa0，区别在于 bps 属于位每秒的单位，而 m/s ,KB/s 这两个属于字节每秒的单位，一字节等于 8 位，即 1k=8b。\n兆碱基\n所以，在文章开头提到的 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。其实也就是这么计算来得：\n一个碱基就是一个英文字母，而一个英文字母是 1 个字节（Byte），所以 100 万个碱基就是 1000,000 Byte。按照 SI 国际单位的十进制标准，正好相当于 1 MB，如果按照 IEC 国际电工委员会的二进制标准，应该为：1000,000 / 1024 /1024 ≈ 0.95 MB，则是大致相当于计算机 1 兆的存储空间。\n参考资料\n\nWiki: Gibibyte，维基百科\nWiki：比特率，维基百科\n沙翁，《什么是 Mbps、Kbps、bps、kb、mb 及其换算和区别》，博客园\n大任 Dren，《bit、Byte、bps、Bps、pps、Gbps 的单位详细说明及换算》，CSDN-专业 IT 技术社区', 'bodyHTML': '<p dir="auto">生物信息很多文章都提到 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。借着这个问题，我们今天来聊一聊计算机存储和数据传输中 Kb、KB、Bps、bps 的一些区别，分析一下所谓的兆碱基到底是使用哪一种标准（单位）怎么计算出来的。</p>\n\n<h2 dir="auto">计算机存储容量单位</h2>\n<p dir="auto">Bit (binary digit)：亦称二进制位，指二进制中的一位，是信息的最小单位。位的值只会是 0 或 1。虽然计算机也提供对位的判断和操作，但是计算机指令一般以字节(Byte)为单位。在大多数的计算机系统中，八位是一个字节。一位的值通常以存储电容是否带电来衡量。</p>\n<p dir="auto">B (Byte)：字节。8 个二进制位构成 1 个"字节(Byte)"，它是电脑存储空间的基本计量单位。1 字节 (Byte)=8(bit) 位，就是有 8 个二进制数组成。1 个英文字符是 1 个字节,也就是 1B；1 个汉字为 2 个字符，也就是 2B。</p>\n<p dir="auto">GB (Gigabyte)：吉字节，是一种<strong>十进制</strong>的信息计量单位。Gibibyte（giga binary byte 的缩写）则是<strong>二进制</strong>信息计量的一个单位，简称 GiB。吉字节（Gigabyte）常容易和二进制的信息计量单位 Gibibyte 混淆。</p>\n<blockquote>\n<p dir="auto">Gibibyte 与 Gigabyte 常常被混淆，前者的计算方式是二进制，后者的计算方式是十进制。现今的计算上，常把 Gigabyte 以二进制的方式计算，即 <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9688c881a33de7ef19474a49ea6a72be">$2^{30} = 1,073,741,824$</math-renderer> 。(因为 Windows 对 GB 这个信息计量单位的误用，因此在 Windows 中显示的 "1GB"，其实应是指 "1GiB"，但 Windows 却显示为 "1GB"，而常造成误解。误用会普遍化的一大因素，是因为 Windows 的操作系统占有率高)，由于两种换算方法的不同，使容量在计算上相差了 7.3%，所以常有 Windows 系统报告的容量比硬盘标示的容量还要小的情况发生。但在苹果公司的 OS X 操作系统中，对于存储设备的容量计算方式与硬盘厂商一致，均为 1GB = 1,000,000,000 ( <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9688c881a33de7ef19474a49ea6a72be">$10^{9}$</math-renderer> ) 字节的十进制，避免了计算和使用上的麻烦。</p>\n<p dir="auto">—— 维基百科 - Gibibyte，<a href="https://zh.wikipedia.org/wiki/Gibibyte" rel="nofollow">https://zh.wikipedia.org/wiki/Gibibyte</a></p>\n</blockquote>\n<p dir="auto">K、M、G 都是 KB、MB、GB 的简称。由于混淆已经普遍化，Gigabyte 往往是指 Gibibyte，所以平时我们说的 1 兆存储就是 1M（MB），1G 存储就是 1GB）。我们的照片一般是 104KB、209KB、1.45MB、2.45MB、3.32MB 等等。</p>\n<p dir="auto">在说明其他储存单位的换算前，我们来看看两个标准：SI、IEC。</p>\n<h3 dir="auto">国际单位制（SI）</h3>\n<p dir="auto">国际单位制(简称 SI，来自于法语 Système International d\'Unités)，是世界上最普遍采用的标准度量系统。国际单位制以七个基本单位(米（m），千克（kg），秒（s），安培（A），开尔文（K），摩尔（mol），坎德拉（cd）)为基础，由此建立起一系列相互换算关系明确的"一致单位"。另有二十个基于十进制的词头，当加在单位名称或符号前的时候，可用于表达该单位的倍数或分数。</p>\n<h3 dir="auto">国际电工委员会（IEC）</h3>\n<p dir="auto">国际电工委员会（IEC, International Electrotechnical Commission）成立于 1906 年，至今已有 90 多年的历史。它是世界上成立最早的国际性电工标准化机构，负责有关电气工程和电子工程领域中的国际标准化工作。</p>\n<p dir="auto">IEC 的宗旨是，促进电气、电子工程领域中标准化及有关问题的国际合作，增进国际间的相互了解。为实现这一目的，IEC 出版包括国际标准在内的各种出版物，并希望各成员在本国条件允许的情况下，在本国的标准化工作中使用这些标准。</p>\n<p dir="auto">目前 IEC 的工作领域已由单纯研究电气设备、电机的名词术语和功率等问题扩展到电子、电力、微电子及其应用、通讯、视听、机器人、信息技术、新型医疗器械和核仪表等电工技术的各个方面。IEC 标准的权威性是世界公认的，截止到 2008 年 12 月底，IEC 已制定了 5425 个国际标准。</p>\n<p dir="auto">不同标准下储存单位的次方单位 ( <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9688c881a33de7ef19474a49ea6a72be">$2^{10}=1024$</math-renderer> )：</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1db13e842e667ec2641f0ad9ebea308aeafa5e47105e4af32c232d39aafdf3ea/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f627974652d77696b692e706e67"><img src="https://camo.githubusercontent.com/1db13e842e667ec2641f0ad9ebea308aeafa5e47105e4af32c232d39aafdf3ea/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f627974652d77696b692e706e67" alt="字节的次方单位" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/byte-wiki.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">比特率单位</h2>\n<p dir="auto">在电信和计算领域，比特率（Bit rate）是指单位时间内传输送或处理的比特的数量。比特率经常在电信领域用作连接速度、传输速度、信息传输速率和数字带宽容量的同义词。</p>\n<p dir="auto">在数字多媒体领域，比特率是单位时间播放连续的媒体如压缩后的音频或视频的比特数量。在这个意义上讲，它相当于术语数字带宽消耗量，或吞吐量。</p>\n<p dir="auto">比特率规定使用"比特每秒"（bit/s 或 bps）为单位，经常和国际单位制词头关联在一起：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">bps(bit/s)，即 bit pro second（位每秒）；</p>\n</li>\n<li>\n<p dir="auto">Kbps(Kbit/s)，即 Kilobit pro second(千位每秒)；</p>\n</li>\n<li>\n<p dir="auto">Mbps(Mbit/s)，即 Milionbit pro second(百万位每秒)。</p>\n</li>\n</ul>\n<p dir="auto">其中，bit 即比特，通常用 b（小写）表示，指一位二进制位，Milionbit=1000Kilobit=1000 000bit，所以 1Mbps=1000 000bps；</p>\n<h3 dir="auto">bps 和 Bps</h3>\n<p dir="auto">bps 是通常用来<strong>衡量带宽</strong>的单位，常见于表示数据机及网络通讯的传输速率，指每秒钟传输的二进制位数。例如 GigabitEthernet 端口。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="5 minute input rate 38410000 bits/sec, 6344 packets/sec\n382410000 bits/sec = 382.41Mbps"><pre class="notranslate"><code class="notranslate">5 minute input rate 38410000 bits/sec, 6344 packets/sec\n382410000 bits/sec = 382.41Mbps\n</code></pre></div>\n<p dir="auto">通常电脑(软件)上显示的上传下载速度（如下面的阿里云 OSSBrowser、Google Chrome 数据下载速度），则是指每秒种传输的字节数（Byte）通常用 B（大写）表示：MB 即百万字节也称兆字节；KB 即千字节；B 即字节。</p>\n<ul dir="auto">\n<li>\n<p dir="auto">1B=8b</p>\n</li>\n<li>\n<p dir="auto">1MB=1024KB=1024*1024B</p>\n</li>\n<li>\n<p dir="auto">1Mbps=1000Kbps=1000/8KBps=125KBps</p>\n</li>\n</ul>\n<p dir="auto">我们通常说的 1M 带宽即指 1Mbps，因此 1M 的带宽下载的速度一般不会超过 125KB 每秒。2M、3M 带宽的下载速度分别不会超过 250KB、375KB 每秒。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ef0a83b04c035350ebcb0adb505c5eabf908d52724bd3944f1bd08d4c1041f5c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f646f776e6c6f61642d627974652d726174652e706e67"><img src="https://camo.githubusercontent.com/ef0a83b04c035350ebcb0adb505c5eabf908d52724bd3944f1bd08d4c1041f5c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f646f776e6c6f61642d627974652d726174652e706e67" alt="download-byte-rate" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/download-byte-rate.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>数据传输速率的衡量单位 K 是十进制含义，但数据存储的 K 是 2 进制含义。</strong></p>\n<p dir="auto">1kbit/s 就是 1000bit/s，而 KB 是 1024 个字节,注意 KB(KByte) 和 kbit 的区别，另外，数据传输速率的单位是 bit/s 记作：bps 。</p>\n<p dir="auto">在实际应用中：</p>\n<ul dir="auto">\n<li>\n<p dir="auto">1kbps=1000bps</p>\n</li>\n<li>\n<p dir="auto">1Mbps=1000,000bps</p>\n</li>\n<li>\n<p dir="auto">1bps=0.000001bps</p>\n</li>\n</ul>\n<p dir="auto">1Mbps 与 1m/s 是有区别的，1m/s 指的是 1024KB/s，而 1Mbps 指的是(1000/8)KB/s 也就是 125KB/S。</p>\n<p dir="auto">记住 K 和 k 是没区别的 \xa0，区别在于 bps 属于位每秒的单位，而 m/s ,KB/s 这两个属于字节每秒的单位，一字节等于 8 位，即 1k=8b。</p>\n<h2 dir="auto">兆碱基</h2>\n<p dir="auto">所以，在文章开头提到的 DNA 序列的 100 万个碱基数据（兆碱基）大致相当于计算机 1 兆的存储空间。其实也就是这么计算来得：</p>\n<p dir="auto">一个碱基就是一个英文字母，而一个英文字母是 1 个字节（Byte），所以 100 万个碱基就是 1000,000 Byte。按照 SI 国际单位的十进制标准，正好相当于 1 MB，如果按照 IEC 国际电工委员会的二进制标准，应该为：1000,000 / 1024 /1024 ≈ 0.95 MB，则是大致相当于计算机 1 兆的存储空间。</p>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li><a href="https://zh.wikipedia.org/wiki/Gibibyte" rel="nofollow">Wiki: Gibibyte</a>，维基百科</li>\n<li><a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E7%89%B9%E7%8E%87" rel="nofollow">Wiki：比特率</a>，维基百科</li>\n<li>沙翁，《<a href="https://www.cnblogs.com/shaweng/p/3816985.html" rel="nofollow">什么是 Mbps、Kbps、bps、kb、mb 及其换算和区别</a>》，博客园</li>\n<li>大任 Dren，《<a href="https://blog.csdn.net/a9254778/article/details/8513086" rel="nofollow">bit、Byte、bps、Bps、pps、Gbps 的单位详细说明及换算</a>》，CSDN-专业 IT 技术社区</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.4-知识'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '沉浸式双语网页翻译扩展', 'number': 19, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/19', 'createdAt': '2023-11-23T01:07:46Z', 'lastEditedAt': None, 'updatedAt': '2024-01-04T05:44:48Z', 'body': '向大家极力推荐这个插件：**沉浸式双语网页翻译扩展**，浏览器翻译神器，而且**完全免费**！\r\n\r\n- **GitHub：** [https://github.com/immersive-translate/immersive-translate](https://github.com/immersive-translate/immersive-translate)\r\n- 如果你是 **Mac** 系统，推荐：[https://github.com/ripperhe/Bob](https://github.com/ripperhe/Bob)\r\n\r\n<!-- more -->\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtAZvqEDdgc3yfpbqwRq40MUEfld.png)\r\n\r\n**截图**\r\n![Twitter 翻译](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpC4e5Sf_G5YT9bzCWSTl4oBIBVO.png "Twitter 翻译")\r\n\r\n![pdf 文件翻译](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpImmIXzUhUNXaD-OgDI1AArm2eu.png "pdf 文件翻译")\r\n\r\n![Reddit 高亮译文样式](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FuFqmDqRNOZl_es2sVoRkmeMDAar.png "Reddit 高亮译文样式")\r\n', 'bodyText': '向大家极力推荐这个插件：沉浸式双语网页翻译扩展，浏览器翻译神器，而且完全免费！\n\nGitHub： https://github.com/immersive-translate/immersive-translate\n如果你是 Mac 系统，推荐：https://github.com/ripperhe/Bob\n\n\n\n截图', 'bodyHTML': '<p dir="auto">向大家极力推荐这个插件：<strong>沉浸式双语网页翻译扩展</strong>，浏览器翻译神器，而且<strong>完全免费</strong>！</p>\n<ul dir="auto">\n<li><strong>GitHub：</strong> <a href="https://github.com/immersive-translate/immersive-translate">https://github.com/immersive-translate/immersive-translate</a></li>\n<li>如果你是 <strong>Mac</strong> 系统，推荐：<a href="https://github.com/ripperhe/Bob">https://github.com/ripperhe/Bob</a></li>\n</ul>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/44de4300bd7b72824e32c4856871ae7e1b41853e2c80f3987c201ff6a634fcdb/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674415a7671454464676333796670627177527134304d5545666c642e706e67"><img src="https://camo.githubusercontent.com/44de4300bd7b72824e32c4856871ae7e1b41853e2c80f3987c201ff6a634fcdb/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674415a7671454464676333796670627177527134304d5545666c642e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtAZvqEDdgc3yfpbqwRq40MUEfld.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>截图</strong><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/200a4d59537b906195e06d4fe63553ea33708092ead18ee89d24761ee27161b2/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46704334653553665f4735595439627a435753546c346f424942564f2e706e67"><img src="https://camo.githubusercontent.com/200a4d59537b906195e06d4fe63553ea33708092ead18ee89d24761ee27161b2/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46704334653553665f4735595439627a435753546c346f424942564f2e706e67" alt="Twitter 翻译" title="Twitter 翻译" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpC4e5Sf_G5YT9bzCWSTl4oBIBVO.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f59821349e6ab4e18d1622984519c3af722a81427e44982bd0246b1ca4df1bd9/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4670496d6d49587a5568554e5861442d4f674449314141726d3265752e706e67"><img src="https://camo.githubusercontent.com/f59821349e6ab4e18d1622984519c3af722a81427e44982bd0246b1ca4df1bd9/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4670496d6d49587a5568554e5861442d4f674449314141726d3265752e706e67" alt="pdf 文件翻译" title="pdf 文件翻译" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpImmIXzUhUNXaD-OgDI1AArm2eu.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e1e25751dd55e5e1e189b6513f529b038f8692f93877dce0c7dd59feef372c92/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467546716d4471524e4f5a6c5f65733273566f526b6d654d444161722e706e67"><img src="https://camo.githubusercontent.com/e1e25751dd55e5e1e189b6513f529b038f8692f93877dce0c7dd59feef372c92/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467546716d4471524e4f5a6c5f65733273566f526b6d654d444161722e706e67" alt="Reddit 高亮译文样式" title="Reddit 高亮译文样式" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FuFqmDqRNOZl_es2sVoRkmeMDAar.png" style="max-width: 100%;"></a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '跨端博客解决方案 Elog 使用', 'number': 18, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/18', 'createdAt': '2023-11-23T01:04:15Z', 'lastEditedAt': None, 'updatedAt': '2024-01-04T05:44:58Z', 'body': 'Elog (<https://github.com/LetTTGACO/elog>) —— 开放式跨平台博客解决方案，随意组合写作平台 (语雀/Notion/FlowUs) 和部署平台 (Hexo/Vitepress 等 。\r\n\r\n<!-- more -->\r\n\r\n主要配置文件 **elog.config.js**：\r\n\r\n```javascript\r\nmodule.exports = {\r\n  write: {\r\n    platform: "yuque",\r\n    yuque: {\r\n      token: process.env.YUQUE_TOKEN,\r\n      baseUrl: "",\r\n      login: process.env.YUQUE_LOGIN,\r\n      repo: process.env.YUQUE_REPO,\r\n      onlyPublic: false,\r\n      onlyPublished: true,\r\n    },\r\n    notion: {\r\n      token: process.env.NOTION_TOKEN,\r\n      databaseId: process.env.NOTION_DATABASE_ID,\r\n      filter: true, // {property: \'status\', select: {equals: \'已发布\'}}\r\n      sorts: true, // [{timestamp: \'created_time\', direction: \'descending\'}],\r\n      catalog: false,\r\n    },\r\n    flowus: {\r\n      tablePageId: process.env.FLOWUS_TABLE_PAGE_ID,\r\n      filter: true, // {property: \'status\',value: \'已发布\'}\r\n      sort: true, // { property: \'createdAt\', direction: \'descending\' }\r\n      catalog: false,\r\n    },\r\n  },\r\n  deploy: {\r\n    platform: "local",\r\n    local: {\r\n      outputDir: "./Cookbook",\r\n      filename: "title", //生成文档的命名格式，取值 urlname|title\r\n      format: "markdown",\r\n      catalog: true, //是否按照目录生成文档\r\n      formatExt: "",\r\n    },\r\n    confluence: {\r\n      user: process.env.CONFLUENCE_USER,\r\n      password: process.env.CONFLUENCE_PASSWORD,\r\n      baseUrl: process.env.CONFLUENCE_BASE_URL,\r\n      spaceKey: process.env.CONFLUENCE_SPACE_KEY,\r\n      rootPageId: process.env.CONFLUENCE_ROOT_PAGE_ID, // 可选\r\n      formatExt: "", // 可选\r\n    },\r\n  },\r\n  image: {\r\n    enable: true,\r\n    platform: "local",\r\n    local: {\r\n      outputDir: "./Images", //本地图片保存目录\r\n      prefixKey: "/cookbook", //替换图片的url前缀，如 ![image.png](/cookbook/xxxx.png)\r\n    },\r\n    oss: {\r\n      secretId: process.env.OSS_SECRET_ID,\r\n      secretKey: process.env.OSS_SECRET_KEY,\r\n      bucket: process.env.OSS_BUCKET,\r\n      region: process.env.OSS_REGION,\r\n      host: process.env.OSS_HOST,\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n    cos: {\r\n      secretId: process.env.COS_SECRET_ID,\r\n      secretKey: process.env.COS_SECRET_KEY,\r\n      bucket: process.env.COS_BUCKET,\r\n      region: process.env.COS_REGION,\r\n      host: process.env.COS_HOST,\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n    qiniu: {\r\n      secretId: process.env.QINIU_SECRET_ID,\r\n      secretKey: process.env.QINIU_SECRET_KEY,\r\n      bucket: process.env.QINIU_BUCKET,\r\n      region: process.env.QINIU_REGION,\r\n      host: process.env.QINIU_HOST,\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n    upyun: {\r\n      user: process.env.UPYUN_USER,\r\n      password: process.env.UPYUN_PASSWORD,\r\n      bucket: process.env.UPYUN_BUCKET,\r\n      host: process.env.UPYUN_HOST,\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n    github: {\r\n      user: process.env.GITHUB_USER,\r\n      token: process.env.GITHUB_TOKEN,\r\n      repo: process.env.GITHUB_REPO,\r\n      branch: "",\r\n      host: "",\r\n      prefixKey: "",\r\n      secretExt: "", // 可选\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n基于语雀 WebHook 实现实时同步：<https://github.com/LetTTGACO/serverless-api>\r\n', 'bodyText': 'Elog (https://github.com/LetTTGACO/elog) —— 开放式跨平台博客解决方案，随意组合写作平台 (语雀/Notion/FlowUs) 和部署平台 (Hexo/Vitepress 等 。\n\n主要配置文件 elog.config.js：\nmodule.exports = {\n  write: {\n    platform: "yuque",\n    yuque: {\n      token: process.env.YUQUE_TOKEN,\n      baseUrl: "",\n      login: process.env.YUQUE_LOGIN,\n      repo: process.env.YUQUE_REPO,\n      onlyPublic: false,\n      onlyPublished: true,\n    },\n    notion: {\n      token: process.env.NOTION_TOKEN,\n      databaseId: process.env.NOTION_DATABASE_ID,\n      filter: true, // {property: \'status\', select: {equals: \'已发布\'}}\n      sorts: true, // [{timestamp: \'created_time\', direction: \'descending\'}],\n      catalog: false,\n    },\n    flowus: {\n      tablePageId: process.env.FLOWUS_TABLE_PAGE_ID,\n      filter: true, // {property: \'status\',value: \'已发布\'}\n      sort: true, // { property: \'createdAt\', direction: \'descending\' }\n      catalog: false,\n    },\n  },\n  deploy: {\n    platform: "local",\n    local: {\n      outputDir: "./Cookbook",\n      filename: "title", //生成文档的命名格式，取值 urlname|title\n      format: "markdown",\n      catalog: true, //是否按照目录生成文档\n      formatExt: "",\n    },\n    confluence: {\n      user: process.env.CONFLUENCE_USER,\n      password: process.env.CONFLUENCE_PASSWORD,\n      baseUrl: process.env.CONFLUENCE_BASE_URL,\n      spaceKey: process.env.CONFLUENCE_SPACE_KEY,\n      rootPageId: process.env.CONFLUENCE_ROOT_PAGE_ID, // 可选\n      formatExt: "", // 可选\n    },\n  },\n  image: {\n    enable: true,\n    platform: "local",\n    local: {\n      outputDir: "./Images", //本地图片保存目录\n      prefixKey: "/cookbook", //替换图片的url前缀，如 ![image.png](/cookbook/xxxx.png)\n    },\n    oss: {\n      secretId: process.env.OSS_SECRET_ID,\n      secretKey: process.env.OSS_SECRET_KEY,\n      bucket: process.env.OSS_BUCKET,\n      region: process.env.OSS_REGION,\n      host: process.env.OSS_HOST,\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n    cos: {\n      secretId: process.env.COS_SECRET_ID,\n      secretKey: process.env.COS_SECRET_KEY,\n      bucket: process.env.COS_BUCKET,\n      region: process.env.COS_REGION,\n      host: process.env.COS_HOST,\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n    qiniu: {\n      secretId: process.env.QINIU_SECRET_ID,\n      secretKey: process.env.QINIU_SECRET_KEY,\n      bucket: process.env.QINIU_BUCKET,\n      region: process.env.QINIU_REGION,\n      host: process.env.QINIU_HOST,\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n    upyun: {\n      user: process.env.UPYUN_USER,\n      password: process.env.UPYUN_PASSWORD,\n      bucket: process.env.UPYUN_BUCKET,\n      host: process.env.UPYUN_HOST,\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n    github: {\n      user: process.env.GITHUB_USER,\n      token: process.env.GITHUB_TOKEN,\n      repo: process.env.GITHUB_REPO,\n      branch: "",\n      host: "",\n      prefixKey: "",\n      secretExt: "", // 可选\n    },\n  },\n};\n基于语雀 WebHook 实现实时同步：https://github.com/LetTTGACO/serverless-api', 'bodyHTML': '<p dir="auto">Elog (<a href="https://github.com/LetTTGACO/elog">https://github.com/LetTTGACO/elog</a>) —— 开放式跨平台博客解决方案，随意组合写作平台 (语雀/Notion/FlowUs) 和部署平台 (Hexo/Vitepress 等 。</p>\n\n<p dir="auto">主要配置文件 <strong>elog.config.js</strong>：</p>\n<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module.exports = {\n  write: {\n    platform: &quot;yuque&quot;,\n    yuque: {\n      token: process.env.YUQUE_TOKEN,\n      baseUrl: &quot;&quot;,\n      login: process.env.YUQUE_LOGIN,\n      repo: process.env.YUQUE_REPO,\n      onlyPublic: false,\n      onlyPublished: true,\n    },\n    notion: {\n      token: process.env.NOTION_TOKEN,\n      databaseId: process.env.NOTION_DATABASE_ID,\n      filter: true, // {property: \'status\', select: {equals: \'已发布\'}}\n      sorts: true, // [{timestamp: \'created_time\', direction: \'descending\'}],\n      catalog: false,\n    },\n    flowus: {\n      tablePageId: process.env.FLOWUS_TABLE_PAGE_ID,\n      filter: true, // {property: \'status\',value: \'已发布\'}\n      sort: true, // { property: \'createdAt\', direction: \'descending\' }\n      catalog: false,\n    },\n  },\n  deploy: {\n    platform: &quot;local&quot;,\n    local: {\n      outputDir: &quot;./Cookbook&quot;,\n      filename: &quot;title&quot;, //生成文档的命名格式，取值 urlname|title\n      format: &quot;markdown&quot;,\n      catalog: true, //是否按照目录生成文档\n      formatExt: &quot;&quot;,\n    },\n    confluence: {\n      user: process.env.CONFLUENCE_USER,\n      password: process.env.CONFLUENCE_PASSWORD,\n      baseUrl: process.env.CONFLUENCE_BASE_URL,\n      spaceKey: process.env.CONFLUENCE_SPACE_KEY,\n      rootPageId: process.env.CONFLUENCE_ROOT_PAGE_ID, // 可选\n      formatExt: &quot;&quot;, // 可选\n    },\n  },\n  image: {\n    enable: true,\n    platform: &quot;local&quot;,\n    local: {\n      outputDir: &quot;./Images&quot;, //本地图片保存目录\n      prefixKey: &quot;/cookbook&quot;, //替换图片的url前缀，如 ![image.png](/cookbook/xxxx.png)\n    },\n    oss: {\n      secretId: process.env.OSS_SECRET_ID,\n      secretKey: process.env.OSS_SECRET_KEY,\n      bucket: process.env.OSS_BUCKET,\n      region: process.env.OSS_REGION,\n      host: process.env.OSS_HOST,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n    cos: {\n      secretId: process.env.COS_SECRET_ID,\n      secretKey: process.env.COS_SECRET_KEY,\n      bucket: process.env.COS_BUCKET,\n      region: process.env.COS_REGION,\n      host: process.env.COS_HOST,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n    qiniu: {\n      secretId: process.env.QINIU_SECRET_ID,\n      secretKey: process.env.QINIU_SECRET_KEY,\n      bucket: process.env.QINIU_BUCKET,\n      region: process.env.QINIU_REGION,\n      host: process.env.QINIU_HOST,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n    upyun: {\n      user: process.env.UPYUN_USER,\n      password: process.env.UPYUN_PASSWORD,\n      bucket: process.env.UPYUN_BUCKET,\n      host: process.env.UPYUN_HOST,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n    github: {\n      user: process.env.GITHUB_USER,\n      token: process.env.GITHUB_TOKEN,\n      repo: process.env.GITHUB_REPO,\n      branch: &quot;&quot;,\n      host: &quot;&quot;,\n      prefixKey: &quot;&quot;,\n      secretExt: &quot;&quot;, // 可选\n    },\n  },\n};"><pre class="notranslate"><span class="pl-smi">module</span><span class="pl-kos">.</span><span class="pl-c1">exports</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>\n  <span class="pl-c1">write</span>: <span class="pl-kos">{</span>\n    <span class="pl-c1">platform</span>: <span class="pl-s">"yuque"</span><span class="pl-kos">,</span>\n    <span class="pl-c1">yuque</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">token</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">YUQUE_TOKEN</span><span class="pl-kos">,</span>\n      <span class="pl-c1">baseUrl</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">login</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">YUQUE_LOGIN</span><span class="pl-kos">,</span>\n      <span class="pl-c1">repo</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">YUQUE_REPO</span><span class="pl-kos">,</span>\n      <span class="pl-c1">onlyPublic</span>: <span class="pl-c1">false</span><span class="pl-kos">,</span>\n      <span class="pl-c1">onlyPublished</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">notion</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">token</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">NOTION_TOKEN</span><span class="pl-kos">,</span>\n      <span class="pl-c1">databaseId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">NOTION_DATABASE_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">filter</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">// {property: \'status\', select: {equals: \'已发布\'}}</span>\n      <span class="pl-c1">sorts</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">// [{timestamp: \'created_time\', direction: \'descending\'}],</span>\n      <span class="pl-c1">catalog</span>: <span class="pl-c1">false</span><span class="pl-kos">,</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">flowus</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">tablePageId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">FLOWUS_TABLE_PAGE_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">filter</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">// {property: \'status\',value: \'已发布\'}</span>\n      <span class="pl-c1">sort</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">// { property: \'createdAt\', direction: \'descending\' }</span>\n      <span class="pl-c1">catalog</span>: <span class="pl-c1">false</span><span class="pl-kos">,</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-c1">deploy</span>: <span class="pl-kos">{</span>\n    <span class="pl-c1">platform</span>: <span class="pl-s">"local"</span><span class="pl-kos">,</span>\n    <span class="pl-c1">local</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">outputDir</span>: <span class="pl-s">"./Cookbook"</span><span class="pl-kos">,</span>\n      <span class="pl-c1">filename</span>: <span class="pl-s">"title"</span><span class="pl-kos">,</span> <span class="pl-c">//生成文档的命名格式，取值 urlname|title</span>\n      <span class="pl-c1">format</span>: <span class="pl-s">"markdown"</span><span class="pl-kos">,</span>\n      <span class="pl-c1">catalog</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span> <span class="pl-c">//是否按照目录生成文档</span>\n      <span class="pl-c1">formatExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">confluence</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">user</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_USER</span><span class="pl-kos">,</span>\n      <span class="pl-c1">password</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_PASSWORD</span><span class="pl-kos">,</span>\n      <span class="pl-c1">baseUrl</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_BASE_URL</span><span class="pl-kos">,</span>\n      <span class="pl-c1">spaceKey</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_SPACE_KEY</span><span class="pl-kos">,</span>\n      <span class="pl-c1">rootPageId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">CONFLUENCE_ROOT_PAGE_ID</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n      <span class="pl-c1">formatExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-c1">image</span>: <span class="pl-kos">{</span>\n    <span class="pl-c1">enable</span>: <span class="pl-c1">true</span><span class="pl-kos">,</span>\n    <span class="pl-c1">platform</span>: <span class="pl-s">"local"</span><span class="pl-kos">,</span>\n    <span class="pl-c1">local</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">outputDir</span>: <span class="pl-s">"./Images"</span><span class="pl-kos">,</span> <span class="pl-c">//本地图片保存目录</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">"/cookbook"</span><span class="pl-kos">,</span> <span class="pl-c">//替换图片的url前缀，如 ![image.png](/cookbook/xxxx.png)</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">oss</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">secretId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_SECRET_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretKey</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_SECRET_KEY</span><span class="pl-kos">,</span>\n      <span class="pl-c1">bucket</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_BUCKET</span><span class="pl-kos">,</span>\n      <span class="pl-c1">region</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_REGION</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">OSS_HOST</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">cos</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">secretId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_SECRET_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretKey</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_SECRET_KEY</span><span class="pl-kos">,</span>\n      <span class="pl-c1">bucket</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_BUCKET</span><span class="pl-kos">,</span>\n      <span class="pl-c1">region</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_REGION</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">COS_HOST</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">qiniu</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">secretId</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_SECRET_ID</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretKey</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_SECRET_KEY</span><span class="pl-kos">,</span>\n      <span class="pl-c1">bucket</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_BUCKET</span><span class="pl-kos">,</span>\n      <span class="pl-c1">region</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_REGION</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">QINIU_HOST</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">upyun</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">user</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">UPYUN_USER</span><span class="pl-kos">,</span>\n      <span class="pl-c1">password</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">UPYUN_PASSWORD</span><span class="pl-kos">,</span>\n      <span class="pl-c1">bucket</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">UPYUN_BUCKET</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">UPYUN_HOST</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n    <span class="pl-c1">github</span>: <span class="pl-kos">{</span>\n      <span class="pl-c1">user</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">GITHUB_USER</span><span class="pl-kos">,</span>\n      <span class="pl-c1">token</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">GITHUB_TOKEN</span><span class="pl-kos">,</span>\n      <span class="pl-c1">repo</span>: <span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">GITHUB_REPO</span><span class="pl-kos">,</span>\n      <span class="pl-c1">branch</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">host</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">prefixKey</span>: <span class="pl-s">""</span><span class="pl-kos">,</span>\n      <span class="pl-c1">secretExt</span>: <span class="pl-s">""</span><span class="pl-kos">,</span> <span class="pl-c">// 可选</span>\n    <span class="pl-kos">}</span><span class="pl-kos">,</span>\n  <span class="pl-kos">}</span><span class="pl-kos">,</span>\n<span class="pl-kos">}</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">基于语雀 WebHook 实现实时同步：<a href="https://github.com/LetTTGACO/serverless-api">https://github.com/LetTTGACO/serverless-api</a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'NCBI API 使用', 'number': 17, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/17', 'createdAt': '2023-11-21T06:44:23Z', 'lastEditedAt': None, 'updatedAt': '2023-11-21T06:44:24Z', 'body': '参考：https://www.ncbi.nlm.nih.gov/books/NBK25499/', 'bodyText': '参考：https://www.ncbi.nlm.nih.gov/books/NBK25499/', 'bodyHTML': '<p dir="auto">参考：<a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/" rel="nofollow">https://www.ncbi.nlm.nih.gov/books/NBK25499/</a></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.1-生信'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '留言与建议', 'number': 16, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/16', 'createdAt': '2023-11-09T07:42:48Z', 'lastEditedAt': '2023-12-19T01:24:34Z', 'updatedAt': '2024-02-24T08:13:25Z', 'body': '如果你通过本人的博文/平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西。你可以通过邮箱、微信，或者移步到 “[GitHub Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions/16)” 写下您的建议，或者向我提问。\r\n\r\n感谢你的一路支持！\r\n\r\n\r\n📢 如果给我发邮件，或者通过微信添加好友，请写上您的**真名实姓**，让我感受到一个**真实的人的气息**。我不太愿意跟**网名**打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。\r\n\r\n- 微信：**ishenweiyan**（请备注真实姓名，谢谢）\r\n- 邮箱：**weiyanshum@foxmail.com**\r\n\r\n<p align="center">\r\n    <img src="https://shub.weiyan.tech/mkdocs/feedback.gif" alt="feedback">\r\n</p>', 'bodyText': '如果你通过本人的博文/平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西。你可以通过邮箱、微信，或者移步到 “GitHub Discussions” 写下您的建议，或者向我提问。\n感谢你的一路支持！\n📢 如果给我发邮件，或者通过微信添加好友，请写上您的真名实姓，让我感受到一个真实的人的气息。我不太愿意跟网名打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。\n\n微信：ishenweiyan（请备注真实姓名，谢谢）\n邮箱：weiyanshum@foxmail.com', 'bodyHTML': '<p dir="auto">如果你通过本人的博文/平台学到了一点东西，那么对我最好的奖赏就是请你也尝试教我些东西。你可以通过邮箱、微信，或者移步到 “<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/16" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Knowledge-Garden/discussions/16/hovercard">GitHub Discussions</a>” 写下您的建议，或者向我提问。</p>\n<p dir="auto">感谢你的一路支持！</p>\n<p dir="auto">📢 如果给我发邮件，或者通过微信添加好友，请写上您的<strong>真名实姓</strong>，让我感受到一个<strong>真实的人的气息</strong>。我不太愿意跟<strong>网名</strong>打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。</p>\n<ul dir="auto">\n<li>微信：<strong>ishenweiyan</strong>（请备注真实姓名，谢谢）</li>\n<li>邮箱：<strong><a href="mailto:weiyanshum@foxmail.com">weiyanshum@foxmail.com</a></strong></li>\n</ul>\n<p align="center" dir="auto">\n    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/63364710aa476c48dced2defb2028b0c684221b1fcf36495d3f815162b094c7f/68747470733a2f2f736875622e77656979616e2e746563682f6d6b646f63732f666565646261636b2e676966"><img src="https://camo.githubusercontent.com/63364710aa476c48dced2defb2028b0c684221b1fcf36495d3f815162b094c7f/68747470733a2f2f736875622e77656979616e2e746563682f6d6b646f63732f666565646261636b2e676966" alt="feedback" data-animated-image="" data-canonical-src="https://shub.weiyan.tech/mkdocs/feedback.gif" style="max-width: 100%;"></a>\n</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '3.x-留言'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '想了一下，还是增加一个留言的页面吧 >.<', 'author': {'login': 'shenweiyan'}}, {'body': '貌似你有一个 .com 的备案域名掉了 。', 'author': {'login': 'lshcool'}}]}}, {'title': '基于 GitHub Discussions 的博客与站点', 'number': 15, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/15', 'createdAt': '2023-11-09T05:38:01Z', 'lastEditedAt': '2023-11-23T07:06:53Z', 'updatedAt': '2024-01-04T05:44:37Z', 'body': 'GitHub Discussions 是一个可以在每个 GitHub 仓库上启用的论坛。它使开发者能够轻松地讨论新功能，从社区获得反馈，创建投票，发布公告等。这里搜集了一些基于 GitHub Discussions 的博客与站点，以供参考。\r\n\r\n<!-- more -->\r\n\r\n- [Hakuba](https://github.com/YeungKC/Hakuba) - 一个通过 Github Discussion 驱动的 Blog 启动器\r\n\r\n- [GG](https://github.com/lencx/gg) - Gatsby + GitHub，好像不支持 MathJax，也不见怎么维护了\r\n    - [lencx.tech](https://lencx.tech/#/)\r\n    - [gg-discussions](https://shenweiyan.github.io/gg-discussions/)，个人尝试对页面进行了一些调整\r\n\r\n- [Pure](https://github.com/LeetaoGoooo/pure) 一个基于 Github Discussion 的极简博客', 'bodyText': 'GitHub Discussions 是一个可以在每个 GitHub 仓库上启用的论坛。它使开发者能够轻松地讨论新功能，从社区获得反馈，创建投票，发布公告等。这里搜集了一些基于 GitHub Discussions 的博客与站点，以供参考。\n\n\n\nHakuba - 一个通过 Github Discussion 驱动的 Blog 启动器\n\n\nGG - Gatsby + GitHub，好像不支持 MathJax，也不见怎么维护了\n\nlencx.tech\ngg-discussions，个人尝试对页面进行了一些调整\n\n\n\nPure 一个基于 Github Discussion 的极简博客', 'bodyHTML': '<p dir="auto">GitHub Discussions 是一个可以在每个 GitHub 仓库上启用的论坛。它使开发者能够轻松地讨论新功能，从社区获得反馈，创建投票，发布公告等。这里搜集了一些基于 GitHub Discussions 的博客与站点，以供参考。</p>\n\n<ul dir="auto">\n<li>\n<p dir="auto"><a href="https://github.com/YeungKC/Hakuba">Hakuba</a> - 一个通过 Github Discussion 驱动的 Blog 启动器</p>\n</li>\n<li>\n<p dir="auto"><a href="https://github.com/lencx/gg">GG</a> - Gatsby + GitHub，好像不支持 MathJax，也不见怎么维护了</p>\n<ul dir="auto">\n<li><a href="https://lencx.tech/#/" rel="nofollow">lencx.tech</a></li>\n<li><a href="https://shenweiyan.github.io/gg-discussions/" rel="nofollow">gg-discussions</a>，个人尝试对页面进行了一些调整</li>\n</ul>\n</li>\n<li>\n<p dir="auto"><a href="https://github.com/LeetaoGoooo/pure">Pure</a> 一个基于 Github Discussion 的极简博客</p>\n</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '基于 Mkdocs 的主题与站点', 'number': 14, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/14', 'createdAt': '2023-11-08T03:29:49Z', 'lastEditedAt': '2024-04-10T01:30:13Z', 'updatedAt': '2024-04-10T01:30:13Z', 'body': "鉴于 MkDocs 的诸多优点，让它被很多知名开源项目选中，用于搭建和项目相关的文档网站。比如 Python 里知名的 Web 圈里的 [django-rest-framework](https://sspai.com/link?target=https%3A%2F%2Fwww.django-rest-framework.org%2F)、[FastAPI](https://sspai.com/link?target=https%3A%2F%2Ffastapi.tiangolo.com%2F) 以及基于 Go 编写的云网关代理服务器 [traefik](https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ftraefik%2Ftraefik) 等项目的官方文档站点，都是通过 MkDocs 进行搭建。\r\n\r\n<!-- more -->\r\n\r\n下面列的是搜集的一些 Mkdocs 主题与站点，以供参考。\r\n\r\n- Hello 算法 - <https://www.hello-algo.com/>\r\n- FDU-MSC 论坛 - <https://fdu-msc.github.io/forum/>\r\n- Django REST framework - <https://www.django-rest-framework.org/>\r\n- FastAPI - <https://fastapi.tiangolo.com/>\r\n- Chrisjing 的运维之旅精选 - <http://www.chrisjing.com/>\r\n- 艇仔粥 TingZaiZuk - <https://herointene.github.io/>\r\n- Arisa | Blog - <https://blog.arisa.moe/>\r\n- 嬉戏实验室 - <https://blog.xiiigame.com/>\r\n- 老胡的周刊 - [weekly.howie6879.com](https://weekly.howie6879.com/)\r\n- Wcowin's Web - <https://wcowin.work/>\r\n- Jeremy Feng - <https://fengchao.pro/>", 'bodyText': "鉴于 MkDocs 的诸多优点，让它被很多知名开源项目选中，用于搭建和项目相关的文档网站。比如 Python 里知名的 Web 圈里的 django-rest-framework、FastAPI 以及基于 Go 编写的云网关代理服务器 traefik 等项目的官方文档站点，都是通过 MkDocs 进行搭建。\n\n下面列的是搜集的一些 Mkdocs 主题与站点，以供参考。\n\nHello 算法 - https://www.hello-algo.com/\nFDU-MSC 论坛 - https://fdu-msc.github.io/forum/\nDjango REST framework - https://www.django-rest-framework.org/\nFastAPI - https://fastapi.tiangolo.com/\nChrisjing 的运维之旅精选 - http://www.chrisjing.com/\n艇仔粥 TingZaiZuk - https://herointene.github.io/\nArisa | Blog - https://blog.arisa.moe/\n嬉戏实验室 - https://blog.xiiigame.com/\n老胡的周刊 - weekly.howie6879.com\nWcowin's Web - https://wcowin.work/\nJeremy Feng - https://fengchao.pro/", 'bodyHTML': '<p dir="auto">鉴于 MkDocs 的诸多优点，让它被很多知名开源项目选中，用于搭建和项目相关的文档网站。比如 Python 里知名的 Web 圈里的 <a href="https://sspai.com/link?target=https%3A%2F%2Fwww.django-rest-framework.org%2F" rel="nofollow">django-rest-framework</a>、<a href="https://sspai.com/link?target=https%3A%2F%2Ffastapi.tiangolo.com%2F" rel="nofollow">FastAPI</a> 以及基于 Go 编写的云网关代理服务器 <a href="https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ftraefik%2Ftraefik" rel="nofollow">traefik</a> 等项目的官方文档站点，都是通过 MkDocs 进行搭建。</p>\n\n<p dir="auto">下面列的是搜集的一些 Mkdocs 主题与站点，以供参考。</p>\n<ul dir="auto">\n<li>Hello 算法 - <a href="https://www.hello-algo.com/" rel="nofollow">https://www.hello-algo.com/</a></li>\n<li>FDU-MSC 论坛 - <a href="https://fdu-msc.github.io/forum/" rel="nofollow">https://fdu-msc.github.io/forum/</a></li>\n<li>Django REST framework - <a href="https://www.django-rest-framework.org/" rel="nofollow">https://www.django-rest-framework.org/</a></li>\n<li>FastAPI - <a href="https://fastapi.tiangolo.com/" rel="nofollow">https://fastapi.tiangolo.com/</a></li>\n<li>Chrisjing 的运维之旅精选 - <a href="http://www.chrisjing.com/" rel="nofollow">http://www.chrisjing.com/</a></li>\n<li>艇仔粥 TingZaiZuk - <a href="https://herointene.github.io/" rel="nofollow">https://herointene.github.io/</a></li>\n<li>Arisa | Blog - <a href="https://blog.arisa.moe/" rel="nofollow">https://blog.arisa.moe/</a></li>\n<li>嬉戏实验室 - <a href="https://blog.xiiigame.com/" rel="nofollow">https://blog.xiiigame.com/</a></li>\n<li>老胡的周刊 - <a href="https://weekly.howie6879.com/" rel="nofollow">weekly.howie6879.com</a></li>\n<li>Wcowin\'s Web - <a href="https://wcowin.work/" rel="nofollow">https://wcowin.work/</a></li>\n<li>Jeremy Feng - <a href="https://fengchao.pro/" rel="nofollow">https://fengchao.pro/</a></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': [{'name': 'mkdocs'}]}, 'comments': {'nodes': []}}, {'title': 'Python3 源码安装', 'number': 13, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/13', 'createdAt': '2023-11-02T03:05:46Z', 'lastEditedAt': '2023-11-04T01:04:27Z', 'updatedAt': '2024-01-03T07:58:31Z', 'body': '编程，作为生物信息学的一个基础性技能，是任何一个生信工程师都无法绕开话题。也许有些人还在纠结 Perl 和 Python 到底应该学习哪一个，但作为目前最火最流行的编程语言 Python 还是非常值得尝试的。它不但可以进行文本处理，在统计、网站、游戏、爬虫、数据可视化等方面也有非常强大的应用，比起曾经的 Perl 真的强大和全面很多，且比 Perl 更容易入手。不管从长远发展，还是短期需要，学会 Python，看懂 Perl (或者先学 \xa0 Python，后学 Perl) 应该是每一个生信工程必备的基础技能之一。\r\n\r\n工欲善其事，必先利其器。关于 Python 安装教程在网上一搜一大把，但总感觉不够全面，尤其对于中间出现的一些问题的解决方法不尽如人意。鉴于此，本文基于 \xa0CentOS/RHEL Linux 对 Python 的源码编译安装进行了一下简单的总结，记录如下。\r\n\r\n## 安装环境\r\n\r\nRed Hat 6.5 + GCC 4.4.7（GCC-7.3.0 - 此版本 gcc 为手动安装）。\r\n\r\nGCC 高级版本手动或者 `yum` 安装参考以下文章：\r\n- [SCL+Devtoolset 安装与使用笔记 · 语雀](https://www.yuque.com/shenweiyan/cookbook/scl-devtoolset-note)\r\n- [非 root 用户手动编译安装 GCC · 语雀](https://www.yuque.com/shenweiyan/cookbook/linux-gcc-install)\r\n\r\n```bash\r\n$ lsb_release -a\r\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\r\nDistributor ID: RedHatEnterpriseServer\r\nDescription:    Red Hat Enterprise Linux Server release 6.5 (Santiago)\r\nRelease:        6.5\r\nCodename:       Santiago\r\n\r\n$ gcc --version\r\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\r\nCopyright (C) 2010 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\n## 解决依赖\r\n\r\n如果您拥有 root 权限，请执以下依赖安装：\r\n\r\n```bash\r\nyum install zlib\r\nyum install zlib-devel\r\nyum install openssl\r\nyum install openssl-devel\r\nyum install libffi\r\nyum install libffi-devel\r\nyum install readline readline-devel sqlite sqlite-devel tk-devel\r\n```\r\n\r\n| 缺少库名称 | 安装命令                                              |\r\n| ---------- | ----------------------------------------------------- |\r\n| \\_uuid     | yum install libuuid-devel                             |\r\n| readline   | yum install readline-devel                            |\r\n| \\_tkinter  | yum install tk-devel                                  |\r\n| \\_ffi      | yum install libffi-devel                              |\r\n| \\_curses   | yum install ncurses-libs                              |\r\n| \\_sqlite   | yum install sqlite-devel                              |\r\n| \\_bz2      | yum isntall bzip2-devel                               |\r\n| \\_ssl      | yum install openssl-devel                             |\r\n| \\_gdbm     | yum install gdbm-devel                                |\r\n| \\_dbi      | yum install libdbi-devel                              |\r\n| \\_zlib     | yum install zlib-devel                                |\r\n| lzma       | yum install xz-develyum install python-backports-lzma |\r\n\r\n如果您没有 root 权限，可以参考《[手把手教你在 Linux 源码安装最新版本的 R](https://www.yuque.com/shenweiyan/cookbook/install-latest-r-from-source)》一文，手动一个个去解决以上的依赖。\r\n\r\n### _sqlite3 \r\n\r\n执行 **make** 过程中提示 **_sqlite3 not found**，如下：\r\n\r\n```bash\r\n$ make\r\n......\r\nPython build finished successfully!\r\nThe necessary bits to build these optional modules were not found:\r\n_sqlite3              _ssl\r\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\r\n\r\nThe following modules found by detect_modules() in setup.py, have been\r\nbuilt by the Makefile instead, as configured by the Setup files:\r\n_abc                  atexit                pwd\r\ntime\r\n```\r\n\r\n### 系统已安装 sqlite3\r\n\r\n如果执行 **rpm -qa|grep sqlite** 看到 sqlite 和 sqlite-devel 都已经安装（libsqlite3.so 默认保存在 /usr/lib64 下； `sqlite3.h` 默认保存在 `/usr/include` 下）。\r\n\r\n```bash\r\n$ sqlite3 -version\r\n3.6.20\r\n\r\n$ ll /usr/lib64/libsqlite3.so\r\nlrwxrwxrwx 1 root root 19 Apr 23  2015 /usr/lib64/libsqlite3.so -> libsqlite3.so.0.8.6\r\n\r\n$ ll /usr/include/sqlite3.h\r\n-rw-r--r-- 1 root root 263K Nov 25  2009 /usr/include/sqlite3.h\r\n```\r\n\r\n但是，执行 `make` 依然出现以上报错，参考下面的方法《[python build from source: cannot build optional module sqlite3 - Stack Overflow](https://stackoverflow.com/questions/32779768/python-build-from-source-cannot-build-optional-module-sqlite3)》。\r\n\r\n### 手动安装 sqlite3\r\n\r\n```bash\r\n$ wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz --no-check-certificate\r\n$ tar zvxf sqlite-autoconf-3360000.tar.gz\r\n$ cd sqlite-autoconf-3360000\r\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0\r\n$ make\r\n$ make install\r\n```\r\n\r\n### 配置 sqlite3\r\n\r\n#### 1. 配置环境\r\n\r\n```bash\r\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\r\n```\r\n#### 2. 调整源码或编译\r\n\r\n对于 3.11.x 以上版本的 Python 可以在 `configure` 指定自定义安装的 sqlite3 路径解决 `_sqlite3` 依赖。\r\n```\r\n./configure ... \\\r\n    LDFLAGS="-L/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib" \\\r\n    CPPFLAGS="-I/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include" \r\n```\r\n\r\n有些低版本的 Python (如 3.7) 可能需要再源码文件中加入 `sqlite3.h` 的文件路径。\r\n\r\n1. 找到 **sqlite3.h** 文件的保存目录。\r\n2. 修改 **setup.py** 文件，在 sqlite_inc_paths 中加上 sqlite3.h 的文件路径。\r\n\r\n```bash\r\nsqlite_inc_paths = [ \'/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include\',\r\n                     \'/usr/include\',\r\n                     \'/usr/include/sqlite\',\r\n                     \'/usr/include/sqlite3\',\r\n                     \'/usr/local/include\',\r\n                     \'/usr/local/include/sqlite\',\r\n                     \'/usr/local/include/sqlite3\',\r\n                   ]\r\n```\r\n\r\n\r\n### _ssl \r\n\r\nPython3 需要引用 `openssl`\xa0 模块，但是 python3.7+ 在 CentOS 中要求的 openssl 版本最低为 1.0.2，而 CentOS 默认的为 1.0.1（CentOS-6.x 通过 `yum`\xa0 源安装的 openssl 的最高版本是 1.0.1），所以需要手动更新 openssl。\r\n\r\n对于 openssl 版本的选择，建议至少选择 1.1.1+ 版本：\r\n\r\n1. urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: https://github.com/urllib3/urllib3/issues/2168\r\n2. **Python requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().**\r\n\r\n```bash\r\n# 下载\r\nwget http://www.openssl.org/source/openssl-1.1.1.tar.gz\r\n\r\n# 解压缩\r\ntar -zxvf openssl-1.1.1.tar.gz\r\n\r\n# 进入目录安装\r\ncd openssl-1.1.1\r\n\r\n# 进行配置下，自定义\r\n./config --prefix=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 shared zlib\r\n\r\n# 编译并安装\r\nmake && make install\r\n\r\n# 配置到用户环境变量，随处使用\r\necho "export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib:$LD_LIBRARY_PATH" >> $HOME/.bashrc\r\n\r\n# 是环境变量配置生效\r\nsource $HOME/.bashrc\r\n```\r\n\r\n**请注意：**\r\n\r\n1. **openssl**\xa0编译（config）的时候 **必须要加上 shared\xa0 参数**，否者源码安装 Python 即使添加了 `--with-openssl`\xa0的自定义路径，依然会导致 `Could not build the ssl module!`\xa0报错！\r\n2. 从 <https://www.openssl.org/source/>\xa0下载的源码 openssl-1.0.2s、openssl-1.0.2m，包括 \xa0CentOS-7.5 使用 `yum`\xa0安装的最高版本的 openssl-1.0.2k 目前发现依然会导致 `Could not build the ssl module`\xa0，建议从 <https://www.openssl.org/source/old/>\xa0下载 1.1.1 的源码编译安装。\r\n\r\n最后，在 Python 执行 `configure` 的时候指定 openssl 的相关参数：\r\n```\r\n./configure ... \\\r\n    --with-openssl=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 \\\r\n    --with-openssl-rpath=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib \\\r\n```\r\n\r\n## _tkinter\r\n\r\nTkinter 模块缺失是一个比较棘手的问题，为此专门写了一篇文章来介绍这个问题。\r\n\r\n具体请参考：[Python 中 tkinter 源码安装使用与中文乱码 - Knowledge-Garden#12](https://github.com/shenweiyan/Knowledge-Garden/discussions/12)\r\n\r\n### _dbm\r\n\r\n`_dbm` 和 `_gdbm` 的模块缺失可以通过下面手动的方法解决。\r\n\r\n```\r\nwget https://ftp.gnu.org/gnu/gdbm/gdbm-1.23.tar.gz\r\ntar -zxvf gdbm-1.23.tar.gz\r\n./configure --prefix=/Bioinfo/Pipeline/SoftWare/gdbm-1.23 --enable-libgdbm-compat  --enable-debug\r\nmake && make install\r\n```\r\n\r\n最后，增加环境变量，并调整 Python 执行 `configure` 时的参数：\r\n```\r\nexport PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/bin:$PATH\r\nexport LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib:$LD_LIBRARY_PATH\r\n\r\n./configure ... \\\r\n    LDFLAGS="-L/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib" \\\r\n    CPPFLAGS="-I/Bioinfo/Pipeline/SoftWare/gdbm-1.23/include"\r\n```\r\n\r\n### _lzma \r\n\r\n正常情况下，下面的方法可以解决该问题（如果您有 root 权限的话）。\r\n\r\n```bash\r\n# For ubuntu:\r\n$ sudo apt-get install liblzma-dev\r\n\r\n# For centos:\r\n$ yum install xz-devel\r\n```\r\n\r\n普通用户可以手动安装解决：\r\n\r\n```bash\r\n$ wget https://tukaani.org/xz/xz-5.2.5.tar.gz --no-check-certificat\r\n$ tar zvxf xz-5.2.5.tar.gz\r\n$ cd xz-5.2.5\r\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/xz-5.2.5\r\n$ make\r\n$ make install\r\n```\r\n\r\n最后，配置环境：\r\n\r\n```bash\r\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/xz-5.2.5/lib:$LD_LIBRARY_PATH\r\n```\r\n\r\n### _ctypes \r\n\r\n在 CentOS 6.x 安装 `libffi-devel`\xa0 的时候出现以下问题：\r\n\r\n```bash\r\n$ yum install libffi-devel\r\nLoaded plugins: product-id, refresh-packagekit, search-disabled-repos, security, subscription-manager\r\nThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.\r\nSetting up Install Process\r\ncdrom                                                                                                                                         | 4.1 kB     00:00 ...\r\nNo package libffi-devel available.\r\nError: Nothing to do\r\n```\r\n\r\n可以使用下面的方法安装：\r\n```shell\r\n[root@log01 ~]# rpm -ivh http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\r\nRetrieving http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\r\nwarning: /var/tmp/rpm-tmp.V9ihbu: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY\r\nPreparing...                ########################################### [100%]\r\n   1:libffi-devel           ########################################### [100%]\r\n[root@log01 ~]# rpm -qa|grep libffi\r\nlibffi-3.0.5-3.2.el6.x86_64\r\nlibffi-devel-3.0.5-3.2.el6.x86_64\r\n```\r\n\r\n手动的源码方法安装如下：\r\n```bash\r\n$ wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\r\n$ tar zvxf libffi-3.2.1.tar.gz\r\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1\r\n$ make\r\n$ make install\r\n```\r\n\r\n###  pygraphviz\r\n\r\n如果你不需要使用 pygraphviz，可以不用管这个依赖。\r\n\r\n> PyGraphviz is a Python interface to the Graphviz graph layout and visualization package. With PyGraphviz you can create, edit, read, write, and draw graphs using Python to access the Graphviz graph data structure and layout algorithms.\r\n\r\n> PyGraphviz 是 Graphviz 图形布局和可视化包的 Python 接口。 借助 PyGraphviz，您可以使用 Python 创建、编辑、读取、写入和绘制图形，以访问 Graphviz 图形数据结构和布局算法。\r\n\r\n```bash\r\n$ /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/pip3 install pygraphviz\r\nCollecting pygraphviz\r\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\r\nInstalling collected packages: pygraphviz\r\n  Running setup.py install for pygraphviz ... error\r\n    Complete output from command /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile:\r\n    running install\r\n    Trying dpkg\r\n    Failed to find dpkg\r\n    Trying pkg-config\r\n    Package libcgraph was not found in the pkg-config search path.\r\n    Perhaps you should add the directory containing `libcgraph.pc\'\r\n    to the PKG_CONFIG_PATH environment variable\r\n    No package \'libcgraph\' found\r\n    Traceback (most recent call last):\r\n      File "<string>", line 1, in <module>\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py", line 93, in <module>\r\n        tests_require=[\'nose>=1.3.7\', \'doctest-ignore-unicode>=0.1.2\', \'mock>=2.0.0\'],\r\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/site-packages/setuptools/__init__.py", line 145, in setup\r\n        return distutils.core.setup(**attrs)\r\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/core.py", line 148, in setup\r\n        dist.run_commands()\r\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/dist.py", line 966, in run_commands\r\n        self.run_command(cmd)\r\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/dist.py", line 985, in run_command\r\n        cmd_obj.run()\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_commands.py", line 44, in modified_run\r\n        self.include_path, self.library_path = get_graphviz_dirs()\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 162, in get_graphviz_dirs\r\n        include_dirs, library_dirs = _try_configure(include_dirs, library_dirs, _pkg_config)\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 117, in _try_configure\r\n        i, l = try_function()\r\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 72, in _pkg_config\r\n        output = S.check_output([\'pkg-config\', \'--libs-only-L\', \'libcgraph\'])\r\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/subprocess.py", line 395, in check_output\r\n        **kwargs).stdout\r\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/subprocess.py", line 487, in run\r\n        output=stdout, stderr=stderr)\r\n    subprocess.CalledProcessError: Command \'[\'pkg-config\', \'--libs-only-L\', \'libcgraph\']\' returned non-zero exit status 1.\r\n\r\n    ----------------------------------------\r\nCommand "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /tmp/pip-install-_zdjdg0j/pygraphviz/\r\n\r\n```\r\n\r\n参考：《[Installation:fatal error: \'graphviz/cgraph.h\' file not found](https://github.com/pygraphviz/pygraphviz/issues/11)》\r\n\r\n```bash\r\n$ wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz\r\n$ tar zvxf graphviz.tar.gz\r\n$ cd graphviz-2.40.1\r\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1\r\n$ make && make install\r\n```\r\n\r\n推荐把安装好的 graphviz 添加到环境变量，这样可以避免运行过程中出现：**"pygraphviz/graphviz_wrap.c:2987:29: fatal error: graphviz/cgraph.h: No such file or directory"** 无法找到头文件的异常。\r\n\r\n```bash\r\nexport PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\r\nexport LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\r\nexport C_INCLUDE_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include:$C_INCLUDE_PATH\r\nexport CPLUS_INCLUDE_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include:$CPLUS_INCLUDE_PATH\r\n```\r\n\r\n如果 graphviz 添加到环境变量， `pygraphviz`\xa0的 python 包可以参考下面的方法安装：\r\n\r\n```bash\r\n$ /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/pip3 install --global-option=build_ext --global-option="-I/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include" --global-option="-L/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib" pygraphviz\r\n/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/site-packages/pip/_internal/commands/install.py:207: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\r\n  cmdoptions.check_install_build_global(options)\r\nCollecting pygraphviz\r\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\r\nInstalling collected packages: pygraphviz\r\n  Running setup.py install for pygraphviz ... done\r\nSuccessfully installed pygraphviz-1.5\r\n```\r\n\r\n## 编译安装\r\n\r\n这里的编译安装，以 Python-3.11.6 为示例。\r\n\r\n第一，下载 Python 源码，解压。\r\n\r\n```bash\r\n# 官网下载地址 https://www.python.org/downloads\r\nwget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz\r\n\r\n# 解压到指定目录\r\ntar zvxf Python-3.11.6.tgz -C /usr/local/src\r\n```\r\n\r\n第二，进入解压的源码路径，编译 Python 源码。\r\n\r\n```bash\r\n$ export PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib/pkgconfig:$PKG_CONFIG_PATH\r\n$ export PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\r\n\r\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib64:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib:$LD_LIBRARY_PATH\r\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib:$LD_LIBRARY_PATH\r\n\r\n$ export TCLTK_LIBS="-L/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"\r\n$ export TCLTK_CFLAGS="-I/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/include"\r\n\r\n$ ./configure \\\r\n--enable-optimizations \\\r\n--prefix=/Bioinfo/Pipeline/SoftWare/Python-3.11.6 \\\r\n--with-openssl=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 \\\r\n--with-openssl-rpath=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib \\\r\nCC=/Bioinfo/Pipeline/SoftWare/gcc-7.3.0/bin/gcc \\\r\nCXX=/Bioinfo/Pipeline/SoftWare/gcc-7.3.0/bin/c++ \\\r\nLDFLAGS="-L/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib64 \\\r\n         -L/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib \\\r\n         -L/RiboBio/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib \\\r\n         -L/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib" \\\r\nCPPFLAGS="-I/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include \\\r\n          -I/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include \\\r\n          -I/Bioinfo/Pipeline/SoftWare/gdbm-1.23/include" \\\r\nPKG_CONFIG_PATH="/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib/pkgconfig: \\\r\n                 /Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig"\r\n```\r\n\r\n- `--enable-optimizations`\xa0 是优化选项（LTO，PGO\xa0 等）加上这个 \xa0flag\xa0 编译后，性能有 \xa010%\xa0 左右的优化，但是这会明显的增加编译时间。建议使用这个参数；\r\n- `--prefix`\xa0 声明安装路径；\r\n- 安装多个 python 的版本，如果不开启`--enable-shared`，指定不同路径即可。当开启`--enable-shared` 时，默认只有一个版本的 python。\r\n- Python 3 编译可以在 configure 或者环境变量中指定 OpenSSL 安装路径进行编译的方式解决 OpenSSL 依赖，否则 `make`\xa0 过程可能出错。\r\n\r\n```shell\r\n$ make\r\n......\r\nThe following modules found by detect_modules() in setup.py, have been\r\nbuilt by the Makefile instead, as configured by the Setup files:\r\n_abc                  atexit                pwd\r\ntime\r\n\r\n\r\nFailed to build these modules:\r\n_ctypes               _hashlib              _ssl\r\n\r\n\r\nCould not build the ssl module!\r\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().\r\nLibreSSL 2.6.4 and earlier do not provide the necessary APIs, https://github.com/libressl-portable/portable/issues/381\r\n\r\n......\r\n```\r\n\r\n- `make`\xa0过程如果出现 `ModuleNotFoundError: No module named \'_ctypes\'`\xa0或者 `INFO: Could not locate ffi libs and/or headers`\xa0参考：<https://groups.google.com/forum/#!topic/comp.lang.python/npv-wzmytzo>\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmK7bCeEeGjfbl1UVdvHyw3Jg8Zj.png)\r\n\r\n- 对于低版本的 Python 如果指定\xa0`--with-openssl=DIR`\xa0依然无法解决 ssl 模块的问题，可以参考修改 Modules/Setup.dist 文件（默认这块是注释的，放开注释即可。这块功能是开启 SSL 模块，不然会出现安装完毕后，提示找不到 ssl 模块的错误）再执行 configure，修改内容如下：\r\n\r\n```bash\r\n# Socket module helper for SSL support; you must comment out the other\r\n# socket line above, and possibly edit the SSL variable:\r\nSSL=/usr/local/ssl\r\n_ssl _ssl.c \\\r\n    -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\r\n    -L$(SSL)/lib -lssl -lcrypto\r\n```\r\n\r\n第三，Makefile 生后依次在当前路径执行编译和安装命令。\r\n\r\n```bash\r\nmake && make install\r\n```\r\n\r\n第四，安装完成。以上命令执行完毕，且无报错的情况下，我们将默认 python 换将切换至 3.11.6（一般不建议替换，个人建议把自定义安装的 Python bin 路径添加到 PATH 环境变量即可）：\r\n\r\n```bash\r\n# 替换系统自带的 python（不建议）\r\nmv /usr/bin/python /usr/bin/python2\r\nln -s /Bioinfo/Pipeline/SoftWare/Python-3.11.6/bin/python3 /usr/bin/python3\r\n\r\n# 添加新 Python 到 PATH 环境变量（建议）\r\necho "export PATH=/Bioinfo/Pipeline/SoftWare/Python-3.11.6/bin:$PATH" >>~/.bashrc\r\nsource ~/.bashrc\r\n```\r\n\r\n运行命令 `python -V`\xa0，查看是否出现 3.11.6\xa0 的版本，出现即为安装成功。\r\n\r\n## 其他工具\r\n\r\nPython >= 3.10 在安装时候，默认会同时安装 **pip3**！如果你的 python < 3.10，可以参考下面的方法安装 pip。\r\n\r\n```bash\r\n# 下载 setuptools 和 pip 安装程序\r\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\r\npython3 get-pip.py\r\n```\r\n\r\n至此，CentOS Linux release\xa06.5 下的 python-3.11.6\xa0 全部安装完成。如果在安装过程中出现其他的报错，建议把 error 关键信息直接复制到 Google 进行检索，参考其他人的解决方法。\r\n\r\n## 其他异常与解决\r\n\r\n### _bz2\r\n\r\n- 系统：CentOS Linux release 7.7.1908 (Core)\r\n- GCC：gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)\r\n\r\n在 CentOS 7 中安装 Python-3.6.9 中发现 make 过程中一直提示："**ModuleNotFoundError: No module named \'_bz2\'**"，尽管 `sudo yum install bzip2 bzip2-devel`\xa0 已经安装了 bzip2 的依赖，问题还是不得其解。最后参考 stackoverflow 上的《Correctly building local python3, with bz2 support》，终于解决问题，下面记录一下。\r\n[Correctly building local python3, with bz2 support](https://stackoverflow.com/questions/51149227/correctly-building-local-python3-with-bz2-support)\r\n\r\n**手动安装 bzip2：**\r\n\r\n```bash\r\nwget https://nchc.dl.sourceforge.net/project/bzip2/bzip2-1.0.6.tar.gz\r\ntar zvxf bzip2-1.0.6.tar.gz\r\ncd bzip2-1.0.6\r\nmake -f Makefile_libbz2_so  # 这一步是生成 libbz2.so.1.0.6 的动态库文件\r\nmake\r\nmake install PREFIX=/usr/local/software/bzip2-1.0.6\r\ncp libbz2.so.1.0.6 /usr/local/software/bzip2-1.0.6/lib/\r\n```\r\n\r\n**几点说明：**\r\n\r\n- bzip2 的官网 \xa0<http://www.bzip.org/>\xa0 已经把 bzip2 的源码下载链接放到了 \xa0SourceForge，网络上一些从 \xa0<http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz>\xa0 下载的做法已经失效。\r\n- [SourceForge](https://sourceforge.net/projects/bzip2/files/) 上 bzip2 的最新版本还是 1.0.6（Last modified 2018-11-3），更高级版本的 bzip2 我也不知道是否存在，也不知道能不能用。\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FvgxGWlVJSxOCvgXFo9BPOa3ODm5.png)\r\n\r\n**编译安装 Python-3.6.9：**\r\n\r\n```bash\r\n$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\r\n$ tar zvxf Python-3.6.9.tgz\r\n$ cd Python-3.6.9\r\n$ ./configure --enable-optimizations --prefix=/usr/local/software/python-3.6 CFLAGS="-I/usr/local/software/bzip2-1.0.6/include" LDFLAGS="-L/usr/local/software/bzip2-1.0.6/lib"\r\n$ make\r\n$ make install\r\n```\r\n\r\n- Python-3.6.9 中的 `./configure --help`\xa0中没有 `--with-openssl`\xa0参数！有点神奇，我也不知道原因。\r\n- 安装完成可以用 `from _bz2 import BZ2Compressor, BZ2Decompressor`\xa0测试一下 `_bz2`\xa0 是否可用。\r\n\r\n\r\n## 参考资料\r\n\r\n1. 行者无疆-ITer,《[python2.7 源码编译安装](https://www.cnblogs.com/ITer-jack/p/8305912.html)》, 博客园\r\n2. Scott Frazer,《[How do I compile Python 3.4 with custom OpenSSL?](https://stackoverflow.com/questions/23548188/how-do-i-compile-python-3-4-with-custom-openssl)》, Stack Overflow\r\n', 'bodyText': '编程，作为生物信息学的一个基础性技能，是任何一个生信工程师都无法绕开话题。也许有些人还在纠结 Perl 和 Python 到底应该学习哪一个，但作为目前最火最流行的编程语言 Python 还是非常值得尝试的。它不但可以进行文本处理，在统计、网站、游戏、爬虫、数据可视化等方面也有非常强大的应用，比起曾经的 Perl 真的强大和全面很多，且比 Perl 更容易入手。不管从长远发展，还是短期需要，学会 Python，看懂 Perl (或者先学 \xa0 Python，后学 Perl) 应该是每一个生信工程必备的基础技能之一。\n工欲善其事，必先利其器。关于 Python 安装教程在网上一搜一大把，但总感觉不够全面，尤其对于中间出现的一些问题的解决方法不尽如人意。鉴于此，本文基于 \xa0CentOS/RHEL Linux 对 Python 的源码编译安装进行了一下简单的总结，记录如下。\n安装环境\nRed Hat 6.5 + GCC 4.4.7（GCC-7.3.0 - 此版本 gcc 为手动安装）。\nGCC 高级版本手动或者 yum 安装参考以下文章：\n\nSCL+Devtoolset 安装与使用笔记 · 语雀\n非 root 用户手动编译安装 GCC · 语雀\n\n$ lsb_release -a\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID: RedHatEnterpriseServer\nDescription:    Red Hat Enterprise Linux Server release 6.5 (Santiago)\nRelease:        6.5\nCodename:       Santiago\n\n$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n解决依赖\n如果您拥有 root 权限，请执以下依赖安装：\nyum install zlib\nyum install zlib-devel\nyum install openssl\nyum install openssl-devel\nyum install libffi\nyum install libffi-devel\nyum install readline readline-devel sqlite sqlite-devel tk-devel\n\n\n\n缺少库名称\n安装命令\n\n\n\n\n_uuid\nyum install libuuid-devel\n\n\nreadline\nyum install readline-devel\n\n\n_tkinter\nyum install tk-devel\n\n\n_ffi\nyum install libffi-devel\n\n\n_curses\nyum install ncurses-libs\n\n\n_sqlite\nyum install sqlite-devel\n\n\n_bz2\nyum isntall bzip2-devel\n\n\n_ssl\nyum install openssl-devel\n\n\n_gdbm\nyum install gdbm-devel\n\n\n_dbi\nyum install libdbi-devel\n\n\n_zlib\nyum install zlib-devel\n\n\nlzma\nyum install xz-develyum install python-backports-lzma\n\n\n\n如果您没有 root 权限，可以参考《手把手教你在 Linux 源码安装最新版本的 R》一文，手动一个个去解决以上的依赖。\n_sqlite3\n执行 make 过程中提示 _sqlite3 not found，如下：\n$ make\n......\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_sqlite3              _ssl\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\n\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime\n系统已安装 sqlite3\n如果执行 rpm -qa|grep sqlite 看到 sqlite 和 sqlite-devel 都已经安装（libsqlite3.so 默认保存在 /usr/lib64 下； sqlite3.h 默认保存在 /usr/include 下）。\n$ sqlite3 -version\n3.6.20\n\n$ ll /usr/lib64/libsqlite3.so\nlrwxrwxrwx 1 root root 19 Apr 23  2015 /usr/lib64/libsqlite3.so -> libsqlite3.so.0.8.6\n\n$ ll /usr/include/sqlite3.h\n-rw-r--r-- 1 root root 263K Nov 25  2009 /usr/include/sqlite3.h\n但是，执行 make 依然出现以上报错，参考下面的方法《python build from source: cannot build optional module sqlite3 - Stack Overflow》。\n手动安装 sqlite3\n$ wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz --no-check-certificate\n$ tar zvxf sqlite-autoconf-3360000.tar.gz\n$ cd sqlite-autoconf-3360000\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0\n$ make\n$ make install\n配置 sqlite3\n1. 配置环境\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\n2. 调整源码或编译\n对于 3.11.x 以上版本的 Python 可以在 configure 指定自定义安装的 sqlite3 路径解决 _sqlite3 依赖。\n./configure ... \\\n    LDFLAGS="-L/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib" \\\n    CPPFLAGS="-I/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include" \n\n有些低版本的 Python (如 3.7) 可能需要再源码文件中加入 sqlite3.h 的文件路径。\n\n找到 sqlite3.h 文件的保存目录。\n修改 setup.py 文件，在 sqlite_inc_paths 中加上 sqlite3.h 的文件路径。\n\nsqlite_inc_paths = [ \'/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include\',\n                     \'/usr/include\',\n                     \'/usr/include/sqlite\',\n                     \'/usr/include/sqlite3\',\n                     \'/usr/local/include\',\n                     \'/usr/local/include/sqlite\',\n                     \'/usr/local/include/sqlite3\',\n                   ]\n_ssl\nPython3 需要引用 openssl\xa0 模块，但是 python3.7+ 在 CentOS 中要求的 openssl 版本最低为 1.0.2，而 CentOS 默认的为 1.0.1（CentOS-6.x 通过 yum\xa0 源安装的 openssl 的最高版本是 1.0.1），所以需要手动更新 openssl。\n对于 openssl 版本的选择，建议至少选择 1.1.1+ 版本：\n\nurllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: urllib3/urllib3#2168\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().\n\n# 下载\nwget http://www.openssl.org/source/openssl-1.1.1.tar.gz\n\n# 解压缩\ntar -zxvf openssl-1.1.1.tar.gz\n\n# 进入目录安装\ncd openssl-1.1.1\n\n# 进行配置下，自定义\n./config --prefix=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 shared zlib\n\n# 编译并安装\nmake && make install\n\n# 配置到用户环境变量，随处使用\necho "export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib:$LD_LIBRARY_PATH" >> $HOME/.bashrc\n\n# 是环境变量配置生效\nsource $HOME/.bashrc\n请注意：\n\nopenssl\xa0编译（config）的时候 必须要加上 shared\xa0 参数，否者源码安装 Python 即使添加了 --with-openssl\xa0的自定义路径，依然会导致 Could not build the ssl module!\xa0报错！\n从 https://www.openssl.org/source/\xa0下载的源码 openssl-1.0.2s、openssl-1.0.2m，包括 \xa0CentOS-7.5 使用 yum\xa0安装的最高版本的 openssl-1.0.2k 目前发现依然会导致 Could not build the ssl module\xa0，建议从 https://www.openssl.org/source/old/\xa0下载 1.1.1 的源码编译安装。\n\n最后，在 Python 执行 configure 的时候指定 openssl 的相关参数：\n./configure ... \\\n    --with-openssl=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 \\\n    --with-openssl-rpath=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib \\\n\n_tkinter\nTkinter 模块缺失是一个比较棘手的问题，为此专门写了一篇文章来介绍这个问题。\n具体请参考：Python 中 tkinter 源码安装使用与中文乱码 - Knowledge-Garden#12\n_dbm\n_dbm 和 _gdbm 的模块缺失可以通过下面手动的方法解决。\nwget https://ftp.gnu.org/gnu/gdbm/gdbm-1.23.tar.gz\ntar -zxvf gdbm-1.23.tar.gz\n./configure --prefix=/Bioinfo/Pipeline/SoftWare/gdbm-1.23 --enable-libgdbm-compat  --enable-debug\nmake && make install\n\n最后，增加环境变量，并调整 Python 执行 configure 时的参数：\nexport PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/bin:$PATH\nexport LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib:$LD_LIBRARY_PATH\n\n./configure ... \\\n    LDFLAGS="-L/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib" \\\n    CPPFLAGS="-I/Bioinfo/Pipeline/SoftWare/gdbm-1.23/include"\n\n_lzma\n正常情况下，下面的方法可以解决该问题（如果您有 root 权限的话）。\n# For ubuntu:\n$ sudo apt-get install liblzma-dev\n\n# For centos:\n$ yum install xz-devel\n普通用户可以手动安装解决：\n$ wget https://tukaani.org/xz/xz-5.2.5.tar.gz --no-check-certificat\n$ tar zvxf xz-5.2.5.tar.gz\n$ cd xz-5.2.5\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/xz-5.2.5\n$ make\n$ make install\n最后，配置环境：\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/xz-5.2.5/lib:$LD_LIBRARY_PATH\n_ctypes\n在 CentOS 6.x 安装 libffi-devel\xa0 的时候出现以下问题：\n$ yum install libffi-devel\nLoaded plugins: product-id, refresh-packagekit, search-disabled-repos, security, subscription-manager\nThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.\nSetting up Install Process\ncdrom                                                                                                                                         | 4.1 kB     00:00 ...\nNo package libffi-devel available.\nError: Nothing to do\n可以使用下面的方法安装：\n[root@log01 ~]# rpm -ivh http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nRetrieving http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nwarning: /var/tmp/rpm-tmp.V9ihbu: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY\nPreparing...                ########################################### [100%]\n   1:libffi-devel           ########################################### [100%]\n[root@log01 ~]# rpm -qa|grep libffi\nlibffi-3.0.5-3.2.el6.x86_64\nlibffi-devel-3.0.5-3.2.el6.x86_64\n手动的源码方法安装如下：\n$ wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\n$ tar zvxf libffi-3.2.1.tar.gz\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1\n$ make\n$ make install\npygraphviz\n如果你不需要使用 pygraphviz，可以不用管这个依赖。\n\nPyGraphviz is a Python interface to the Graphviz graph layout and visualization package. With PyGraphviz you can create, edit, read, write, and draw graphs using Python to access the Graphviz graph data structure and layout algorithms.\n\n\nPyGraphviz 是 Graphviz 图形布局和可视化包的 Python 接口。 借助 PyGraphviz，您可以使用 Python 创建、编辑、读取、写入和绘制图形，以访问 Graphviz 图形数据结构和布局算法。\n\n$ /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/pip3 install pygraphviz\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install for pygraphviz ... error\n    Complete output from command /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile:\n    running install\n    Trying dpkg\n    Failed to find dpkg\n    Trying pkg-config\n    Package libcgraph was not found in the pkg-config search path.\n    Perhaps you should add the directory containing `libcgraph.pc\'\n    to the PKG_CONFIG_PATH environment variable\n    No package \'libcgraph\' found\n    Traceback (most recent call last):\n      File "<string>", line 1, in <module>\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py", line 93, in <module>\n        tests_require=[\'nose>=1.3.7\', \'doctest-ignore-unicode>=0.1.2\', \'mock>=2.0.0\'],\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/site-packages/setuptools/__init__.py", line 145, in setup\n        return distutils.core.setup(**attrs)\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/core.py", line 148, in setup\n        dist.run_commands()\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/dist.py", line 966, in run_commands\n        self.run_command(cmd)\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/dist.py", line 985, in run_command\n        cmd_obj.run()\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_commands.py", line 44, in modified_run\n        self.include_path, self.library_path = get_graphviz_dirs()\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 162, in get_graphviz_dirs\n        include_dirs, library_dirs = _try_configure(include_dirs, library_dirs, _pkg_config)\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 117, in _try_configure\n        i, l = try_function()\n      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 72, in _pkg_config\n        output = S.check_output([\'pkg-config\', \'--libs-only-L\', \'libcgraph\'])\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/subprocess.py", line 395, in check_output\n        **kwargs).stdout\n      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/subprocess.py", line 487, in run\n        output=stdout, stderr=stderr)\n    subprocess.CalledProcessError: Command \'[\'pkg-config\', \'--libs-only-L\', \'libcgraph\']\' returned non-zero exit status 1.\n\n    ----------------------------------------\nCommand "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /tmp/pip-install-_zdjdg0j/pygraphviz/\n\n参考：《Installation:fatal error: \'graphviz/cgraph.h\' file not found》\n$ wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz\n$ tar zvxf graphviz.tar.gz\n$ cd graphviz-2.40.1\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1\n$ make && make install\n推荐把安装好的 graphviz 添加到环境变量，这样可以避免运行过程中出现："pygraphviz/graphviz_wrap.c:2987:29: fatal error: graphviz/cgraph.h: No such file or directory" 无法找到头文件的异常。\nexport PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\nexport LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\nexport C_INCLUDE_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include:$C_INCLUDE_PATH\nexport CPLUS_INCLUDE_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include:$CPLUS_INCLUDE_PATH\n如果 graphviz 添加到环境变量， pygraphviz\xa0的 python 包可以参考下面的方法安装：\n$ /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/pip3 install --global-option=build_ext --global-option="-I/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include" --global-option="-L/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib" pygraphviz\n/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/site-packages/pip/_internal/commands/install.py:207: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\n  cmdoptions.check_install_build_global(options)\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install for pygraphviz ... done\nSuccessfully installed pygraphviz-1.5\n编译安装\n这里的编译安装，以 Python-3.11.6 为示例。\n第一，下载 Python 源码，解压。\n# 官网下载地址 https://www.python.org/downloads\nwget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz\n\n# 解压到指定目录\ntar zvxf Python-3.11.6.tgz -C /usr/local/src\n第二，进入解压的源码路径，编译 Python 源码。\n$ export PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib/pkgconfig:$PKG_CONFIG_PATH\n$ export PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\n\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib64:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib:$LD_LIBRARY_PATH\n\n$ export TCLTK_LIBS="-L/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"\n$ export TCLTK_CFLAGS="-I/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/include"\n\n$ ./configure \\\n--enable-optimizations \\\n--prefix=/Bioinfo/Pipeline/SoftWare/Python-3.11.6 \\\n--with-openssl=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 \\\n--with-openssl-rpath=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib \\\nCC=/Bioinfo/Pipeline/SoftWare/gcc-7.3.0/bin/gcc \\\nCXX=/Bioinfo/Pipeline/SoftWare/gcc-7.3.0/bin/c++ \\\nLDFLAGS="-L/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib64 \\\n         -L/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib \\\n         -L/RiboBio/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib \\\n         -L/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib" \\\nCPPFLAGS="-I/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include \\\n          -I/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include \\\n          -I/Bioinfo/Pipeline/SoftWare/gdbm-1.23/include" \\\nPKG_CONFIG_PATH="/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib/pkgconfig: \\\n                 /Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig"\n\n--enable-optimizations\xa0 是优化选项（LTO，PGO\xa0 等）加上这个 \xa0flag\xa0 编译后，性能有 \xa010%\xa0 左右的优化，但是这会明显的增加编译时间。建议使用这个参数；\n--prefix\xa0 声明安装路径；\n安装多个 python 的版本，如果不开启--enable-shared，指定不同路径即可。当开启--enable-shared 时，默认只有一个版本的 python。\nPython 3 编译可以在 configure 或者环境变量中指定 OpenSSL 安装路径进行编译的方式解决 OpenSSL 依赖，否则 make\xa0 过程可能出错。\n\n$ make\n......\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime\n\n\nFailed to build these modules:\n_ctypes               _hashlib              _ssl\n\n\nCould not build the ssl module!\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().\nLibreSSL 2.6.4 and earlier do not provide the necessary APIs, https://github.com/libressl-portable/portable/issues/381\n\n......\n\nmake\xa0过程如果出现 ModuleNotFoundError: No module named \'_ctypes\'\xa0或者 INFO: Could not locate ffi libs and/or headers\xa0参考：https://groups.google.com/forum/#!topic/comp.lang.python/npv-wzmytzo\n\n\n\n对于低版本的 Python 如果指定\xa0--with-openssl=DIR\xa0依然无法解决 ssl 模块的问题，可以参考修改 Modules/Setup.dist 文件（默认这块是注释的，放开注释即可。这块功能是开启 SSL 模块，不然会出现安装完毕后，提示找不到 ssl 模块的错误）再执行 configure，修改内容如下：\n\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\nSSL=/usr/local/ssl\n_ssl _ssl.c \\\n    -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n    -L$(SSL)/lib -lssl -lcrypto\n第三，Makefile 生后依次在当前路径执行编译和安装命令。\nmake && make install\n第四，安装完成。以上命令执行完毕，且无报错的情况下，我们将默认 python 换将切换至 3.11.6（一般不建议替换，个人建议把自定义安装的 Python bin 路径添加到 PATH 环境变量即可）：\n# 替换系统自带的 python（不建议）\nmv /usr/bin/python /usr/bin/python2\nln -s /Bioinfo/Pipeline/SoftWare/Python-3.11.6/bin/python3 /usr/bin/python3\n\n# 添加新 Python 到 PATH 环境变量（建议）\necho "export PATH=/Bioinfo/Pipeline/SoftWare/Python-3.11.6/bin:$PATH" >>~/.bashrc\nsource ~/.bashrc\n运行命令 python -V\xa0，查看是否出现 3.11.6\xa0 的版本，出现即为安装成功。\n其他工具\nPython >= 3.10 在安装时候，默认会同时安装 pip3！如果你的 python < 3.10，可以参考下面的方法安装 pip。\n# 下载 setuptools 和 pip 安装程序\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py\n至此，CentOS Linux release\xa06.5 下的 python-3.11.6\xa0 全部安装完成。如果在安装过程中出现其他的报错，建议把 error 关键信息直接复制到 Google 进行检索，参考其他人的解决方法。\n其他异常与解决\n_bz2\n\n系统：CentOS Linux release 7.7.1908 (Core)\nGCC：gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)\n\n在 CentOS 7 中安装 Python-3.6.9 中发现 make 过程中一直提示："ModuleNotFoundError: No module named \'_bz2\'"，尽管 sudo yum install bzip2 bzip2-devel\xa0 已经安装了 bzip2 的依赖，问题还是不得其解。最后参考 stackoverflow 上的《Correctly building local python3, with bz2 support》，终于解决问题，下面记录一下。\nCorrectly building local python3, with bz2 support\n手动安装 bzip2：\nwget https://nchc.dl.sourceforge.net/project/bzip2/bzip2-1.0.6.tar.gz\ntar zvxf bzip2-1.0.6.tar.gz\ncd bzip2-1.0.6\nmake -f Makefile_libbz2_so  # 这一步是生成 libbz2.so.1.0.6 的动态库文件\nmake\nmake install PREFIX=/usr/local/software/bzip2-1.0.6\ncp libbz2.so.1.0.6 /usr/local/software/bzip2-1.0.6/lib/\n几点说明：\n\nbzip2 的官网 \xa0http://www.bzip.org/\xa0 已经把 bzip2 的源码下载链接放到了 \xa0SourceForge，网络上一些从 \xa0http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz\xa0 下载的做法已经失效。\nSourceForge 上 bzip2 的最新版本还是 1.0.6（Last modified 2018-11-3），更高级版本的 bzip2 我也不知道是否存在，也不知道能不能用。\n\n\n编译安装 Python-3.6.9：\n$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n$ tar zvxf Python-3.6.9.tgz\n$ cd Python-3.6.9\n$ ./configure --enable-optimizations --prefix=/usr/local/software/python-3.6 CFLAGS="-I/usr/local/software/bzip2-1.0.6/include" LDFLAGS="-L/usr/local/software/bzip2-1.0.6/lib"\n$ make\n$ make install\n\nPython-3.6.9 中的 ./configure --help\xa0中没有 --with-openssl\xa0参数！有点神奇，我也不知道原因。\n安装完成可以用 from _bz2 import BZ2Compressor, BZ2Decompressor\xa0测试一下 _bz2\xa0 是否可用。\n\n参考资料\n\n行者无疆-ITer,《python2.7 源码编译安装》, 博客园\nScott Frazer,《How do I compile Python 3.4 with custom OpenSSL?》, Stack Overflow', 'bodyHTML': '<p dir="auto">编程，作为生物信息学的一个基础性技能，是任何一个生信工程师都无法绕开话题。也许有些人还在纠结 Perl 和 Python 到底应该学习哪一个，但作为目前最火最流行的编程语言 Python 还是非常值得尝试的。它不但可以进行文本处理，在统计、网站、游戏、爬虫、数据可视化等方面也有非常强大的应用，比起曾经的 Perl 真的强大和全面很多，且比 Perl 更容易入手。不管从长远发展，还是短期需要，学会 Python，看懂 Perl (或者先学 \xa0 Python，后学 Perl) 应该是每一个生信工程必备的基础技能之一。</p>\n<p dir="auto">工欲善其事，必先利其器。关于 Python 安装教程在网上一搜一大把，但总感觉不够全面，尤其对于中间出现的一些问题的解决方法不尽如人意。鉴于此，本文基于 \xa0CentOS/RHEL Linux 对 Python 的源码编译安装进行了一下简单的总结，记录如下。</p>\n<h2 dir="auto">安装环境</h2>\n<p dir="auto">Red Hat 6.5 + GCC 4.4.7（GCC-7.3.0 - 此版本 gcc 为手动安装）。</p>\n<p dir="auto">GCC 高级版本手动或者 <code class="notranslate">yum</code> 安装参考以下文章：</p>\n<ul dir="auto">\n<li><a href="https://www.yuque.com/shenweiyan/cookbook/scl-devtoolset-note" rel="nofollow">SCL+Devtoolset 安装与使用笔记 · 语雀</a></li>\n<li><a href="https://www.yuque.com/shenweiyan/cookbook/linux-gcc-install" rel="nofollow">非 root 用户手动编译安装 GCC · 语雀</a></li>\n</ul>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ lsb_release -a\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID: RedHatEnterpriseServer\nDescription:    Red Hat Enterprise Linux Server release 6.5 (Santiago)\nRelease:        6.5\nCodename:       Santiago\n\n$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."><pre class="notranslate">$ lsb_release -a\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID: RedHatEnterpriseServer\nDescription:    Red Hat Enterprise Linux Server release 6.5 (Santiago)\nRelease:        6.5\nCodename:       Santiago\n\n$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)\nCopyright (C) 2010 Free Software Foundation, Inc.\nThis is free software<span class="pl-k">;</span> see the <span class="pl-c1">source</span> <span class="pl-k">for</span> copying conditions.  There is NO\nwarranty<span class="pl-k">;</span> not even <span class="pl-k">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</pre></div>\n<h2 dir="auto">解决依赖</h2>\n<p dir="auto">如果您拥有 root 权限，请执以下依赖安装：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="yum install zlib\nyum install zlib-devel\nyum install openssl\nyum install openssl-devel\nyum install libffi\nyum install libffi-devel\nyum install readline readline-devel sqlite sqlite-devel tk-devel"><pre class="notranslate">yum install zlib\nyum install zlib-devel\nyum install openssl\nyum install openssl-devel\nyum install libffi\nyum install libffi-devel\nyum install readline readline-devel sqlite sqlite-devel tk-devel</pre></div>\n<table role="table">\n<thead>\n<tr>\n<th>缺少库名称</th>\n<th>安装命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>_uuid</td>\n<td>yum install libuuid-devel</td>\n</tr>\n<tr>\n<td>readline</td>\n<td>yum install readline-devel</td>\n</tr>\n<tr>\n<td>_tkinter</td>\n<td>yum install tk-devel</td>\n</tr>\n<tr>\n<td>_ffi</td>\n<td>yum install libffi-devel</td>\n</tr>\n<tr>\n<td>_curses</td>\n<td>yum install ncurses-libs</td>\n</tr>\n<tr>\n<td>_sqlite</td>\n<td>yum install sqlite-devel</td>\n</tr>\n<tr>\n<td>_bz2</td>\n<td>yum isntall bzip2-devel</td>\n</tr>\n<tr>\n<td>_ssl</td>\n<td>yum install openssl-devel</td>\n</tr>\n<tr>\n<td>_gdbm</td>\n<td>yum install gdbm-devel</td>\n</tr>\n<tr>\n<td>_dbi</td>\n<td>yum install libdbi-devel</td>\n</tr>\n<tr>\n<td>_zlib</td>\n<td>yum install zlib-devel</td>\n</tr>\n<tr>\n<td>lzma</td>\n<td>yum install xz-develyum install python-backports-lzma</td>\n</tr>\n</tbody>\n</table>\n<p dir="auto">如果您没有 root 权限，可以参考《<a href="https://www.yuque.com/shenweiyan/cookbook/install-latest-r-from-source" rel="nofollow">手把手教你在 Linux 源码安装最新版本的 R</a>》一文，手动一个个去解决以上的依赖。</p>\n<h3 dir="auto">_sqlite3</h3>\n<p dir="auto">执行 <strong>make</strong> 过程中提示 <strong>_sqlite3 not found</strong>，如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make\n......\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_sqlite3              _ssl\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\n\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime"><pre class="notranslate">$ make\n......\nPython build finished successfully<span class="pl-k">!</span>\nThe necessary bits to build these optional modules were not found:\n_sqlite3              _ssl\nTo find the necessary bits, look <span class="pl-k">in</span> setup.py <span class="pl-k">in</span> <span class="pl-en">detect_modules</span>() <span class="pl-k">for</span> the module<span class="pl-s"><span class="pl-pds">\'</span>s name.</span>\n<span class="pl-s"></span>\n<span class="pl-s">The following modules found by detect_modules() in setup.py, have been</span>\n<span class="pl-s">built by the Makefile instead, as configured by the Setup files:</span>\n<span class="pl-s">_abc                  atexit                pwd</span>\n<span class="pl-s">time</span></pre></div>\n<h3 dir="auto">系统已安装 sqlite3</h3>\n<p dir="auto">如果执行 <strong>rpm -qa|grep sqlite</strong> 看到 sqlite 和 sqlite-devel 都已经安装（libsqlite3.so 默认保存在 /usr/lib64 下； <code class="notranslate">sqlite3.h</code> 默认保存在 <code class="notranslate">/usr/include</code> 下）。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ sqlite3 -version\n3.6.20\n\n$ ll /usr/lib64/libsqlite3.so\nlrwxrwxrwx 1 root root 19 Apr 23  2015 /usr/lib64/libsqlite3.so -&gt; libsqlite3.so.0.8.6\n\n$ ll /usr/include/sqlite3.h\n-rw-r--r-- 1 root root 263K Nov 25  2009 /usr/include/sqlite3.h"><pre class="notranslate">$ sqlite3 -version\n3.6.20\n\n$ ll /usr/lib64/libsqlite3.so\nlrwxrwxrwx 1 root root 19 Apr 23  2015 /usr/lib64/libsqlite3.so -<span class="pl-k">&gt;</span> libsqlite3.so.0.8.6\n\n$ ll /usr/include/sqlite3.h\n-rw-r--r-- 1 root root 263K Nov 25  2009 /usr/include/sqlite3.h</pre></div>\n<p dir="auto">但是，执行 <code class="notranslate">make</code> 依然出现以上报错，参考下面的方法《<a href="https://stackoverflow.com/questions/32779768/python-build-from-source-cannot-build-optional-module-sqlite3" rel="nofollow">python build from source: cannot build optional module sqlite3 - Stack Overflow</a>》。</p>\n<h3 dir="auto">手动安装 sqlite3</h3>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz --no-check-certificate\n$ tar zvxf sqlite-autoconf-3360000.tar.gz\n$ cd sqlite-autoconf-3360000\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0\n$ make\n$ make install"><pre class="notranslate">$ wget https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz --no-check-certificate\n$ tar zvxf sqlite-autoconf-3360000.tar.gz\n$ <span class="pl-c1">cd</span> sqlite-autoconf-3360000\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0\n$ make\n$ make install</pre></div>\n<h3 dir="auto">配置 sqlite3</h3>\n<h4 dir="auto">1. 配置环境</h4>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib:$LD_LIBRARY_PATH"><pre class="notranslate">$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span></pre></div>\n<h4 dir="auto">2. 调整源码或编译</h4>\n<p dir="auto">对于 3.11.x 以上版本的 Python 可以在 <code class="notranslate">configure</code> 指定自定义安装的 sqlite3 路径解决 <code class="notranslate">_sqlite3</code> 依赖。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure ... \\\n    LDFLAGS=&quot;-L/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib&quot; \\\n    CPPFLAGS=&quot;-I/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include&quot; "><pre class="notranslate"><code class="notranslate">./configure ... \\\n    LDFLAGS="-L/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib" \\\n    CPPFLAGS="-I/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include" \n</code></pre></div>\n<p dir="auto">有些低版本的 Python (如 3.7) 可能需要再源码文件中加入 <code class="notranslate">sqlite3.h</code> 的文件路径。</p>\n<ol dir="auto">\n<li>找到 <strong>sqlite3.h</strong> 文件的保存目录。</li>\n<li>修改 <strong>setup.py</strong> 文件，在 sqlite_inc_paths 中加上 sqlite3.h 的文件路径。</li>\n</ol>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sqlite_inc_paths = [ \'/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include\',\n                     \'/usr/include\',\n                     \'/usr/include/sqlite\',\n                     \'/usr/include/sqlite3\',\n                     \'/usr/local/include\',\n                     \'/usr/local/include/sqlite\',\n                     \'/usr/local/include/sqlite3\',\n                   ]"><pre class="notranslate">sqlite_inc_paths = [ <span class="pl-s"><span class="pl-pds">\'</span>/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/include<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/include/sqlite<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/include/sqlite3<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/local/include<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/local/include/sqlite<span class="pl-pds">\'</span></span>,\n                     <span class="pl-s"><span class="pl-pds">\'</span>/usr/local/include/sqlite3<span class="pl-pds">\'</span></span>,\n                   ]</pre></div>\n<h3 dir="auto">_ssl</h3>\n<p dir="auto">Python3 需要引用 <code class="notranslate">openssl</code>\xa0 模块，但是 python3.7+ 在 CentOS 中要求的 openssl 版本最低为 1.0.2，而 CentOS 默认的为 1.0.1（CentOS-6.x 通过 <code class="notranslate">yum</code>\xa0 源安装的 openssl 的最高版本是 1.0.1），所以需要手动更新 openssl。</p>\n<p dir="auto">对于 openssl 版本的选择，建议至少选择 1.1.1+ 版本：</p>\n<ol dir="auto">\n<li>urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the \'ssl\' module is compiled with \'OpenSSL 1.0.2k-fips  26 Jan 2017\'. See: <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="824222127" data-permission-text="Title is private" data-url="https://github.com/urllib3/urllib3/issues/2168" data-hovercard-type="issue" data-hovercard-url="/urllib3/urllib3/issues/2168/hovercard" href="https://github.com/urllib3/urllib3/issues/2168">urllib3/urllib3#2168</a></li>\n<li><strong>Python requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().</strong></li>\n</ol>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 下载\nwget http://www.openssl.org/source/openssl-1.1.1.tar.gz\n\n# 解压缩\ntar -zxvf openssl-1.1.1.tar.gz\n\n# 进入目录安装\ncd openssl-1.1.1\n\n# 进行配置下，自定义\n./config --prefix=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 shared zlib\n\n# 编译并安装\nmake &amp;&amp; make install\n\n# 配置到用户环境变量，随处使用\necho &quot;export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib:$LD_LIBRARY_PATH&quot; &gt;&gt; $HOME/.bashrc\n\n# 是环境变量配置生效\nsource $HOME/.bashrc"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 下载</span>\nwget http://www.openssl.org/source/openssl-1.1.1.tar.gz\n\n<span class="pl-c"><span class="pl-c">#</span> 解压缩</span>\ntar -zxvf openssl-1.1.1.tar.gz\n\n<span class="pl-c"><span class="pl-c">#</span> 进入目录安装</span>\n<span class="pl-c1">cd</span> openssl-1.1.1\n\n<span class="pl-c"><span class="pl-c">#</span> 进行配置下，自定义</span>\n./config --prefix=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 shared zlib\n\n<span class="pl-c"><span class="pl-c">#</span> 编译并安装</span>\nmake <span class="pl-k">&amp;&amp;</span> make install\n\n<span class="pl-c"><span class="pl-c">#</span> 配置到用户环境变量，随处使用</span>\n<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span><span class="pl-pds">"</span></span> <span class="pl-k">&gt;&gt;</span> <span class="pl-smi">$HOME</span>/.bashrc\n\n<span class="pl-c"><span class="pl-c">#</span> 是环境变量配置生效</span>\n<span class="pl-c1">source</span> <span class="pl-smi">$HOME</span>/.bashrc</pre></div>\n<p dir="auto"><strong>请注意：</strong></p>\n<ol dir="auto">\n<li><strong>openssl</strong>\xa0编译（config）的时候 <strong>必须要加上 shared\xa0 参数</strong>，否者源码安装 Python 即使添加了 <code class="notranslate">--with-openssl</code>\xa0的自定义路径，依然会导致 <code class="notranslate">Could not build the ssl module!</code>\xa0报错！</li>\n<li>从 <a href="https://www.openssl.org/source/" rel="nofollow">https://www.openssl.org/source/</a>\xa0下载的源码 openssl-1.0.2s、openssl-1.0.2m，包括 \xa0CentOS-7.5 使用 <code class="notranslate">yum</code>\xa0安装的最高版本的 openssl-1.0.2k 目前发现依然会导致 <code class="notranslate">Could not build the ssl module</code>\xa0，建议从 <a href="https://www.openssl.org/source/old/" rel="nofollow">https://www.openssl.org/source/old/</a>\xa0下载 1.1.1 的源码编译安装。</li>\n</ol>\n<p dir="auto">最后，在 Python 执行 <code class="notranslate">configure</code> 的时候指定 openssl 的相关参数：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure ... \\\n    --with-openssl=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 \\\n    --with-openssl-rpath=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib \\"><pre class="notranslate"><code class="notranslate">./configure ... \\\n    --with-openssl=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 \\\n    --with-openssl-rpath=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib \\\n</code></pre></div>\n<h2 dir="auto">_tkinter</h2>\n<p dir="auto">Tkinter 模块缺失是一个比较棘手的问题，为此专门写了一篇文章来介绍这个问题。</p>\n<p dir="auto">具体请参考：<a href="https://github.com/shenweiyan/Knowledge-Garden/discussions/12" data-hovercard-type="discussion" data-hovercard-url="/shenweiyan/Knowledge-Garden/discussions/12/hovercard">Python 中 tkinter 源码安装使用与中文乱码 - Knowledge-Garden#12</a></p>\n<h3 dir="auto">_dbm</h3>\n<p dir="auto"><code class="notranslate">_dbm</code> 和 <code class="notranslate">_gdbm</code> 的模块缺失可以通过下面手动的方法解决。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="wget https://ftp.gnu.org/gnu/gdbm/gdbm-1.23.tar.gz\ntar -zxvf gdbm-1.23.tar.gz\n./configure --prefix=/Bioinfo/Pipeline/SoftWare/gdbm-1.23 --enable-libgdbm-compat  --enable-debug\nmake &amp;&amp; make install"><pre class="notranslate"><code class="notranslate">wget https://ftp.gnu.org/gnu/gdbm/gdbm-1.23.tar.gz\ntar -zxvf gdbm-1.23.tar.gz\n./configure --prefix=/Bioinfo/Pipeline/SoftWare/gdbm-1.23 --enable-libgdbm-compat  --enable-debug\nmake &amp;&amp; make install\n</code></pre></div>\n<p dir="auto">最后，增加环境变量，并调整 Python 执行 <code class="notranslate">configure</code> 时的参数：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/bin:$PATH\nexport LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib:$LD_LIBRARY_PATH\n\n./configure ... \\\n    LDFLAGS=&quot;-L/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib&quot; \\\n    CPPFLAGS=&quot;-I/Bioinfo/Pipeline/SoftWare/gdbm-1.23/include&quot;"><pre class="notranslate"><code class="notranslate">export PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/bin:$PATH\nexport LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib:$LD_LIBRARY_PATH\n\n./configure ... \\\n    LDFLAGS="-L/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib" \\\n    CPPFLAGS="-I/Bioinfo/Pipeline/SoftWare/gdbm-1.23/include"\n</code></pre></div>\n<h3 dir="auto">_lzma</h3>\n<p dir="auto">正常情况下，下面的方法可以解决该问题（如果您有 root 权限的话）。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# For ubuntu:\n$ sudo apt-get install liblzma-dev\n\n# For centos:\n$ yum install xz-devel"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> For ubuntu:</span>\n$ sudo apt-get install liblzma-dev\n\n<span class="pl-c"><span class="pl-c">#</span> For centos:</span>\n$ yum install xz-devel</pre></div>\n<p dir="auto">普通用户可以手动安装解决：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://tukaani.org/xz/xz-5.2.5.tar.gz --no-check-certificat\n$ tar zvxf xz-5.2.5.tar.gz\n$ cd xz-5.2.5\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/xz-5.2.5\n$ make\n$ make install"><pre class="notranslate">$ wget https://tukaani.org/xz/xz-5.2.5.tar.gz --no-check-certificat\n$ tar zvxf xz-5.2.5.tar.gz\n$ <span class="pl-c1">cd</span> xz-5.2.5\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/xz-5.2.5\n$ make\n$ make install</pre></div>\n<p dir="auto">最后，配置环境：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/xz-5.2.5/lib:$LD_LIBRARY_PATH"><pre class="notranslate">$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/xz-5.2.5/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span></pre></div>\n<h3 dir="auto">_ctypes</h3>\n<p dir="auto">在 CentOS 6.x 安装 <code class="notranslate">libffi-devel</code>\xa0 的时候出现以下问题：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ yum install libffi-devel\nLoaded plugins: product-id, refresh-packagekit, search-disabled-repos, security, subscription-manager\nThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.\nSetting up Install Process\ncdrom                                                                                                                                         | 4.1 kB     00:00 ...\nNo package libffi-devel available.\nError: Nothing to do"><pre class="notranslate">$ yum install libffi-devel\nLoaded plugins: product-id, refresh-packagekit, search-disabled-repos, security, subscription-manager\nThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.\nSetting up Install Process\ncdrom                                                                                                                                         <span class="pl-k">|</span> 4.1 kB     00:00 ...\nNo package libffi-devel available.\nError: Nothing to <span class="pl-k">do</span></pre></div>\n<p dir="auto">可以使用下面的方法安装：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[root@log01 ~]# rpm -ivh http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nRetrieving http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nwarning: /var/tmp/rpm-tmp.V9ihbu: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY\nPreparing...                ########################################### [100%]\n   1:libffi-devel           ########################################### [100%]\n[root@log01 ~]# rpm -qa|grep libffi\nlibffi-3.0.5-3.2.el6.x86_64\nlibffi-devel-3.0.5-3.2.el6.x86_64"><pre class="notranslate">[root@log01 <span class="pl-k">~</span>]<span class="pl-c"><span class="pl-c">#</span> rpm -ivh http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm</span>\nRetrieving http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm\nwarning: /var/tmp/rpm-tmp.V9ihbu: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY\nPreparing...                <span class="pl-c"><span class="pl-c">#</span>########################################## [100%]</span>\n   1:libffi-devel           <span class="pl-c"><span class="pl-c">#</span>########################################## [100%]</span>\n[root@log01 <span class="pl-k">~</span>]<span class="pl-c"><span class="pl-c">#</span> rpm -qa|grep libffi</span>\nlibffi-3.0.5-3.2.el6.x86_64\nlibffi-devel-3.0.5-3.2.el6.x86_64</pre></div>\n<p dir="auto">手动的源码方法安装如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\n$ tar zvxf libffi-3.2.1.tar.gz\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1\n$ make\n$ make install"><pre class="notranslate">$ wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz\n$ tar zvxf libffi-3.2.1.tar.gz\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1\n$ make\n$ make install</pre></div>\n<h3 dir="auto">pygraphviz</h3>\n<p dir="auto">如果你不需要使用 pygraphviz，可以不用管这个依赖。</p>\n<blockquote>\n<p dir="auto">PyGraphviz is a Python interface to the Graphviz graph layout and visualization package. With PyGraphviz you can create, edit, read, write, and draw graphs using Python to access the Graphviz graph data structure and layout algorithms.</p>\n</blockquote>\n<blockquote>\n<p dir="auto">PyGraphviz 是 Graphviz 图形布局和可视化包的 Python 接口。 借助 PyGraphviz，您可以使用 Python 创建、编辑、读取、写入和绘制图形，以访问 Graphviz 图形数据结构和布局算法。</p>\n</blockquote>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/pip3 install pygraphviz\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install for pygraphviz ... error\n    Complete output from command /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/python3.7 -u -c &quot;import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))&quot; install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile:\n    running install\n    Trying dpkg\n    Failed to find dpkg\n    Trying pkg-config\n    Package libcgraph was not found in the pkg-config search path.\n    Perhaps you should add the directory containing `libcgraph.pc\'\n    to the PKG_CONFIG_PATH environment variable\n    No package \'libcgraph\' found\n    Traceback (most recent call last):\n      File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py&quot;, line 93, in &lt;module&gt;\n        tests_require=[\'nose&gt;=1.3.7\', \'doctest-ignore-unicode&gt;=0.1.2\', \'mock&gt;=2.0.0\'],\n      File &quot;/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/site-packages/setuptools/__init__.py&quot;, line 145, in setup\n        return distutils.core.setup(**attrs)\n      File &quot;/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/core.py&quot;, line 148, in setup\n        dist.run_commands()\n      File &quot;/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/dist.py&quot;, line 966, in run_commands\n        self.run_command(cmd)\n      File &quot;/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/dist.py&quot;, line 985, in run_command\n        cmd_obj.run()\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup_commands.py&quot;, line 44, in modified_run\n        self.include_path, self.library_path = get_graphviz_dirs()\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py&quot;, line 162, in get_graphviz_dirs\n        include_dirs, library_dirs = _try_configure(include_dirs, library_dirs, _pkg_config)\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py&quot;, line 117, in _try_configure\n        i, l = try_function()\n      File &quot;/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py&quot;, line 72, in _pkg_config\n        output = S.check_output([\'pkg-config\', \'--libs-only-L\', \'libcgraph\'])\n      File &quot;/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/subprocess.py&quot;, line 395, in check_output\n        **kwargs).stdout\n      File &quot;/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/subprocess.py&quot;, line 487, in run\n        output=stdout, stderr=stderr)\n    subprocess.CalledProcessError: Command \'[\'pkg-config\', \'--libs-only-L\', \'libcgraph\']\' returned non-zero exit status 1.\n\n    ----------------------------------------\nCommand &quot;/Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/python3.7 -u -c &quot;import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))&quot; install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile&quot; failed with error code 1 in /tmp/pip-install-_zdjdg0j/pygraphviz/\n"><pre class="notranslate">$ /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/pip3 install pygraphviz\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install <span class="pl-k">for</span> pygraphviz ... error\n    Complete output from <span class="pl-c1">command</span> /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/python3.7 -u -c <span class="pl-s"><span class="pl-pds">"</span>import setuptools, tokenize;__file__=\'/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py\';f=getattr(tokenize, \'open\', open)(__file__);code=f.read().replace(\'\\r\\n\', \'\\n\');f.close();exec(compile(code, __file__, \'exec\'))<span class="pl-pds">"</span></span> install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile:\n    running install\n    Trying dpkg\n    Failed to find dpkg\n    Trying pkg-config\n    Package libcgraph was not found <span class="pl-k">in</span> the pkg-config search path.\n    Perhaps you should add the directory containing <span class="pl-s"><span class="pl-pds">`</span>libcgraph.pc<span class="pl-s"><span class="pl-pds">\'</span></span></span>\n<span class="pl-s"><span class="pl-s">    to the PKG_CONFIG_PATH environment variable</span></span>\n<span class="pl-s"><span class="pl-s">    No package <span class="pl-pds">\'</span></span>libcgraph<span class="pl-s"><span class="pl-pds">\'</span> found</span></span>\n<span class="pl-s"><span class="pl-s">    Traceback (most recent call last):</span></span>\n<span class="pl-s"><span class="pl-s">      File "&lt;string&gt;", line 1, in &lt;module&gt;</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py", line 93, in &lt;module&gt;</span></span>\n<span class="pl-s"><span class="pl-s">        tests_require=[<span class="pl-pds">\'</span></span>nose<span class="pl-k">&gt;</span>=1.3.7<span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span>doctest-ignore-unicode<span class="pl-k">&gt;</span>=0.1.2<span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span>mock<span class="pl-k">&gt;</span>=2.0.0<span class="pl-s"><span class="pl-pds">\'</span>],</span></span>\n<span class="pl-s"><span class="pl-s">      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/site-packages/setuptools/__init__.py", line 145, in setup</span></span>\n<span class="pl-s"><span class="pl-s">        return distutils.core.setup(**attrs)</span></span>\n<span class="pl-s"><span class="pl-s">      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/core.py", line 148, in setup</span></span>\n<span class="pl-s"><span class="pl-s">        dist.run_commands()</span></span>\n<span class="pl-s"><span class="pl-s">      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/dist.py", line 966, in run_commands</span></span>\n<span class="pl-s"><span class="pl-s">        self.run_command(cmd)</span></span>\n<span class="pl-s"><span class="pl-s">      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/distutils/dist.py", line 985, in run_command</span></span>\n<span class="pl-s"><span class="pl-s">        cmd_obj.run()</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_commands.py", line 44, in modified_run</span></span>\n<span class="pl-s"><span class="pl-s">        self.include_path, self.library_path = get_graphviz_dirs()</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 162, in get_graphviz_dirs</span></span>\n<span class="pl-s"><span class="pl-s">        include_dirs, library_dirs = _try_configure(include_dirs, library_dirs, _pkg_config)</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 117, in _try_configure</span></span>\n<span class="pl-s"><span class="pl-s">        i, l = try_function()</span></span>\n<span class="pl-s"><span class="pl-s">      File "/tmp/pip-install-_zdjdg0j/pygraphviz/setup_extra.py", line 72, in _pkg_config</span></span>\n<span class="pl-s"><span class="pl-s">        output = S.check_output([<span class="pl-pds">\'</span></span>pkg-config<span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span>--libs-only-L<span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span>libcgraph<span class="pl-s"><span class="pl-pds">\'</span>])</span></span>\n<span class="pl-s"><span class="pl-s">      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/subprocess.py", line 395, in check_output</span></span>\n<span class="pl-s"><span class="pl-s">        **kwargs).stdout</span></span>\n<span class="pl-s"><span class="pl-s">      File "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/subprocess.py", line 487, in run</span></span>\n<span class="pl-s"><span class="pl-s">        output=stdout, stderr=stderr)</span></span>\n<span class="pl-s"><span class="pl-s">    subprocess.CalledProcessError: Command <span class="pl-pds">\'</span></span>[<span class="pl-s"><span class="pl-pds">\'</span>pkg-config<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>--libs-only-L<span class="pl-pds">\'</span></span>, <span class="pl-s"><span class="pl-pds">\'</span>libcgraph<span class="pl-pds">\'</span></span>]<span class="pl-s"><span class="pl-pds">\'</span> returned non-zero exit status 1.</span></span>\n<span class="pl-s"><span class="pl-s"></span></span>\n<span class="pl-s"><span class="pl-s">    ----------------------------------------</span></span>\n<span class="pl-s"><span class="pl-s">Command "/Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/python3.7 -u -c "import setuptools, tokenize;__file__=<span class="pl-pds">\'</span></span>/tmp/pip-install-_zdjdg0j/pygraphviz/setup.py<span class="pl-s"><span class="pl-pds">\'</span>;f=getattr(tokenize, <span class="pl-pds">\'</span></span>open<span class="pl-s"><span class="pl-pds">\'</span>, open)(__file__);code=f.read().replace(<span class="pl-pds">\'</span></span><span class="pl-cce">\\r\\n</span><span class="pl-s"><span class="pl-pds">\'</span>, <span class="pl-pds">\'</span></span><span class="pl-cce">\\n</span><span class="pl-s"><span class="pl-pds">\'</span>);f.close();exec(compile(code, __file__, <span class="pl-pds">\'</span></span>exec<span class="pl-s"><span class="pl-pds">\'</span>))" install --record /tmp/pip-record-g0mz7lrq/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /tmp/pip-install-_zdjdg0j/pygraphviz/</span></span>\n<span class="pl-s"><span class="pl-s"></span></span></pre></div>\n<p dir="auto">参考：《<a href="https://github.com/pygraphviz/pygraphviz/issues/11" data-hovercard-type="issue" data-hovercard-url="/pygraphviz/pygraphviz/issues/11/hovercard">Installation:fatal error: \'graphviz/cgraph.h\' file not found</a>》</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz\n$ tar zvxf graphviz.tar.gz\n$ cd graphviz-2.40.1\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1\n$ make &amp;&amp; make install"><pre class="notranslate">$ wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz\n$ tar zvxf graphviz.tar.gz\n$ <span class="pl-c1">cd</span> graphviz-2.40.1\n$ ./configure --prefix=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1\n$ make <span class="pl-k">&amp;&amp;</span> make install</pre></div>\n<p dir="auto">推荐把安装好的 graphviz 添加到环境变量，这样可以避免运行过程中出现：<strong>"pygraphviz/graphviz_wrap.c:2987:29: fatal error: graphviz/cgraph.h: No such file or directory"</strong> 无法找到头文件的异常。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="export PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\nexport LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\nexport C_INCLUDE_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include:$C_INCLUDE_PATH\nexport CPLUS_INCLUDE_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include:$CPLUS_INCLUDE_PATH"><pre class="notranslate"><span class="pl-k">export</span> PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig:<span class="pl-smi">$PKG_CONFIG_PATH</span>\n<span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n<span class="pl-k">export</span> C_INCLUDE_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include:<span class="pl-smi">$C_INCLUDE_PATH</span>\n<span class="pl-k">export</span> CPLUS_INCLUDE_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include:<span class="pl-smi">$CPLUS_INCLUDE_PATH</span></pre></div>\n<p dir="auto">如果 graphviz 添加到环境变量， <code class="notranslate">pygraphviz</code>\xa0的 python 包可以参考下面的方法安装：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/pip3 install --global-option=build_ext --global-option=&quot;-I/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include&quot; --global-option=&quot;-L/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib&quot; pygraphviz\n/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/site-packages/pip/_internal/commands/install.py:207: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\n  cmdoptions.check_install_build_global(options)\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install for pygraphviz ... done\nSuccessfully installed pygraphviz-1.5"><pre class="notranslate">$ /Bioinfo/Pipeline/SoftWare/Python-3.7.3/bin/pip3 install --global-option=build_ext --global-option=<span class="pl-s"><span class="pl-pds">"</span>-I/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include<span class="pl-pds">"</span></span> --global-option=<span class="pl-s"><span class="pl-pds">"</span>-L/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib<span class="pl-pds">"</span></span> pygraphviz\n/Bioinfo/Pipeline/SoftWare/Python-3.7.3/lib/python3.7/site-packages/pip/_internal/commands/install.py:207: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\n  cmdoptions.check_install_build_global(options)\nCollecting pygraphviz\n  Using cached https://files.pythonhosted.org/packages/7e/b1/d6d849ddaf6f11036f9980d433f383d4c13d1ebcfc3cd09bc845bda7e433/pygraphviz-1.5.zip\nInstalling collected packages: pygraphviz\n  Running setup.py install <span class="pl-k">for</span> pygraphviz ... <span class="pl-k">done</span>\nSuccessfully installed pygraphviz-1.5</pre></div>\n<h2 dir="auto">编译安装</h2>\n<p dir="auto">这里的编译安装，以 Python-3.11.6 为示例。</p>\n<p dir="auto">第一，下载 Python 源码，解压。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 官网下载地址 https://www.python.org/downloads\nwget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz\n\n# 解压到指定目录\ntar zvxf Python-3.11.6.tgz -C /usr/local/src"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 官网下载地址 https://www.python.org/downloads</span>\nwget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz\n\n<span class="pl-c"><span class="pl-c">#</span> 解压到指定目录</span>\ntar zvxf Python-3.11.6.tgz -C /usr/local/src</pre></div>\n<p dir="auto">第二，进入解压的源码路径，编译 Python 源码。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ export PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib/pkgconfig:$PKG_CONFIG_PATH\n$ export PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig:$PKG_CONFIG_PATH\n\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib64:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib:$LD_LIBRARY_PATH\n$ export LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib:$LD_LIBRARY_PATH\n\n$ export TCLTK_LIBS=&quot;-L/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6&quot;\n$ export TCLTK_CFLAGS=&quot;-I/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/include&quot;\n\n$ ./configure \\\n--enable-optimizations \\\n--prefix=/Bioinfo/Pipeline/SoftWare/Python-3.11.6 \\\n--with-openssl=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 \\\n--with-openssl-rpath=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib \\\nCC=/Bioinfo/Pipeline/SoftWare/gcc-7.3.0/bin/gcc \\\nCXX=/Bioinfo/Pipeline/SoftWare/gcc-7.3.0/bin/c++ \\\nLDFLAGS=&quot;-L/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib64 \\\n         -L/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib \\\n         -L/RiboBio/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib \\\n         -L/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib&quot; \\\nCPPFLAGS=&quot;-I/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include \\\n          -I/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include \\\n          -I/Bioinfo/Pipeline/SoftWare/gdbm-1.23/include&quot; \\\nPKG_CONFIG_PATH=&quot;/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib/pkgconfig: \\\n                 /Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig&quot;"><pre class="notranslate">$ <span class="pl-k">export</span> PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib/pkgconfig:<span class="pl-smi">$PKG_CONFIG_PATH</span>\n$ <span class="pl-k">export</span> PKG_CONFIG_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig:<span class="pl-smi">$PKG_CONFIG_PATH</span>\n\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib64:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n$ <span class="pl-k">export</span> LD_LIBRARY_PATH=/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib:<span class="pl-smi">$LD_LIBRARY_PATH</span>\n\n$ <span class="pl-k">export</span> TCLTK_LIBS=<span class="pl-s"><span class="pl-pds">"</span>-L/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6<span class="pl-pds">"</span></span>\n$ <span class="pl-k">export</span> TCLTK_CFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-I/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/include<span class="pl-pds">"</span></span>\n\n$ ./configure \\\n--enable-optimizations \\\n--prefix=/Bioinfo/Pipeline/SoftWare/Python-3.11.6 \\\n--with-openssl=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1 \\\n--with-openssl-rpath=/Bioinfo/Pipeline/SoftWare/openssl-1.1.1/lib \\\nCC=/Bioinfo/Pipeline/SoftWare/gcc-7.3.0/bin/gcc \\\nCXX=/Bioinfo/Pipeline/SoftWare/gcc-7.3.0/bin/c++ \\\nLDFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-L/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib64 <span class="pl-cce">\\</span></span>\n<span class="pl-s">         -L/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib <span class="pl-cce">\\</span></span>\n<span class="pl-s">         -L/RiboBio/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/lib <span class="pl-cce">\\</span></span>\n<span class="pl-s">         -L/Bioinfo/Pipeline/SoftWare/gdbm-1.23/lib<span class="pl-pds">"</span></span> \\\nCPPFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-I/Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/include <span class="pl-cce">\\</span></span>\n<span class="pl-s">          -I/Bioinfo/Pipeline/SoftWare/sqlite-3.36.0/include <span class="pl-cce">\\</span></span>\n<span class="pl-s">          -I/Bioinfo/Pipeline/SoftWare/gdbm-1.23/include<span class="pl-pds">"</span></span> \\\nPKG_CONFIG_PATH=<span class="pl-s"><span class="pl-pds">"</span>/Bioinfo/Pipeline/SoftWare/libffi-3.2.1/lib/pkgconfig: <span class="pl-cce">\\</span></span>\n<span class="pl-s">                 /Bioinfo/Pipeline/SoftWare/graphviz-2.40.1/lib/pkgconfig<span class="pl-pds">"</span></span></pre></div>\n<ul dir="auto">\n<li><code class="notranslate">--enable-optimizations</code>\xa0 是优化选项（LTO，PGO\xa0 等）加上这个 \xa0flag\xa0 编译后，性能有 \xa010%\xa0 左右的优化，但是这会明显的增加编译时间。建议使用这个参数；</li>\n<li><code class="notranslate">--prefix</code>\xa0 声明安装路径；</li>\n<li>安装多个 python 的版本，如果不开启<code class="notranslate">--enable-shared</code>，指定不同路径即可。当开启<code class="notranslate">--enable-shared</code> 时，默认只有一个版本的 python。</li>\n<li>Python 3 编译可以在 configure 或者环境变量中指定 OpenSSL 安装路径进行编译的方式解决 OpenSSL 依赖，否则 <code class="notranslate">make</code>\xa0 过程可能出错。</li>\n</ul>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make\n......\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime\n\n\nFailed to build these modules:\n_ctypes               _hashlib              _ssl\n\n\nCould not build the ssl module!\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host().\nLibreSSL 2.6.4 and earlier do not provide the necessary APIs, https://github.com/libressl-portable/portable/issues/381\n\n......"><pre class="notranslate">$ make\n......\nThe following modules found by <span class="pl-en">detect_modules</span>() <span class="pl-k">in</span> setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                <span class="pl-c1">pwd</span>\n<span class="pl-k">time</span>\n\n\nFailed to build these modules:\n_ctypes               _hashlib              _ssl\n\n\nCould not build the ssl module<span class="pl-k">!</span>\nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with <span class="pl-en">X509_VERIFY_PARAM_set1_host</span>().\nLibreSSL 2.6.4 and earlier <span class="pl-k">do</span> not provide the necessary APIs, https://github.com/libressl-portable/portable/issues/381\n\n......</pre></div>\n<ul dir="auto">\n<li><code class="notranslate">make</code>\xa0过程如果出现 <code class="notranslate">ModuleNotFoundError: No module named \'_ctypes\'</code>\xa0或者 <code class="notranslate">INFO: Could not locate ffi libs and/or headers</code>\xa0参考：<a href="https://groups.google.com/forum/#!topic/comp.lang.python/npv-wzmytzo" rel="nofollow">https://groups.google.com/forum/#!topic/comp.lang.python/npv-wzmytzo</a></li>\n</ul>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/15f07b69dd45d395fdff1ede20480e0eb43144325e08a253e39ec8b393a46a5c/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d4b376243654565476a66626c3155566476487977334a67385a6a2e706e67"><img src="https://camo.githubusercontent.com/15f07b69dd45d395fdff1ede20480e0eb43144325e08a253e39ec8b393a46a5c/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d4b376243654565476a66626c3155566476487977334a67385a6a2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmK7bCeEeGjfbl1UVdvHyw3Jg8Zj.png" style="max-width: 100%;"></a></p>\n<ul dir="auto">\n<li>对于低版本的 Python 如果指定\xa0<code class="notranslate">--with-openssl=DIR</code>\xa0依然无法解决 ssl 模块的问题，可以参考修改 Modules/Setup.dist 文件（默认这块是注释的，放开注释即可。这块功能是开启 SSL 模块，不然会出现安装完毕后，提示找不到 ssl 模块的错误）再执行 configure，修改内容如下：</li>\n</ul>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\nSSL=/usr/local/ssl\n_ssl _ssl.c \\\n    -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n    -L$(SSL)/lib -lssl -lcrypto"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> Socket module helper for SSL support; you must comment out the other</span>\n<span class="pl-c"><span class="pl-c">#</span> socket line above, and possibly edit the SSL variable:</span>\nSSL=/usr/local/ssl\n_ssl _ssl.c \\\n    -DUSE_SSL -I<span class="pl-s"><span class="pl-pds">$(</span>SSL<span class="pl-pds">)</span></span>/include -I<span class="pl-s"><span class="pl-pds">$(</span>SSL<span class="pl-pds">)</span></span>/include/openssl \\\n    -L<span class="pl-s"><span class="pl-pds">$(</span>SSL<span class="pl-pds">)</span></span>/lib -lssl -lcrypto</pre></div>\n<p dir="auto">第三，Makefile 生后依次在当前路径执行编译和安装命令。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="make &amp;&amp; make install"><pre class="notranslate">make <span class="pl-k">&amp;&amp;</span> make install</pre></div>\n<p dir="auto">第四，安装完成。以上命令执行完毕，且无报错的情况下，我们将默认 python 换将切换至 3.11.6（一般不建议替换，个人建议把自定义安装的 Python bin 路径添加到 PATH 环境变量即可）：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 替换系统自带的 python（不建议）\nmv /usr/bin/python /usr/bin/python2\nln -s /Bioinfo/Pipeline/SoftWare/Python-3.11.6/bin/python3 /usr/bin/python3\n\n# 添加新 Python 到 PATH 环境变量（建议）\necho &quot;export PATH=/Bioinfo/Pipeline/SoftWare/Python-3.11.6/bin:$PATH&quot; &gt;&gt;~/.bashrc\nsource ~/.bashrc"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 替换系统自带的 python（不建议）</span>\nmv /usr/bin/python /usr/bin/python2\nln -s /Bioinfo/Pipeline/SoftWare/Python-3.11.6/bin/python3 /usr/bin/python3\n\n<span class="pl-c"><span class="pl-c">#</span> 添加新 Python 到 PATH 环境变量（建议）</span>\n<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">"</span>export PATH=/Bioinfo/Pipeline/SoftWare/Python-3.11.6/bin:<span class="pl-smi">$PATH</span><span class="pl-pds">"</span></span> <span class="pl-k">&gt;&gt;</span>~/.bashrc\n<span class="pl-c1">source</span> <span class="pl-k">~</span>/.bashrc</pre></div>\n<p dir="auto">运行命令 <code class="notranslate">python -V</code>\xa0，查看是否出现 3.11.6\xa0 的版本，出现即为安装成功。</p>\n<h2 dir="auto">其他工具</h2>\n<p dir="auto">Python &gt;= 3.10 在安装时候，默认会同时安装 <strong>pip3</strong>！如果你的 python &lt; 3.10，可以参考下面的方法安装 pip。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 下载 setuptools 和 pip 安装程序\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 下载 setuptools 和 pip 安装程序</span>\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py</pre></div>\n<p dir="auto">至此，CentOS Linux release\xa06.5 下的 python-3.11.6\xa0 全部安装完成。如果在安装过程中出现其他的报错，建议把 error 关键信息直接复制到 Google 进行检索，参考其他人的解决方法。</p>\n<h2 dir="auto">其他异常与解决</h2>\n<h3 dir="auto">_bz2</h3>\n<ul dir="auto">\n<li>系统：CentOS Linux release 7.7.1908 (Core)</li>\n<li>GCC：gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</li>\n</ul>\n<p dir="auto">在 CentOS 7 中安装 Python-3.6.9 中发现 make 过程中一直提示："<strong>ModuleNotFoundError: No module named \'_bz2\'</strong>"，尽管 <code class="notranslate">sudo yum install bzip2 bzip2-devel</code>\xa0 已经安装了 bzip2 的依赖，问题还是不得其解。最后参考 stackoverflow 上的《Correctly building local python3, with bz2 support》，终于解决问题，下面记录一下。<br>\n<a href="https://stackoverflow.com/questions/51149227/correctly-building-local-python3-with-bz2-support" rel="nofollow">Correctly building local python3, with bz2 support</a></p>\n<p dir="auto"><strong>手动安装 bzip2：</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="wget https://nchc.dl.sourceforge.net/project/bzip2/bzip2-1.0.6.tar.gz\ntar zvxf bzip2-1.0.6.tar.gz\ncd bzip2-1.0.6\nmake -f Makefile_libbz2_so  # 这一步是生成 libbz2.so.1.0.6 的动态库文件\nmake\nmake install PREFIX=/usr/local/software/bzip2-1.0.6\ncp libbz2.so.1.0.6 /usr/local/software/bzip2-1.0.6/lib/"><pre class="notranslate">wget https://nchc.dl.sourceforge.net/project/bzip2/bzip2-1.0.6.tar.gz\ntar zvxf bzip2-1.0.6.tar.gz\n<span class="pl-c1">cd</span> bzip2-1.0.6\nmake -f Makefile_libbz2_so  <span class="pl-c"><span class="pl-c">#</span> 这一步是生成 libbz2.so.1.0.6 的动态库文件</span>\nmake\nmake install PREFIX=/usr/local/software/bzip2-1.0.6\ncp libbz2.so.1.0.6 /usr/local/software/bzip2-1.0.6/lib/</pre></div>\n<p dir="auto"><strong>几点说明：</strong></p>\n<ul dir="auto">\n<li>bzip2 的官网 \xa0<a href="http://www.bzip.org/" rel="nofollow">http://www.bzip.org/</a>\xa0 已经把 bzip2 的源码下载链接放到了 \xa0SourceForge，网络上一些从 \xa0<a href="http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz" rel="nofollow">http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz</a>\xa0 下载的做法已经失效。</li>\n<li><a href="https://sourceforge.net/projects/bzip2/files/" rel="nofollow">SourceForge</a> 上 bzip2 的最新版本还是 1.0.6（Last modified 2018-11-3），更高级版本的 bzip2 我也不知道是否存在，也不知道能不能用。</li>\n</ul>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bbd8349fc7fb2dd77f4e59bbe359165ae888a7f39f7ad747ca1638bbc1fc1321/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4676677847576c564a53784f43766758466f3942504f61334f446d352e706e67"><img src="https://camo.githubusercontent.com/bbd8349fc7fb2dd77f4e59bbe359165ae888a7f39f7ad747ca1638bbc1fc1321/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4676677847576c564a53784f43766758466f3942504f61334f446d352e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FvgxGWlVJSxOCvgXFo9BPOa3ODm5.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>编译安装 Python-3.6.9：</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n$ tar zvxf Python-3.6.9.tgz\n$ cd Python-3.6.9\n$ ./configure --enable-optimizations --prefix=/usr/local/software/python-3.6 CFLAGS=&quot;-I/usr/local/software/bzip2-1.0.6/include&quot; LDFLAGS=&quot;-L/usr/local/software/bzip2-1.0.6/lib&quot;\n$ make\n$ make install"><pre class="notranslate">$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n$ tar zvxf Python-3.6.9.tgz\n$ <span class="pl-c1">cd</span> Python-3.6.9\n$ ./configure --enable-optimizations --prefix=/usr/local/software/python-3.6 CFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-I/usr/local/software/bzip2-1.0.6/include<span class="pl-pds">"</span></span> LDFLAGS=<span class="pl-s"><span class="pl-pds">"</span>-L/usr/local/software/bzip2-1.0.6/lib<span class="pl-pds">"</span></span>\n$ make\n$ make install</pre></div>\n<ul dir="auto">\n<li>Python-3.6.9 中的 <code class="notranslate">./configure --help</code>\xa0中没有 <code class="notranslate">--with-openssl</code>\xa0参数！有点神奇，我也不知道原因。</li>\n<li>安装完成可以用 <code class="notranslate">from _bz2 import BZ2Compressor, BZ2Decompressor</code>\xa0测试一下 <code class="notranslate">_bz2</code>\xa0 是否可用。</li>\n</ul>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li>行者无疆-ITer,《<a href="https://www.cnblogs.com/ITer-jack/p/8305912.html" rel="nofollow">python2.7 源码编译安装</a>》, 博客园</li>\n<li>Scott Frazer,《<a href="https://stackoverflow.com/questions/23548188/how-do-i-compile-python-3-4-with-custom-openssl" rel="nofollow">How do I compile Python 3.4 with custom OpenSSL?</a>》, Stack Overflow</li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.5-Python'}]}, 'comments': {'nodes': []}}, {'title': 'Python 中 tkinter 源码安装使用与中文乱码', 'number': 12, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/12', 'createdAt': '2023-11-02T02:24:22Z', 'lastEditedAt': '2023-11-05T00:06:53Z', 'updatedAt': '2024-01-03T07:58:43Z', 'body': '主要是因为下面这两个原因，所以决定从源码编译安装去折腾一下 tkinter，以下是一些记录。\r\n\r\n## _tkinter not found\r\n\r\nPython 3 源码编译安装，执行 `make` 过程中提示 `_tkinter not found`，如下：\r\n```bash\r\n$ make\r\n......\r\nPython build finished successfully!\r\nThe necessary bits to build these optional modules were not found:\r\n_tkinter \r\n```\r\n\r\n## 中文乱码\r\n\r\n使用 Anaconda 3（conda 4.5.11）的 tkinter python 包（conda install -c conda-forge tk）开发 GUI 界面程序过程中，发现 UI 界面出现的中文 Unicode 乱码一直没办法解决。\r\n\r\n```python\r\n#-*- coding: utf-8 -*-\r\n\r\nimport sys\r\n\r\nfrom tkinter import *\r\ntop=Tk()\r\ntop.wm_title("菜单")\r\ntop.geometry("800x600+300+100") # 创建一个菜单项，类似于导航栏\r\nmenubar=Menu(top) # 创建菜单项\r\nfmenu1=Menu(top)\r\n# 如果该菜单时顶层菜单的一个菜单项，则它添加的是下拉菜单的菜单\r\nfor item in [\'新建文件\', \'打开文件\',\'结果保存\']:\r\n    fmenu1.add_command(label=item)\r\n\r\nfmenu2=Menu(top)\r\nfor item in [\'程序设置\',\'程序运行\']:\r\n    fmenu2.add_command(label=item)\r\n\r\nfmenu3=Menu(top)\r\nfor item in [\'使用教程\', \'版权信息\', \'检查更新\']:\r\n    fmenu3.add_command(label=item)\r\n\r\n# add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上\r\n# 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称\r\nmenubar.add_cascade(label=\'文件\', menu=fmenu1)\r\nmenubar.add_cascade(label="程序", menu=fmenu2)\r\nmenubar.add_cascade(label="帮助", menu=fmenu3)\r\n\r\n# 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单\r\ntop[\'menu\']=menubar\r\ntop.mainloop()\r\n```\r\n\r\n![](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fh22i487OzvY-uSXvAuFs6rEXXvu.png)\r\n\r\n我们也可以确认一下是不是 Tk 本身的问题：\r\n```\r\necho \'pack [button .h -text "Hello, World! 显示中文" -command exit]\' | wish\r\n```\r\n- 正常显示\r\n  ![TK 正常显示](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/tk-ok.png)\r\n\r\n- 中文乱码\r\n  ![TK 中文乱码](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/tk-error.png)\r\n\r\n**一些参考资料：**\r\n\r\n- Python 3.x 中文编码转换的问题：<https://bbs.bccn.net/thread-479560-1-1.html>\r\n- Python 2.6 Tk 中文乱码解決方法：<http://blogkrogh.blogspot.com/2011/03/python-26-tk.html>\r\n- tkinter 乱码，pyqt4 乱码：<http://aboutweb.lofter.com/post/11743e_6f7e4a5>\r\n\r\n上面几种方法测试后，问题依然存在。在 google 上一番搜索和来回测试之后，发现了几点信息：\r\n\r\n- 有人说，可能是 tcl/tk 安装不完整造成的。\r\n- tcl/tk 重装后需要对 Python 重新编译 tkinter 才能起作用。\r\n- conda install -c conda-forge tk，虽然没有任何报错，python2 中 import tkinter 也正常，但 conda 的软件安装就像一个黑盒子，无法确认 tcl/tk 是否完整安装。\r\n- python 的 PyPI 仓库中是没有 tkinter 包的，想要使用 `pip install tkinter` 卸载或者重装都是行不通的。\r\n- 网上也有人说可以使用 `yum install python3-tk/python-tk` 解决，但对于本人来说，没用。\r\n\r\n## 什么是 tcl, tk, tkinter\r\n\r\n> The\xa0[tkinter](https://docs.python.org/3.6/library/tkinter.html#module-tkinter)\xa0package (“Tk interface”) is the standard Python interface to the Tk GUI toolkit. Both Tk and\xa0[tkinter](https://docs.python.org/3.6/library/tkinter.html#module-tkinter)\xa0are available on most Unix platforms, as well as on Windows systems. (Tk itself is not part of Python; it is maintained at ActiveState.)\r\n>\r\n> Running\xa0`python\xa0-m\xa0tkinter`\xa0from the command line should open a window demonstrating a simple Tk interface, letting you know that\xa0[tkinter](https://docs.python.org/3.6/library/tkinter.html#module-tkinter)\xa0is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version.\r\n>\r\n> From <https://docs.python.org/3/library/tkinter.html>\r\n\r\nTcl 是"工具控制语言（Tool Control Language）"的缩写。Tk 是 Tcl "图形工具箱" 的扩展，它提供各种标准的 GUI 接口项，以利于迅速进行高级应用程序开发。\r\n\r\ntkinter 包（"Tk 接口"）是 Tk GUI 工具包的标准 Python 接口。 Tk 和 \xa0tkinter 在大多数 Unix 平台以及 Windows 系统上都可用（Tk 本身不是 Python 的一部分，它在 ActiveState 中维护）。您可以通过从命令行运行 \xa0`python -m\xa0tkinter`来检查 \xa0tkinter 是否已正确安装在系统上。如果已经安装该命令会打开一个简单的 Tk 界面，该界面除了让我们知道 tkinter 已正确安装，并且还显示安装了哪个版本的 Tcl/Tk，因此我们可以阅读特定于该版本的 Tcl/Tk 文档。\r\n\r\n![](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpWx6rSTKaQ1BXXPQJzchNbviKYd.png)\r\n\r\n如果 \xa0tkinter\xa0 没有安装，则会提示找不到该包（注意在 Python 2 中该包包名为 Tkinter，Python 3 中为 tkinter）：\r\n\r\n![](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FrRwzLFA1tIq2VfwS4p7i0dVLTjP.png)\r\n\r\n接下来我们将尝试在 Python 2/3 中安装 Tcl/Tk，并重新编译 Python 2/3，已完成 Tkinter 安装（tkinter 为 Python 的标准库，标准库的安装需要重新编译 Python ？）。\r\n\r\n## ActiveTcl 安装\r\n\r\nActiveTcl 是 ActiveState 发布的关于 Tcl/Tk 的发行版本，该发行版本包含了最新版本的 Tk 和 Tcl 程序，我们下载其免费的社区版本进行安装即可。\r\n\r\n参考下载链接：<https://www.activestate.com/products/activetcl/downloads/>\r\n参考安装教程：<https://tkdocs.com/tutorial/install.html>\r\n\r\n以下为 CentOS 6.5 下 **ActiveTcl-8.6.9** 的一些安装记录，仅作参考。\r\n\r\n```bash\r\n$ curl -fL "https://shenweiyan-generic.pkg.coding.net/btscl/activetcl/ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz?version=8.6.9.8609.2" -o ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\r\n$ tar zvxf ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\r\n$ cd ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d\r\n$ ./install.sh\r\n......\r\nCancel         [no]  => [RET]\r\nAccept License [yes] => \'A\' >>A\r\n\r\nPlease specify the installation directory.\r\nPath [/opt/ActiveTcl-8.6]: /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9\r\n\r\nPlease specify the directory for the demos.\r\nPath [/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/demos]:\r\n\r\nPlease specify the runtime installation directory.\r\n\r\nThis is the directory the applications will see as their installation directory\r\nwhen searching for packages and libraries, instead of the directory the files\r\nwere copied to. In most circumstances this is the same as the installation\r\ndirectory chosen before.\r\nPath [/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9]:\r\n\r\nPress return to begin installation\r\n     Installation Directory:  /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9\r\n     Demos Directory:         /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/demos\r\n     Runtime Directory:       See Installation Directory\r\nCancel => C\r\nNext   => [RET] >>\r\n\r\nInstalling ActiveTcl ...\r\n        Creating directory /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/share ...\r\n        Creating directory /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/share/man ...\r\n        ......\r\n\r\nPlease do not forget to extend your PATH and MANPATH variables to\r\nget access to the applications and manpages distributed with ActiveTcl.\r\n\r\nFor a csh or compatible perform\r\n    setenv PATH "/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\r\n\r\nFor a sh or similar perform\r\n    PATH="/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\r\n    export PATH\r\n\r\nSome shells (bash for example) allow\r\n    export PATH="/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\r\n\r\nSimilar changes are required for MANPATH\r\nFinish >>\r\n```\r\n\r\nActiveTcl 安装完成后，需要把 path 添加至环境变量（\\~/.bashrc）:\r\n```\r\nexport PATH="/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\r\n```\r\n\r\n## Tcl/Tk\r\n\r\n我们也可以直接去 <https://sourceforge.net/projects/tcl/files/Tcl/> 直接通过源码的方式去编译安装 Tcl/Tk，尤其是当你的系统版本比较低，需要低版本的 Tcl/Tk，这种方法会比较合适。\r\n\r\n以 tcl8.5.19-src.tar.gz/tk8.5.19-src.tar.gz 为例，下载完成后，直接解压，然后执行常规安装即可。\r\n```\r\ncd tcl8.5.19/unix\r\n./configure\r\nmake\r\nmake test\r\nmake install\r\n```\r\n\r\n## Python 重新编译安装\r\n\r\n参考：[What’s New In Python 3.11](https://docs.python.org/3/whatsnew/3.11.html) - doc.python.org\r\n\r\n> 📢 **注意：**\r\n>\r\n> 1. Python 3.11.x 起（如 Python-3.11.3）中的 `configure` 已经把 `--with-tcltk-includes`和`--with-tcltk-libs`这两个参数移除！并使用 `TCLTK_CFLAGS` 和 `TCLTK_LIBS` 替代！！！\r\n> 2. Python 3.10.x (及以下版本，如 Python-3.9.16) 以及 Python 2.x.x 在 `configure` 中 `--with-tcltk-includes`和`--with-tcltk-libs`都是有的，通过这两个参数可以解决 Tkinter 的问题！！！\r\n\r\n### Python 3\r\n\r\n这里以 Python-3.11.6 为例，参考 [Python 3.11.0 install doesn’t recognize homebrew Tcl/Tk due to --with-tcltk-libs, --with-tcltk-includes switches being removed from 3.11 - pyenv#2499](https://github.com/pyenv/pyenv/issues/2499)，在编译安装过程中使用 `TCLTK_CFLAGS` 和 `TCLTK_LIBS` 解决 `_tkinter` 缺失的问题。\r\n```\r\nexport TCLTK_LIBS="-L/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"\r\nexport TCLTK_CFLAGS="-I/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/include"\r\n\r\ncd Python-3.11.6\r\n/configure --prefix=/Bioinfo/Pipeline/SoftWare/python-3.11.6 ......\r\nmake && make install\r\n```\r\n\r\n![python3-confiigure-tkinter-yes](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/python-3-tkinter.png)\r\n\r\n### Python 2\r\n\r\n想要在 Python 2.7 安装 Tkinter，需要在编译过程中通过 `--with-tcltk-includes` 和 `--with-tcltk-libs` 中指定 ActiveTcl 的头文件以及库所在路径。\r\n\r\n如果在执行编译安装过程中，出现无法找到 libXss.so.1 共享动态库报错：\r\n\r\n```bash\r\n$ tar zvxf Python-2.7.15.tgz\r\n$ cd Python-2.7.15\r\n$ ./configure --prefix=/usr/local/software/python-2.7 --with-tcltk-includes=\'-I/usr/local/software/ActiveTcl-8.6/include\' --with-tcltk-libs=\'/usr/local/software/ActiveTcl-8.6/lib/libtcl8.6.so /usr/local/software/ActiveTcl-8.6/lib/libtk8.6.so\' --enable-optimizations\r\n$ make\r\n\r\n......\r\n\r\nwarning: building with the bundled copy of libffi is deprecated on this platform.  It will not be distributed with Python 3.7\r\n*** WARNING: renaming "_tkinter" since importing it failed: libXss.so.1: cannot open shared object file: No such file or directory\r\n\r\nPython build finished successfully!\r\nThe necessary bits to build these optional modules were not found:\r\n_dbm                  _gdbm\r\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\r\n\r\nThe following modules found by detect_modules() in setup.py, have been\r\nbuilt by the Makefile instead, as configured by the Setup files:\r\natexit                pwd                   time\r\n\r\nFollowing modules built successfully but were removed because they could not be imported:\r\n_tkinter\r\n\r\nrunning build_scripts\r\n\r\n......\r\n```\r\n\r\nCentOS 下请参考以下解决方法：\r\n```\r\n$ sudo yum install libXScrnSaver libXScrnSaver-devel\r\n```\r\n\r\n## 调用 Tkinter\r\n\r\nPython 2/3 重新编译完后，执行一下下面的命令即可显示 Tk 的 ui 界面，以及相应的 Tcl/Tk 版本。\r\n```\r\npython2 -m Tkinter   # python 2\r\npython3 -m tkinter   # python 3\r\n```\r\n![python2-m-Tkinter](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FgBtb14ZgZFZXIRhOdt6efbYz7fd.png)\r\n\r\n这时候，我们重新运行开头的 GUI 界面程序，可以看到中文已经正常显示：\r\n![](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqRHUXczPdHrQjFUXNQr_Cg_j2B4.png)\r\n\r\n## 参考资料\r\n\r\n- Download And Install Tcl: ActiveTcl，<https://www.activestate.com/products/activetcl/downloads/>\r\n- Installing Tk，<https://tkdocs.com/tutorial/install.html>\r\n- Python 下"No module named \\_tkinter"问题解决过程分析，<https://www.jianshu.com/p/0baa9657377f>\r\n- Python GUI 编程(Tkinter)文件对话框，<https://my.oschina.net/u/2245781/blog/661533>\r\n', 'bodyText': '主要是因为下面这两个原因，所以决定从源码编译安装去折腾一下 tkinter，以下是一些记录。\n_tkinter not found\nPython 3 源码编译安装，执行 make 过程中提示 _tkinter not found，如下：\n$ make\n......\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_tkinter \n中文乱码\n使用 Anaconda 3（conda 4.5.11）的 tkinter python 包（conda install -c conda-forge tk）开发 GUI 界面程序过程中，发现 UI 界面出现的中文 Unicode 乱码一直没办法解决。\n#-*- coding: utf-8 -*-\n\nimport sys\n\nfrom tkinter import *\ntop=Tk()\ntop.wm_title("菜单")\ntop.geometry("800x600+300+100") # 创建一个菜单项，类似于导航栏\nmenubar=Menu(top) # 创建菜单项\nfmenu1=Menu(top)\n# 如果该菜单时顶层菜单的一个菜单项，则它添加的是下拉菜单的菜单\nfor item in [\'新建文件\', \'打开文件\',\'结果保存\']:\n    fmenu1.add_command(label=item)\n\nfmenu2=Menu(top)\nfor item in [\'程序设置\',\'程序运行\']:\n    fmenu2.add_command(label=item)\n\nfmenu3=Menu(top)\nfor item in [\'使用教程\', \'版权信息\', \'检查更新\']:\n    fmenu3.add_command(label=item)\n\n# add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上\n# 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称\nmenubar.add_cascade(label=\'文件\', menu=fmenu1)\nmenubar.add_cascade(label="程序", menu=fmenu2)\nmenubar.add_cascade(label="帮助", menu=fmenu3)\n\n# 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单\ntop[\'menu\']=menubar\ntop.mainloop()\n\n我们也可以确认一下是不是 Tk 本身的问题：\necho \'pack [button .h -text "Hello, World! 显示中文" -command exit]\' | wish\n\n\n\n正常显示\n\n\n\n中文乱码\n\n\n\n一些参考资料：\n\nPython 3.x 中文编码转换的问题：https://bbs.bccn.net/thread-479560-1-1.html\nPython 2.6 Tk 中文乱码解決方法：http://blogkrogh.blogspot.com/2011/03/python-26-tk.html\ntkinter 乱码，pyqt4 乱码：http://aboutweb.lofter.com/post/11743e_6f7e4a5\n\n上面几种方法测试后，问题依然存在。在 google 上一番搜索和来回测试之后，发现了几点信息：\n\n有人说，可能是 tcl/tk 安装不完整造成的。\ntcl/tk 重装后需要对 Python 重新编译 tkinter 才能起作用。\nconda install -c conda-forge tk，虽然没有任何报错，python2 中 import tkinter 也正常，但 conda 的软件安装就像一个黑盒子，无法确认 tcl/tk 是否完整安装。\npython 的 PyPI 仓库中是没有 tkinter 包的，想要使用 pip install tkinter 卸载或者重装都是行不通的。\n网上也有人说可以使用 yum install python3-tk/python-tk 解决，但对于本人来说，没用。\n\n什么是 tcl, tk, tkinter\n\nThe\xa0tkinter\xa0package (“Tk interface”) is the standard Python interface to the Tk GUI toolkit. Both Tk and\xa0tkinter\xa0are available on most Unix platforms, as well as on Windows systems. (Tk itself is not part of Python; it is maintained at ActiveState.)\nRunning\xa0python\xa0-m\xa0tkinter\xa0from the command line should open a window demonstrating a simple Tk interface, letting you know that\xa0tkinter\xa0is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version.\nFrom https://docs.python.org/3/library/tkinter.html\n\nTcl 是"工具控制语言（Tool Control Language）"的缩写。Tk 是 Tcl "图形工具箱" 的扩展，它提供各种标准的 GUI 接口项，以利于迅速进行高级应用程序开发。\ntkinter 包（"Tk 接口"）是 Tk GUI 工具包的标准 Python 接口。 Tk 和 \xa0tkinter 在大多数 Unix 平台以及 Windows 系统上都可用（Tk 本身不是 Python 的一部分，它在 ActiveState 中维护）。您可以通过从命令行运行 \xa0python -m\xa0tkinter来检查 \xa0tkinter 是否已正确安装在系统上。如果已经安装该命令会打开一个简单的 Tk 界面，该界面除了让我们知道 tkinter 已正确安装，并且还显示安装了哪个版本的 Tcl/Tk，因此我们可以阅读特定于该版本的 Tcl/Tk 文档。\n\n如果 \xa0tkinter\xa0 没有安装，则会提示找不到该包（注意在 Python 2 中该包包名为 Tkinter，Python 3 中为 tkinter）：\n\n接下来我们将尝试在 Python 2/3 中安装 Tcl/Tk，并重新编译 Python 2/3，已完成 Tkinter 安装（tkinter 为 Python 的标准库，标准库的安装需要重新编译 Python ？）。\nActiveTcl 安装\nActiveTcl 是 ActiveState 发布的关于 Tcl/Tk 的发行版本，该发行版本包含了最新版本的 Tk 和 Tcl 程序，我们下载其免费的社区版本进行安装即可。\n参考下载链接：https://www.activestate.com/products/activetcl/downloads/\n参考安装教程：https://tkdocs.com/tutorial/install.html\n以下为 CentOS 6.5 下 ActiveTcl-8.6.9 的一些安装记录，仅作参考。\n$ curl -fL "https://shenweiyan-generic.pkg.coding.net/btscl/activetcl/ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz?version=8.6.9.8609.2" -o ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ tar zvxf ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ cd ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d\n$ ./install.sh\n......\nCancel         [no]  => [RET]\nAccept License [yes] => \'A\' >>A\n\nPlease specify the installation directory.\nPath [/opt/ActiveTcl-8.6]: /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9\n\nPlease specify the directory for the demos.\nPath [/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/demos]:\n\nPlease specify the runtime installation directory.\n\nThis is the directory the applications will see as their installation directory\nwhen searching for packages and libraries, instead of the directory the files\nwere copied to. In most circumstances this is the same as the installation\ndirectory chosen before.\nPath [/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9]:\n\nPress return to begin installation\n     Installation Directory:  /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9\n     Demos Directory:         /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/demos\n     Runtime Directory:       See Installation Directory\nCancel => C\nNext   => [RET] >>\n\nInstalling ActiveTcl ...\n        Creating directory /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/share ...\n        Creating directory /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/share/man ...\n        ......\n\nPlease do not forget to extend your PATH and MANPATH variables to\nget access to the applications and manpages distributed with ActiveTcl.\n\nFor a csh or compatible perform\n    setenv PATH "/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\n\nFor a sh or similar perform\n    PATH="/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\n    export PATH\n\nSome shells (bash for example) allow\n    export PATH="/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\n\nSimilar changes are required for MANPATH\nFinish >>\nActiveTcl 安装完成后，需要把 path 添加至环境变量（~/.bashrc）:\nexport PATH="/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\n\nTcl/Tk\n我们也可以直接去 https://sourceforge.net/projects/tcl/files/Tcl/ 直接通过源码的方式去编译安装 Tcl/Tk，尤其是当你的系统版本比较低，需要低版本的 Tcl/Tk，这种方法会比较合适。\n以 tcl8.5.19-src.tar.gz/tk8.5.19-src.tar.gz 为例，下载完成后，直接解压，然后执行常规安装即可。\ncd tcl8.5.19/unix\n./configure\nmake\nmake test\nmake install\n\nPython 重新编译安装\n参考：What’s New In Python 3.11 - doc.python.org\n\n📢 注意：\n\nPython 3.11.x 起（如 Python-3.11.3）中的 configure 已经把 --with-tcltk-includes和--with-tcltk-libs这两个参数移除！并使用 TCLTK_CFLAGS 和 TCLTK_LIBS 替代！！！\nPython 3.10.x (及以下版本，如 Python-3.9.16) 以及 Python 2.x.x 在 configure 中 --with-tcltk-includes和--with-tcltk-libs都是有的，通过这两个参数可以解决 Tkinter 的问题！！！\n\n\nPython 3\n这里以 Python-3.11.6 为例，参考 Python 3.11.0 install doesn’t recognize homebrew Tcl/Tk due to --with-tcltk-libs, --with-tcltk-includes switches being removed from 3.11 - pyenv#2499，在编译安装过程中使用 TCLTK_CFLAGS 和 TCLTK_LIBS 解决 _tkinter 缺失的问题。\nexport TCLTK_LIBS="-L/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"\nexport TCLTK_CFLAGS="-I/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/include"\n\ncd Python-3.11.6\n/configure --prefix=/Bioinfo/Pipeline/SoftWare/python-3.11.6 ......\nmake && make install\n\n\nPython 2\n想要在 Python 2.7 安装 Tkinter，需要在编译过程中通过 --with-tcltk-includes 和 --with-tcltk-libs 中指定 ActiveTcl 的头文件以及库所在路径。\n如果在执行编译安装过程中，出现无法找到 libXss.so.1 共享动态库报错：\n$ tar zvxf Python-2.7.15.tgz\n$ cd Python-2.7.15\n$ ./configure --prefix=/usr/local/software/python-2.7 --with-tcltk-includes=\'-I/usr/local/software/ActiveTcl-8.6/include\' --with-tcltk-libs=\'/usr/local/software/ActiveTcl-8.6/lib/libtcl8.6.so /usr/local/software/ActiveTcl-8.6/lib/libtk8.6.so\' --enable-optimizations\n$ make\n\n......\n\nwarning: building with the bundled copy of libffi is deprecated on this platform.  It will not be distributed with Python 3.7\n*** WARNING: renaming "_tkinter" since importing it failed: libXss.so.1: cannot open shared object file: No such file or directory\n\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_dbm                  _gdbm\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\n\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\natexit                pwd                   time\n\nFollowing modules built successfully but were removed because they could not be imported:\n_tkinter\n\nrunning build_scripts\n\n......\nCentOS 下请参考以下解决方法：\n$ sudo yum install libXScrnSaver libXScrnSaver-devel\n\n调用 Tkinter\nPython 2/3 重新编译完后，执行一下下面的命令即可显示 Tk 的 ui 界面，以及相应的 Tcl/Tk 版本。\npython2 -m Tkinter   # python 2\npython3 -m tkinter   # python 3\n\n\n这时候，我们重新运行开头的 GUI 界面程序，可以看到中文已经正常显示：\n\n参考资料\n\nDownload And Install Tcl: ActiveTcl，https://www.activestate.com/products/activetcl/downloads/\nInstalling Tk，https://tkdocs.com/tutorial/install.html\nPython 下"No module named _tkinter"问题解决过程分析，https://www.jianshu.com/p/0baa9657377f\nPython GUI 编程(Tkinter)文件对话框，https://my.oschina.net/u/2245781/blog/661533', 'bodyHTML': '<p dir="auto">主要是因为下面这两个原因，所以决定从源码编译安装去折腾一下 tkinter，以下是一些记录。</p>\n<h2 dir="auto">_tkinter not found</h2>\n<p dir="auto">Python 3 源码编译安装，执行 <code class="notranslate">make</code> 过程中提示 <code class="notranslate">_tkinter not found</code>，如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make\n......\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_tkinter "><pre class="notranslate">$ make\n......\nPython build finished successfully<span class="pl-k">!</span>\nThe necessary bits to build these optional modules were not found:\n_tkinter </pre></div>\n<h2 dir="auto">中文乱码</h2>\n<p dir="auto">使用 Anaconda 3（conda 4.5.11）的 tkinter python 包（conda install -c conda-forge tk）开发 GUI 界面程序过程中，发现 UI 界面出现的中文 Unicode 乱码一直没办法解决。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#-*- coding: utf-8 -*-\n\nimport sys\n\nfrom tkinter import *\ntop=Tk()\ntop.wm_title(&quot;菜单&quot;)\ntop.geometry(&quot;800x600+300+100&quot;) # 创建一个菜单项，类似于导航栏\nmenubar=Menu(top) # 创建菜单项\nfmenu1=Menu(top)\n# 如果该菜单时顶层菜单的一个菜单项，则它添加的是下拉菜单的菜单\nfor item in [\'新建文件\', \'打开文件\',\'结果保存\']:\n    fmenu1.add_command(label=item)\n\nfmenu2=Menu(top)\nfor item in [\'程序设置\',\'程序运行\']:\n    fmenu2.add_command(label=item)\n\nfmenu3=Menu(top)\nfor item in [\'使用教程\', \'版权信息\', \'检查更新\']:\n    fmenu3.add_command(label=item)\n\n# add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上\n# 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称\nmenubar.add_cascade(label=\'文件\', menu=fmenu1)\nmenubar.add_cascade(label=&quot;程序&quot;, menu=fmenu2)\nmenubar.add_cascade(label=&quot;帮助&quot;, menu=fmenu3)\n\n# 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单\ntop[\'menu\']=menubar\ntop.mainloop()"><pre class="notranslate"><span class="pl-c">#-*- coding: utf-8 -*-</span>\n\n<span class="pl-k">import</span> <span class="pl-s1">sys</span>\n\n<span class="pl-k">from</span> <span class="pl-s1">tkinter</span> <span class="pl-k">import</span> <span class="pl-c1">*</span>\n<span class="pl-s1">top</span><span class="pl-c1">=</span><span class="pl-v">Tk</span>()\n<span class="pl-s1">top</span>.<span class="pl-en">wm_title</span>(<span class="pl-s">"菜单"</span>)\n<span class="pl-s1">top</span>.<span class="pl-en">geometry</span>(<span class="pl-s">"800x600+300+100"</span>) <span class="pl-c"># 创建一个菜单项，类似于导航栏</span>\n<span class="pl-s1">menubar</span><span class="pl-c1">=</span><span class="pl-v">Menu</span>(<span class="pl-s1">top</span>) <span class="pl-c"># 创建菜单项</span>\n<span class="pl-s1">fmenu1</span><span class="pl-c1">=</span><span class="pl-v">Menu</span>(<span class="pl-s1">top</span>)\n<span class="pl-c"># 如果该菜单时顶层菜单的一个菜单项，则它添加的是下拉菜单的菜单</span>\n<span class="pl-k">for</span> <span class="pl-s1">item</span> <span class="pl-c1">in</span> [<span class="pl-s">\'新建文件\'</span>, <span class="pl-s">\'打开文件\'</span>,<span class="pl-s">\'结果保存\'</span>]:\n    <span class="pl-s1">fmenu1</span>.<span class="pl-en">add_command</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s1">item</span>)\n\n<span class="pl-s1">fmenu2</span><span class="pl-c1">=</span><span class="pl-v">Menu</span>(<span class="pl-s1">top</span>)\n<span class="pl-k">for</span> <span class="pl-s1">item</span> <span class="pl-c1">in</span> [<span class="pl-s">\'程序设置\'</span>,<span class="pl-s">\'程序运行\'</span>]:\n    <span class="pl-s1">fmenu2</span>.<span class="pl-en">add_command</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s1">item</span>)\n\n<span class="pl-s1">fmenu3</span><span class="pl-c1">=</span><span class="pl-v">Menu</span>(<span class="pl-s1">top</span>)\n<span class="pl-k">for</span> <span class="pl-s1">item</span> <span class="pl-c1">in</span> [<span class="pl-s">\'使用教程\'</span>, <span class="pl-s">\'版权信息\'</span>, <span class="pl-s">\'检查更新\'</span>]:\n    <span class="pl-s1">fmenu3</span>.<span class="pl-en">add_command</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s1">item</span>)\n\n<span class="pl-c"># add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上</span>\n<span class="pl-c"># 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称</span>\n<span class="pl-s1">menubar</span>.<span class="pl-en">add_cascade</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s">\'文件\'</span>, <span class="pl-s1">menu</span><span class="pl-c1">=</span><span class="pl-s1">fmenu1</span>)\n<span class="pl-s1">menubar</span>.<span class="pl-en">add_cascade</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s">"程序"</span>, <span class="pl-s1">menu</span><span class="pl-c1">=</span><span class="pl-s1">fmenu2</span>)\n<span class="pl-s1">menubar</span>.<span class="pl-en">add_cascade</span>(<span class="pl-s1">label</span><span class="pl-c1">=</span><span class="pl-s">"帮助"</span>, <span class="pl-s1">menu</span><span class="pl-c1">=</span><span class="pl-s1">fmenu3</span>)\n\n<span class="pl-c"># 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单</span>\n<span class="pl-s1">top</span>[<span class="pl-s">\'menu\'</span>]<span class="pl-c1">=</span><span class="pl-s1">menubar</span>\n<span class="pl-s1">top</span>.<span class="pl-en">mainloop</span>()</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/152ea3ef695890a4e0b35e4dad21dabf7757a518521d5229318011fbc05ede8c/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46683232693438374f7a76592d7553587641754673367245585876752e706e67"><img src="https://camo.githubusercontent.com/152ea3ef695890a4e0b35e4dad21dabf7757a518521d5229318011fbc05ede8c/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46683232693438374f7a76592d7553587641754673367245585876752e706e67" alt="" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fh22i487OzvY-uSXvAuFs6rEXXvu.png" style="max-width: 100%;"></a></p>\n<p dir="auto">我们也可以确认一下是不是 Tk 本身的问题：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="echo \'pack [button .h -text &quot;Hello, World! 显示中文&quot; -command exit]\' | wish"><pre class="notranslate"><code class="notranslate">echo \'pack [button .h -text "Hello, World! 显示中文" -command exit]\' | wish\n</code></pre></div>\n<ul dir="auto">\n<li>\n<p dir="auto">正常显示<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/861b96b2b61ef6e52f6a070113a9527a7393b7118169f55317894daeb8a8736d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f746b2d6f6b2e706e67"><img src="https://camo.githubusercontent.com/861b96b2b61ef6e52f6a070113a9527a7393b7118169f55317894daeb8a8736d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f746b2d6f6b2e706e67" alt="TK 正常显示" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/tk-ok.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">中文乱码<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5cfe121b08fca02a7eb1b1f36c05e479a3fc7668f937acc0bb1e266dacf14dc1/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f746b2d6572726f722e706e67"><img src="https://camo.githubusercontent.com/5cfe121b08fca02a7eb1b1f36c05e479a3fc7668f937acc0bb1e266dacf14dc1/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f746b2d6572726f722e706e67" alt="TK 中文乱码" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/tk-error.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n<p dir="auto"><strong>一些参考资料：</strong></p>\n<ul dir="auto">\n<li>Python 3.x 中文编码转换的问题：<a href="https://bbs.bccn.net/thread-479560-1-1.html" rel="nofollow">https://bbs.bccn.net/thread-479560-1-1.html</a></li>\n<li>Python 2.6 Tk 中文乱码解決方法：<a href="http://blogkrogh.blogspot.com/2011/03/python-26-tk.html" rel="nofollow">http://blogkrogh.blogspot.com/2011/03/python-26-tk.html</a></li>\n<li>tkinter 乱码，pyqt4 乱码：<a href="http://aboutweb.lofter.com/post/11743e_6f7e4a5" rel="nofollow">http://aboutweb.lofter.com/post/11743e_6f7e4a5</a></li>\n</ul>\n<p dir="auto">上面几种方法测试后，问题依然存在。在 google 上一番搜索和来回测试之后，发现了几点信息：</p>\n<ul dir="auto">\n<li>有人说，可能是 tcl/tk 安装不完整造成的。</li>\n<li>tcl/tk 重装后需要对 Python 重新编译 tkinter 才能起作用。</li>\n<li>conda install -c conda-forge tk，虽然没有任何报错，python2 中 import tkinter 也正常，但 conda 的软件安装就像一个黑盒子，无法确认 tcl/tk 是否完整安装。</li>\n<li>python 的 PyPI 仓库中是没有 tkinter 包的，想要使用 <code class="notranslate">pip install tkinter</code> 卸载或者重装都是行不通的。</li>\n<li>网上也有人说可以使用 <code class="notranslate">yum install python3-tk/python-tk</code> 解决，但对于本人来说，没用。</li>\n</ul>\n<h2 dir="auto">什么是 tcl, tk, tkinter</h2>\n<blockquote>\n<p dir="auto">The\xa0<a href="https://docs.python.org/3.6/library/tkinter.html#module-tkinter" rel="nofollow">tkinter</a>\xa0package (“Tk interface”) is the standard Python interface to the Tk GUI toolkit. Both Tk and\xa0<a href="https://docs.python.org/3.6/library/tkinter.html#module-tkinter" rel="nofollow">tkinter</a>\xa0are available on most Unix platforms, as well as on Windows systems. (Tk itself is not part of Python; it is maintained at ActiveState.)</p>\n<p dir="auto">Running\xa0<code class="notranslate">python\xa0-m\xa0tkinter</code>\xa0from the command line should open a window demonstrating a simple Tk interface, letting you know that\xa0<a href="https://docs.python.org/3.6/library/tkinter.html#module-tkinter" rel="nofollow">tkinter</a>\xa0is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version.</p>\n<p dir="auto">From <a href="https://docs.python.org/3/library/tkinter.html" rel="nofollow">https://docs.python.org/3/library/tkinter.html</a></p>\n</blockquote>\n<p dir="auto">Tcl 是"工具控制语言（Tool Control Language）"的缩写。Tk 是 Tcl "图形工具箱" 的扩展，它提供各种标准的 GUI 接口项，以利于迅速进行高级应用程序开发。</p>\n<p dir="auto">tkinter 包（"Tk 接口"）是 Tk GUI 工具包的标准 Python 接口。 Tk 和 \xa0tkinter 在大多数 Unix 平台以及 Windows 系统上都可用（Tk 本身不是 Python 的一部分，它在 ActiveState 中维护）。您可以通过从命令行运行 \xa0<code class="notranslate">python -m\xa0tkinter</code>来检查 \xa0tkinter 是否已正确安装在系统上。如果已经安装该命令会打开一个简单的 Tk 界面，该界面除了让我们知道 tkinter 已正确安装，并且还显示安装了哪个版本的 Tcl/Tk，因此我们可以阅读特定于该版本的 Tcl/Tk 文档。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/719e388b2250a02c9657b930e7990ce84cc487d154a699cc2a8fed5235519d76/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46705778367253544b61513142585850514a7a63684e6276694b59642e706e67"><img src="https://camo.githubusercontent.com/719e388b2250a02c9657b930e7990ce84cc487d154a699cc2a8fed5235519d76/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46705778367253544b61513142585850514a7a63684e6276694b59642e706e67" alt="" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpWx6rSTKaQ1BXXPQJzchNbviKYd.png" style="max-width: 100%;"></a></p>\n<p dir="auto">如果 \xa0tkinter\xa0 没有安装，则会提示找不到该包（注意在 Python 2 中该包包名为 Tkinter，Python 3 中为 tkinter）：</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c649dd87060667e9b26de25f3d92a047e9ddc1d04469e05026d6be69830ecb83/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467252777a4c4641317449713256667753347037693064564c546a502e706e67"><img src="https://camo.githubusercontent.com/c649dd87060667e9b26de25f3d92a047e9ddc1d04469e05026d6be69830ecb83/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467252777a4c4641317449713256667753347037693064564c546a502e706e67" alt="" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FrRwzLFA1tIq2VfwS4p7i0dVLTjP.png" style="max-width: 100%;"></a></p>\n<p dir="auto">接下来我们将尝试在 Python 2/3 中安装 Tcl/Tk，并重新编译 Python 2/3，已完成 Tkinter 安装（tkinter 为 Python 的标准库，标准库的安装需要重新编译 Python ？）。</p>\n<h2 dir="auto">ActiveTcl 安装</h2>\n<p dir="auto">ActiveTcl 是 ActiveState 发布的关于 Tcl/Tk 的发行版本，该发行版本包含了最新版本的 Tk 和 Tcl 程序，我们下载其免费的社区版本进行安装即可。</p>\n<p dir="auto">参考下载链接：<a href="https://www.activestate.com/products/activetcl/downloads/" rel="nofollow">https://www.activestate.com/products/activetcl/downloads/</a><br>\n参考安装教程：<a href="https://tkdocs.com/tutorial/install.html" rel="nofollow">https://tkdocs.com/tutorial/install.html</a></p>\n<p dir="auto">以下为 CentOS 6.5 下 <strong>ActiveTcl-8.6.9</strong> 的一些安装记录，仅作参考。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ curl -fL &quot;https://shenweiyan-generic.pkg.coding.net/btscl/activetcl/ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz?version=8.6.9.8609.2&quot; -o ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ tar zvxf ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ cd ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d\n$ ./install.sh\n......\nCancel         [no]  =&gt; [RET]\nAccept License [yes] =&gt; \'A\' &gt;&gt;A\n\nPlease specify the installation directory.\nPath [/opt/ActiveTcl-8.6]: /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9\n\nPlease specify the directory for the demos.\nPath [/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/demos]:\n\nPlease specify the runtime installation directory.\n\nThis is the directory the applications will see as their installation directory\nwhen searching for packages and libraries, instead of the directory the files\nwere copied to. In most circumstances this is the same as the installation\ndirectory chosen before.\nPath [/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9]:\n\nPress return to begin installation\n     Installation Directory:  /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9\n     Demos Directory:         /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/demos\n     Runtime Directory:       See Installation Directory\nCancel =&gt; C\nNext   =&gt; [RET] &gt;&gt;\n\nInstalling ActiveTcl ...\n        Creating directory /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/share ...\n        Creating directory /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/share/man ...\n        ......\n\nPlease do not forget to extend your PATH and MANPATH variables to\nget access to the applications and manpages distributed with ActiveTcl.\n\nFor a csh or compatible perform\n    setenv PATH &quot;/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH&quot;\n\nFor a sh or similar perform\n    PATH=&quot;/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH&quot;\n    export PATH\n\nSome shells (bash for example) allow\n    export PATH=&quot;/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH&quot;\n\nSimilar changes are required for MANPATH\nFinish &gt;&gt;"><pre class="notranslate">$ curl -fL <span class="pl-s"><span class="pl-pds">"</span>https://shenweiyan-generic.pkg.coding.net/btscl/activetcl/ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz?version=8.6.9.8609.2<span class="pl-pds">"</span></span> -o ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ tar zvxf ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d.tar.gz\n$ <span class="pl-c1">cd</span> ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d\n$ ./install.sh\n......\nCancel         [no]  =<span class="pl-k">&gt;</span> [RET]\nAccept License [yes] =<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">\'</span>A<span class="pl-pds">\'</span></span> <span class="pl-k">&gt;&gt;</span>A\n\nPlease specify the installation directory.\nPath [/opt/ActiveTcl-8.6]: /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9\n\nPlease specify the directory <span class="pl-k">for</span> the demos.\nPath [/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/demos]:\n\nPlease specify the runtime installation directory.\n\nThis is the directory the applications will see as their installation directory\nwhen searching <span class="pl-k">for</span> packages and libraries, instead of the directory the files\nwere copied to. In most circumstances this is the same as the installation\ndirectory chosen before.\nPath [/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9]:\n\nPress <span class="pl-k">return</span> to begin installation\n     Installation Directory:  /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9\n     Demos Directory:         /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/demos\n     Runtime Directory:       See Installation Directory\nCancel =<span class="pl-k">&gt;</span> C\nNext   =<span class="pl-k">&gt;</span> [RET] <span class="pl-k">&gt;&gt;</span>\n\nInstalling ActiveTcl ...\n        Creating directory /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/share ...\n        Creating directory /Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/share/man ...\n        ......\n\nPlease <span class="pl-k">do</span> not forget to extend your PATH and MANPATH variables to\nget access to the applications and manpages distributed with ActiveTcl.\n\nFor a csh or compatible perform\n    setenv PATH <span class="pl-s"><span class="pl-pds">"</span>/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:<span class="pl-smi">$PATH</span><span class="pl-pds">"</span></span>\n\nFor a sh or similar perform\n    PATH=<span class="pl-s"><span class="pl-pds">"</span>/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:<span class="pl-smi">$PATH</span><span class="pl-pds">"</span></span>\n    <span class="pl-k">export</span> PATH\n\nSome shells (bash <span class="pl-k">for</span> example) allow\n    <span class="pl-k">export</span> PATH=<span class="pl-s"><span class="pl-pds">"</span>/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:<span class="pl-smi">$PATH</span><span class="pl-pds">"</span></span>\n\nSimilar changes are required <span class="pl-k">for</span> MANPATH\nFinish <span class="pl-k">&gt;&gt;</span></pre></div>\n<p dir="auto">ActiveTcl 安装完成后，需要把 path 添加至环境变量（~/.bashrc）:</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export PATH=&quot;/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH&quot;"><pre class="notranslate"><code class="notranslate">export PATH="/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/bin:$PATH"\n</code></pre></div>\n<h2 dir="auto">Tcl/Tk</h2>\n<p dir="auto">我们也可以直接去 <a href="https://sourceforge.net/projects/tcl/files/Tcl/" rel="nofollow">https://sourceforge.net/projects/tcl/files/Tcl/</a> 直接通过源码的方式去编译安装 Tcl/Tk，尤其是当你的系统版本比较低，需要低版本的 Tcl/Tk，这种方法会比较合适。</p>\n<p dir="auto">以 tcl8.5.19-src.tar.gz/tk8.5.19-src.tar.gz 为例，下载完成后，直接解压，然后执行常规安装即可。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="cd tcl8.5.19/unix\n./configure\nmake\nmake test\nmake install"><pre class="notranslate"><code class="notranslate">cd tcl8.5.19/unix\n./configure\nmake\nmake test\nmake install\n</code></pre></div>\n<h2 dir="auto">Python 重新编译安装</h2>\n<p dir="auto">参考：<a href="https://docs.python.org/3/whatsnew/3.11.html" rel="nofollow">What’s New In Python 3.11</a> - doc.python.org</p>\n<blockquote>\n<p dir="auto">📢 <strong>注意：</strong></p>\n<ol dir="auto">\n<li>Python 3.11.x 起（如 Python-3.11.3）中的 <code class="notranslate">configure</code> 已经把 <code class="notranslate">--with-tcltk-includes</code>和<code class="notranslate">--with-tcltk-libs</code>这两个参数移除！并使用 <code class="notranslate">TCLTK_CFLAGS</code> 和 <code class="notranslate">TCLTK_LIBS</code> 替代！！！</li>\n<li>Python 3.10.x (及以下版本，如 Python-3.9.16) 以及 Python 2.x.x 在 <code class="notranslate">configure</code> 中 <code class="notranslate">--with-tcltk-includes</code>和<code class="notranslate">--with-tcltk-libs</code>都是有的，通过这两个参数可以解决 Tkinter 的问题！！！</li>\n</ol>\n</blockquote>\n<h3 dir="auto">Python 3</h3>\n<p dir="auto">这里以 Python-3.11.6 为例，参考 <a href="https://github.com/pyenv/pyenv/issues/2499" data-hovercard-type="issue" data-hovercard-url="/pyenv/pyenv/issues/2499/hovercard">Python 3.11.0 install doesn’t recognize homebrew Tcl/Tk due to --with-tcltk-libs, --with-tcltk-includes switches being removed from 3.11 - pyenv#2499</a>，在编译安装过程中使用 <code class="notranslate">TCLTK_CFLAGS</code> 和 <code class="notranslate">TCLTK_LIBS</code> 解决 <code class="notranslate">_tkinter</code> 缺失的问题。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export TCLTK_LIBS=&quot;-L/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6&quot;\nexport TCLTK_CFLAGS=&quot;-I/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/include&quot;\n\ncd Python-3.11.6\n/configure --prefix=/Bioinfo/Pipeline/SoftWare/python-3.11.6 ......\nmake &amp;&amp; make install"><pre class="notranslate"><code class="notranslate">export TCLTK_LIBS="-L/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/lib -ltcl8.6 -ltk8.6"\nexport TCLTK_CFLAGS="-I/Bioinfo/Pipeline/SoftWare/ActiveTcl-8.6.9/include"\n\ncd Python-3.11.6\n/configure --prefix=/Bioinfo/Pipeline/SoftWare/python-3.11.6 ......\nmake &amp;&amp; make install\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e9a5d2d6ca452487da2581cf0d1dc9de85423efb629068816306e8b3b3cad0cc/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f707974686f6e2d332d746b696e7465722e706e67"><img src="https://camo.githubusercontent.com/e9a5d2d6ca452487da2581cf0d1dc9de85423efb629068816306e8b3b3cad0cc/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f707974686f6e2d332d746b696e7465722e706e67" alt="python3-confiigure-tkinter-yes" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/python-3-tkinter.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">Python 2</h3>\n<p dir="auto">想要在 Python 2.7 安装 Tkinter，需要在编译过程中通过 <code class="notranslate">--with-tcltk-includes</code> 和 <code class="notranslate">--with-tcltk-libs</code> 中指定 ActiveTcl 的头文件以及库所在路径。</p>\n<p dir="auto">如果在执行编译安装过程中，出现无法找到 libXss.so.1 共享动态库报错：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ tar zvxf Python-2.7.15.tgz\n$ cd Python-2.7.15\n$ ./configure --prefix=/usr/local/software/python-2.7 --with-tcltk-includes=\'-I/usr/local/software/ActiveTcl-8.6/include\' --with-tcltk-libs=\'/usr/local/software/ActiveTcl-8.6/lib/libtcl8.6.so /usr/local/software/ActiveTcl-8.6/lib/libtk8.6.so\' --enable-optimizations\n$ make\n\n......\n\nwarning: building with the bundled copy of libffi is deprecated on this platform.  It will not be distributed with Python 3.7\n*** WARNING: renaming &quot;_tkinter&quot; since importing it failed: libXss.so.1: cannot open shared object file: No such file or directory\n\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_dbm                  _gdbm\nTo find the necessary bits, look in setup.py in detect_modules() for the module\'s name.\n\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\natexit                pwd                   time\n\nFollowing modules built successfully but were removed because they could not be imported:\n_tkinter\n\nrunning build_scripts\n\n......"><pre class="notranslate">$ tar zvxf Python-2.7.15.tgz\n$ <span class="pl-c1">cd</span> Python-2.7.15\n$ ./configure --prefix=/usr/local/software/python-2.7 --with-tcltk-includes=<span class="pl-s"><span class="pl-pds">\'</span>-I/usr/local/software/ActiveTcl-8.6/include<span class="pl-pds">\'</span></span> --with-tcltk-libs=<span class="pl-s"><span class="pl-pds">\'</span>/usr/local/software/ActiveTcl-8.6/lib/libtcl8.6.so /usr/local/software/ActiveTcl-8.6/lib/libtk8.6.so<span class="pl-pds">\'</span></span> --enable-optimizations\n$ make\n\n......\n\nwarning: building with the bundled copy of libffi is deprecated on this platform.  It will not be distributed with Python 3.7\n<span class="pl-k">***</span> WARNING: renaming <span class="pl-s"><span class="pl-pds">"</span>_tkinter<span class="pl-pds">"</span></span> since importing it failed: libXss.so.1: cannot open shared object file: No such file or directory\n\nPython build finished successfully<span class="pl-k">!</span>\nThe necessary bits to build these optional modules were not found:\n_dbm                  _gdbm\nTo find the necessary bits, look <span class="pl-k">in</span> setup.py <span class="pl-k">in</span> <span class="pl-en">detect_modules</span>() <span class="pl-k">for</span> the module<span class="pl-s"><span class="pl-pds">\'</span>s name.</span>\n<span class="pl-s"></span>\n<span class="pl-s">The following modules found by detect_modules() in setup.py, have been</span>\n<span class="pl-s">built by the Makefile instead, as configured by the Setup files:</span>\n<span class="pl-s">atexit                pwd                   time</span>\n<span class="pl-s"></span>\n<span class="pl-s">Following modules built successfully but were removed because they could not be imported:</span>\n<span class="pl-s">_tkinter</span>\n<span class="pl-s"></span>\n<span class="pl-s">running build_scripts</span>\n<span class="pl-s"></span>\n<span class="pl-s">......</span></pre></div>\n<p dir="auto">CentOS 下请参考以下解决方法：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ sudo yum install libXScrnSaver libXScrnSaver-devel"><pre class="notranslate"><code class="notranslate">$ sudo yum install libXScrnSaver libXScrnSaver-devel\n</code></pre></div>\n<h2 dir="auto">调用 Tkinter</h2>\n<p dir="auto">Python 2/3 重新编译完后，执行一下下面的命令即可显示 Tk 的 ui 界面，以及相应的 Tcl/Tk 版本。</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="python2 -m Tkinter   # python 2\npython3 -m tkinter   # python 3"><pre class="notranslate"><code class="notranslate">python2 -m Tkinter   # python 2\npython3 -m tkinter   # python 3\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/46ee92a446b1dd227caa38fb6835a65bb6411ff84dd29f3e1f538a4bfbf2f373/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466742746231345a675a465a584952684f647436656662597a3766642e706e67"><img src="https://camo.githubusercontent.com/46ee92a446b1dd227caa38fb6835a65bb6411ff84dd29f3e1f538a4bfbf2f373/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466742746231345a675a465a584952684f647436656662597a3766642e706e67" alt="python2-m-Tkinter" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FgBtb14ZgZFZXIRhOdt6efbYz7fd.png" style="max-width: 100%;"></a></p>\n<p dir="auto">这时候，我们重新运行开头的 GUI 界面程序，可以看到中文已经正常显示：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/17065252fbe5846fb82502b3d3aa4c703b32298d0a754caa049e2e98d8ad2d79/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467152485558637a50644872516a4655584e51725f43675f6a3242342e706e67"><img src="https://camo.githubusercontent.com/17065252fbe5846fb82502b3d3aa4c703b32298d0a754caa049e2e98d8ad2d79/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467152485558637a50644872516a4655584e51725f43675f6a3242342e706e67" alt="" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqRHUXczPdHrQjFUXNQr_Cg_j2B4.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">参考资料</h2>\n<ul dir="auto">\n<li>Download And Install Tcl: ActiveTcl，<a href="https://www.activestate.com/products/activetcl/downloads/" rel="nofollow">https://www.activestate.com/products/activetcl/downloads/</a></li>\n<li>Installing Tk，<a href="https://tkdocs.com/tutorial/install.html" rel="nofollow">https://tkdocs.com/tutorial/install.html</a></li>\n<li>Python 下"No module named _tkinter"问题解决过程分析，<a href="https://www.jianshu.com/p/0baa9657377f" rel="nofollow">https://www.jianshu.com/p/0baa9657377f</a></li>\n<li>Python GUI 编程(Tkinter)文件对话框，<a href="https://my.oschina.net/u/2245781/blog/661533" rel="nofollow">https://my.oschina.net/u/2245781/blog/661533</a></li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.5-Python'}]}, 'comments': {'nodes': []}}, {'title': '飞书文档初体验', 'number': 11, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/11', 'createdAt': '2023-10-24T07:57:52Z', 'lastEditedAt': '2023-12-01T02:24:27Z', 'updatedAt': '2024-01-04T05:44:25Z', 'body': '2023 年的 1024 程序员节前一天，语雀服务器崩溃长达 8 个小时的余温还没消，就迫不及待再去体验了一把飞书文档，说几点个人感受。\r\n\r\n<!-- more -->\r\n\r\n![20231023-yuque](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/20231023-yuque.png)\r\n\r\n- [如何看待语雀因网络故障导致用户无法正常访问文档？在线文档的可靠性还值得信任吗？](https://www.zhihu.com/question/627418678) - 知乎\r\n- [鉴于昨天的语雀，有啥推荐的笔记软件么](https://www.v2ex.com/t/984728) -V2EX\r\n\r\n\r\n首先，飞书文档[国内版本](https://www.feishu.cn/)和[国际版本](https://www.larksuite.com/)的区别可不是一般的大。\r\n\r\n![飞书文档国内版本](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/feishu-cn-admin.png)\r\n\r\n![飞书文档国际版本](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/larksuite-admin.png)\r\n\r\n第二，书写体验相当不错。\r\n\r\n第三，最然支持 Markdown 所见即所得的编辑模式，但没法查看单篇文档的 Markdown，这也是我最不满意的地方。\r\n\r\n第四，API 很强大，文档很丰富，但没找到怎么通过 API 获取 wiki 知识库内容的介绍！\r\n\r\n截止 2023.10.25 了解到飞书目前是没有 wiki 知识库内容的 API 接口，不清楚后面是否会有这方面的支持，且持续关注中。\r\n\r\n![飞书文档 wiki 知识库 API](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/feishu-wiki-api.png)\r\n\r\n事实上，飞书是支持 通过 API 接口获取 wiki 知识库内容的（上面截图中客服的回答并不准确），具体可以参考 [Feishu Pages](https://github.com/longbridgeapp/feishu-pages#feishu-pages) 实现 wiki 知识库的内容导出。\r\n\r\n第五，经历语雀宕机事件，不得不考虑多平台备份的问题，对于飞书文档目前没发现比较好的方法。\r\n\r\n经过了这个事件很多人都对在线文档产生了一些动摇，但总体来说在使用性和方便性上在线文档还是很有优势的，但值得注意的是不能把所有的鸡蛋都放到一个篮子 —— 备份很重要！**通用格式** 和 **数据可控** 或者可以成为一个评判的基础，那些过于封闭不支持导出(甚至是批量导出)的平台基本可以放弃了。\r\n', 'bodyText': '2023 年的 1024 程序员节前一天，语雀服务器崩溃长达 8 个小时的余温还没消，就迫不及待再去体验了一把飞书文档，说几点个人感受。\n\n\n\n如何看待语雀因网络故障导致用户无法正常访问文档？在线文档的可靠性还值得信任吗？ - 知乎\n鉴于昨天的语雀，有啥推荐的笔记软件么 -V2EX\n\n首先，飞书文档国内版本和国际版本的区别可不是一般的大。\n\n\n第二，书写体验相当不错。\n第三，最然支持 Markdown 所见即所得的编辑模式，但没法查看单篇文档的 Markdown，这也是我最不满意的地方。\n第四，API 很强大，文档很丰富，但没找到怎么通过 API 获取 wiki 知识库内容的介绍！\n截止 2023.10.25 了解到飞书目前是没有 wiki 知识库内容的 API 接口，不清楚后面是否会有这方面的支持，且持续关注中。\n\n事实上，飞书是支持 通过 API 接口获取 wiki 知识库内容的（上面截图中客服的回答并不准确），具体可以参考 Feishu Pages 实现 wiki 知识库的内容导出。\n第五，经历语雀宕机事件，不得不考虑多平台备份的问题，对于飞书文档目前没发现比较好的方法。\n经过了这个事件很多人都对在线文档产生了一些动摇，但总体来说在使用性和方便性上在线文档还是很有优势的，但值得注意的是不能把所有的鸡蛋都放到一个篮子 —— 备份很重要！通用格式 和 数据可控 或者可以成为一个评判的基础，那些过于封闭不支持导出(甚至是批量导出)的平台基本可以放弃了。', 'bodyHTML': '<p dir="auto">2023 年的 1024 程序员节前一天，语雀服务器崩溃长达 8 个小时的余温还没消，就迫不及待再去体验了一把飞书文档，说几点个人感受。</p>\n\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9251bb4bbdd10c50c33dd809927dc0396db235e8378a65ae58adccc6a6a6d5f8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f32303233313032332d79757175652e706e67"><img src="https://camo.githubusercontent.com/9251bb4bbdd10c50c33dd809927dc0396db235e8378a65ae58adccc6a6a6d5f8/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f32303233313032332d79757175652e706e67" alt="20231023-yuque" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/20231023-yuque.png" style="max-width: 100%;"></a></p>\n<ul dir="auto">\n<li><a href="https://www.zhihu.com/question/627418678" rel="nofollow">如何看待语雀因网络故障导致用户无法正常访问文档？在线文档的可靠性还值得信任吗？</a> - 知乎</li>\n<li><a href="https://www.v2ex.com/t/984728" rel="nofollow">鉴于昨天的语雀，有啥推荐的笔记软件么</a> -V2EX</li>\n</ul>\n<p dir="auto">首先，飞书文档<a href="https://www.feishu.cn/" rel="nofollow">国内版本</a>和<a href="https://www.larksuite.com/" rel="nofollow">国际版本</a>的区别可不是一般的大。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f953f266206f8c0036c3d3ecb7187847086b921ff52ce5191a89ffa0f7699f06/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f6665697368752d636e2d61646d696e2e706e67"><img src="https://camo.githubusercontent.com/f953f266206f8c0036c3d3ecb7187847086b921ff52ce5191a89ffa0f7699f06/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f6665697368752d636e2d61646d696e2e706e67" alt="飞书文档国内版本" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/feishu-cn-admin.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6610414d809c86e5403d132993fe14edcadd71dd7c1ca51843db53fd68c70a0d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f6c61726b73756974652d61646d696e2e706e67"><img src="https://camo.githubusercontent.com/6610414d809c86e5403d132993fe14edcadd71dd7c1ca51843db53fd68c70a0d/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f323032332f6c61726b73756974652d61646d696e2e706e67" alt="飞书文档国际版本" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/2023/larksuite-admin.png" style="max-width: 100%;"></a></p>\n<p dir="auto">第二，书写体验相当不错。</p>\n<p dir="auto">第三，最然支持 Markdown 所见即所得的编辑模式，但没法查看单篇文档的 Markdown，这也是我最不满意的地方。</p>\n<p dir="auto">第四，API 很强大，文档很丰富，但没找到怎么通过 API 获取 wiki 知识库内容的介绍！</p>\n<p dir="auto">截止 2023.10.25 了解到飞书目前是没有 wiki 知识库内容的 API 接口，不清楚后面是否会有这方面的支持，且持续关注中。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1acf6bcf8683915d7820b64f669c1e94ce19a88865167593b205cba35e9fe16e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6665697368752d77696b692d6170692e706e67"><img src="https://camo.githubusercontent.com/1acf6bcf8683915d7820b64f669c1e94ce19a88865167593b205cba35e9fe16e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6665697368752d77696b692d6170692e706e67" alt="飞书文档 wiki 知识库 API" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/feishu-wiki-api.png" style="max-width: 100%;"></a></p>\n<p dir="auto">事实上，飞书是支持 通过 API 接口获取 wiki 知识库内容的（上面截图中客服的回答并不准确），具体可以参考 <a href="https://github.com/longbridgeapp/feishu-pages#feishu-pages">Feishu Pages</a> 实现 wiki 知识库的内容导出。</p>\n<p dir="auto">第五，经历语雀宕机事件，不得不考虑多平台备份的问题，对于飞书文档目前没发现比较好的方法。</p>\n<p dir="auto">经过了这个事件很多人都对在线文档产生了一些动摇，但总体来说在使用性和方便性上在线文档还是很有优势的，但值得注意的是不能把所有的鸡蛋都放到一个篮子 —— 备份很重要！<strong>通用格式</strong> 和 <strong>数据可控</strong> 或者可以成为一个评判的基础，那些过于封闭不支持导出(甚至是批量导出)的平台基本可以放弃了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.2-好玩'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'WebStack-Hugo | 一个静态响应式导航主题', 'number': 10, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/10', 'createdAt': '2023-10-23T08:25:32Z', 'lastEditedAt': '2024-01-18T02:45:11Z', 'updatedAt': '2024-01-18T02:45:11Z', 'body': '> Via：[我给自己做了一个导航网站](https://mp.weixin.qq.com/s/gVWGjxG9qd7qSyX3N8Zgag) | [BioIT爱好者](https://www.bioitee.com)    \r\n> **让更多人的人制作自己的导航网站。如果你觉得本主题对你有所帮助，欢迎请作者 [喝杯咖啡](https://camo.githubusercontent.com/a0a10133ed4ec653ab71072c03c1a23d096c3c8261c9ae939ade3d521e2cf95a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466834353377663644625a6f7175415f473677424d575333755947432e6a706567) >.<**\r\n\r\n## 主题开源地址\r\n- Gitee：[https://gitee.com/shenweiyan/WebStack-Hugo](https://gitee.com/shenweiyan/WebStack-Hugo)\r\n- GitHub：[https://github.com/shenweiyan/WebStack-Hugo](https://github.com/shenweiyan/WebStack-Hugo)\r\n\r\n## 主题展示地址\r\n\r\n- [https://www.bioit.top/](https://www.bioit.top/) - WebStack-Hugo 网址导航\r\n- [https://hao.bioitee.com/](https://hao.bioitee.com/) - 生信网址导航\r\n\r\n## 为什么做这个网站\r\n\r\n之所以想着要给自己倒腾一个导航网站，主要有几个原因：\r\n\r\n- 购买了一个域名，且也备案成功了，总想折腾点跟它有关的事情；\r\n- 经常在公司、家里（有时候还有其他的临时场所）更换电脑，每次同步书签（或者登陆一些导航网站）需要各种登陆，麻烦。\r\n\r\n说干就干，从 [WebStack 的开源项目](https://github.com/WebStackPage/WebStackPage.github.io)开始，断断续续的折腾了好几天，终于把轮子造起来了。\r\n\r\n<img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/webstack-hugo-collapse.png" width=800>\r\n<img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/webstack-hugo-expand.png" width=800>\r\n<img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/webstack-hugo-search.png" width=800>\r\n<img src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/webstack-hugo-phone.png" alt="webstack-apple" width=600>\r\n\r\n## 跟其他导航网站有什么区别\r\n\r\n这是 Hugo 版 WebStack 主题。可以借助 Github/Gitee Pages 或者云平台直接托管部署，无需服务器。\r\n\r\n本项目是基于纯静态的网址导航网站 [webstack.cc](https://github.com/WebStackPage/WebStackPage.github.io) 制作的 [Hugo](https://gohugo.io/) 主题，其中部分代码参考了以下几个开源项目：\r\n\r\n- [https://github.com/WebStackPage/WebStackPage.github.io](https://github.com/WebStackPage/WebStackPage.github.io)\r\n- [https://github.com/liutongxu/liutongxu.github.io](https://github.com/WebStackPage/WebStackPage.github.io)\r\n- [https://github.com/iplaycode/webstack-hugo](https://github.com/iplaycode/webstack-hugo)\r\n\r\n总体说一下特点：\r\n\r\n- 采用了一直以来最喜欢的 hugo 部署方式，方便高效。\r\n- 主要的配置信息都集成到了 **config.toml**，一键完成各种自定义的配置。\r\n- 导航的各个信息都集成在 **data/webstack.yml** 文件中，方便后续增删改动。\r\n\r\n```yaml\r\n- taxonomy: 科研办公\r\n  icon: fas fa-flask fa-lg\r\n  list:\r\n    - term: 生物信息\r\n      links:\r\n        - title: NCBI\r\n          logo: ncbi.jpg\r\n          url: https://www.ncbi.nlm.nih.gov/\r\n          description: National Center for Biotechnology Information.\r\n        - title: Bioconda\r\n          logo: bioconda.jpg\r\n          url: https://anaconda.org/bioconda/\r\n          description: "Bioconda :: Anaconda.org."\r\n    - term: 云服务器\r\n      links:\r\n        - title: 阿里云\r\n          logo: 阿里云.jpg\r\n          url: https://www.aliyun.com/\r\n          description: 上云就上阿里云。\r\n        - title: 腾讯云\r\n          logo: 腾讯云.jpg\r\n          url: https://cloud.tencent.com/\r\n          description: 产业智变，云启未来。\r\n```\r\n\r\n- 做了手机电脑自适应以及夜间模式。\r\n- 增加了搜索功能，以及下拉的热词选项（基于百度 API）。\r\n- 增加了一言、和风天气的 API。\r\n\r\n## Windows 下安装部署\r\n\r\n本安装部署在 Windows 7 x64 上测试没问题，相关操作同样适用于 Windows 10，如有任何问题，欢迎留言或者微信与我联系。\r\n\r\n### 第一，下载 hugo\r\n\r\n下载链接：[https://github.com/gohugoio/hugo/releases](https://github.com/gohugoio/hugo/releases)，在这里我们下载 [hugo_0.89.4_Windows-64bit.zip](https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip)。\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fkm43Bi3mi71qf16MaRdUJKjBWWx.png)\r\n\r\n### 第二，解压\r\n\r\n我们把 [hugo_0.89.4_Windows-64bit.zip](https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip) 下载到 **F:\\WebStack** 目录下，然后解压到当前文件夹。\r\n\r\n解压完成后，在该目录会多出 `hugo.exe`、`LICENSE`、`README.md` 三个文件：\r\n\r\n![unzip hugo_0.89.4_Windows-64bit](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqBKVo5JoTzgOY1QsAczSYRmgv0k.png)\r\n\r\n### 第三，检测 hugo 是否安装成功\r\n\r\n\r\n> **🏷️ 温馨提示：**\r\n> \r\n> Windows 命令运行窗口中可以使用 Tab 进行命令行补全，例如你当前目录下有一个 WebStack-Hugo 目录，你在命令行窗口中输入一个 w 后按下 Tab 键，命令行就会自动出现 WebStack-Hugo！\r\n> \r\n> 使用命令行补全，可以减少代码（或者文件名）的输入，方便快捷，又能减少错误！\r\n\r\n1. 在 Windows 中使用 **Win+R** 打开“**运行**”对话框，在对话框中输入“**cmd**”，点击确认。\r\n\r\n   ![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmIW4HA2hWImM7IrtsdCtWwWqcdi.png)\r\n\r\n2. 在 Windows 运行窗口，先切换盘符到 **F** 盘，然后进入 hugo 的解压缩目录（**F:\\WebStack**），具体操作如下。\r\n\r\n   - 在光标处输入**F:**，然后按回车；\r\n\r\n     ![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fsp03gEdM-de5enU1ivNJInfUtHv.png)\r\n\r\n   - 我们就将盘符切换为 F 盘；\r\n\r\n     ![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnwKctq7i0hX_iWQgymrJge8BeSX.png)\r\n\r\n   - 接着输入 **cd WebStack**，回车，就进入了 **F:\\WebStack** 目录；使用 **ls** 可以看到当前目录下的文件。\r\n\r\n     ![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqzY-gqYycHnCN43FlNkfWHYOvmc.png)\r\n\r\n   - 最后，输入 **hugo.exe version**，回车，如图所示，则代表安装成功。\r\n\r\n     ![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FvT_Dc50_SaiA8SmT6Y62ENOhE0A.png)\r\n\r\n### 第四，下载 WebStack-Hugo\r\n\r\n浏览器打开 [https://github.com/shenweiyan/WebStack-Hugo](https://github.com/shenweiyan/WebStack-Hugo)，点击 Code 下的 **"Download ZIP"**，把 **WebStack-hugo-main.zip** 下载到刚才 hugo 解压缩的目录（**F:\\WebStack**）。\r\n\r\n![2022.09.26-11.47.12.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FgBB_DzuGlOUFs1Nt4iseGF6yhN0.png)\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fqyg5wJJpttIrC7LVXg9bnCf6Wgv.png)\r\n\r\n### 第五，解压和重命名\r\n\r\n把 **WebStack-Hugo-main.zip** 解压到当前目录。\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpWA394pXnu7TxElb-XP4StAHp3T.png)\r\n![webstack.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtlBhjh4sOB7bHiz0eZU6zNVtfmX.png)\r\n\r\n### 第六，安装主题\r\n\r\n首先，进入 **F:\\WebStack** 目录；\r\n\r\n然后，创建一个 **themes** 的文件夹；\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fo3KJHf8MPeoCWDadu_eJcLWa6Er.png)\r\n\r\n接着，把解压后的 WebStack-Hugo 整个文件夹移动到 themes 中。\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FvzuDBR38TFwp7O094GSMOm1BPGs.png)\r\n\r\n第四，将 themes/WebStack-Hugo/exampleSite 目录下的所有文件复制到 hugo 站点根目录（即 F:\\WebStack）。\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpgjrR-xAq7fT8DRgT2iMyqGrPyZ.png)\r\n\r\n### 第七，启动预览\r\n\r\n在刚才已经打开的 Windows 命令运行窗口中，使用下面的命令执行 **hugo server**，启动站点——Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。\r\n\r\n```shell\r\nhugo.exe server\r\n```\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FjE4vkK_X_EIF9Via0K8rbuhHBFr.png)\r\n\r\n最后，在浏览器中打开 [**http://127.0.0.1:1313/**](http://127.0.0.1:1313/)，即可看到生成的站点。\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FisfN1Ak2zU2xiyjXkjE-qkyHri3.png)\r\n\r\n## Linux 下安装部署\r\n\r\n安装完本 WebStack-Hugo 主题后，将 exampleSite 目录下的文件复制到 hugo 站点根目录，根据需要把 config.toml 的一些信息改成自己的，导航的网址信息可通过 data 目录下 webstack.yml 修改。\r\n\r\n具体执行步骤如下：\r\n\r\n```bash\r\nmkdir /home/shenweiyan/mysite\r\ncd /home/shenweiyan/mysite\r\n\r\n# 安装 WebStack-Hugo 主题\r\ngit clone https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\r\n\r\n# 将 exampleSite 目录下的文件复制到 hugo 站点根目录\r\ncd /home/shenweiyan/mysite\r\ncp -r themes/WebStack-Hugo/exampleSite/* ./\r\n\r\n# 启动 hugo 站点\r\nhugo server\r\n# 如果你知道你的公网 ip, 如下面的 132.76.230.31, 可以使用下面的方式执行 hugo server\r\nhugo server --baseUrl=132.76.230.31 --bind=0.0.0.0\r\n```\r\n\r\n也可以参考 [@jetsung](https://github.com/jetsung) 在 [pull 15](https://github.com/shenweiyan/WebStack-Hugo/pull/15) 所用的方法安装部署：\r\n\r\n```bash\r\n# 创建项目\r\nmkdir navsites\r\ncd $_\r\n\r\n# 初始化项目\r\ngit init\r\n\r\n# 将 WebStack-Hugo 源下载到 themes/WebStack-Hugo 文件夹\r\ngit submodule add https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\r\ncp -r themes/WebStack-Hugo/exampleSite/* ./\r\n\r\n# 安装 hugo\r\ngo install github.com/gohugoio/hugo@latest\r\n\r\n# 本地测试\r\nhugo server\r\n\r\n# 生成 docs 文件夹，将并静态内容生成至此处\r\nhugo -D\r\n```\r\n\r\n## 导出 HTML 静态资源\r\n\r\nWindows/Linux 下执行的 **hugo server** 命令将会通过热加载的方式临时启动一个 Hugo 服务器（Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改），这个时候我们打开浏览器 [http://127.0.0.1:1313/](http://127.0.0.1:1313/)，就可以看到我们站点的样子了。\r\n\r\n如果我们想要把我们的站点部署到 GitHub/Gitee Pages（或者本地的服务器），我们可以：\r\n\r\n### 1. 生成静态页面内容\r\n\r\n可以通过下面的命令，生成(构建)静态页面内容。\r\n\r\n```python\r\nhugo -D 或者 hugo --minify\r\n```\r\n\r\n这个命令会默认在`**public/**`目录中生成您的网站，当然您可以通过改变站点配置中的`**publishDir**`选项来配置这个输出目录。\r\n\r\n> **🏷️ Hugo 小知识 - 草案、未来和过期内容**\r\n> \r\n> Hugo 允许您在网站内容的前言设定中设置文档的`draft`，`publishdate`甚至`expirydate`字段。默认情况下，Hugo 不会发布下面内容：\r\n>\r\n> 1. `publishdate` 发布日期值设定在未来的内容；\r\n> 2. `draft:true` 草案状态设置为真的内容；\r\n> 3. `expirydate` 过期日期值设置为过去某事件的内容。\r\n>\r\n> 这三个可以在本地开发和部署编译时通过对`hugo`和`hugo server`分别添加如下参数来重新设定，或者在配置文件中设定对应(不包含`--`)域的 boolean 值：\r\n>\r\n> 1. -F, --buildFuture include content with publishdate in the future\r\n> 2. -D, --buildDrafts include content marked as draft\r\n> 3. -E, --buildExpired include expired content\r\n\r\n### 2. 部署站点\r\n\r\n把生成的 `public/` 静态内容目录上传到 GitHub，开启 GitHub/Gitee Pages，并且绑定 cname 域名即可。\r\n\r\n## 使用说明与技巧\r\n\r\n这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。\r\n\r\n### 左导航栏图标\r\n\r\n左侧、顶部导航栏图标用的都是 **Font Awesome** 图标库 **v5** 版本 **Free** 的图标。链接如下：\r\n\r\n🔗 [https://fontawesome.com/v5/search?o=r&m=free](https://fontawesome.com/v5/search?o=r&m=free)\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FoHd7w72AykJGSrbzttHgGi4VqlY.png)\r\n\r\n### 调整头部搜索栏\r\n\r\n头部搜索栏的默认位置可以通过下面的方法进行修改。\r\n\r\n1. 直接修改 **layouts/partials/content_search.html**，调整对应部分的位置。\r\n2. 调整默认的搜索（即点击"常用/搜索/工具 ...." 时下指箭头的指向），把对应的 id 添加到对应的 label 里面。\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FoPMASsgrgPyFSsJy8HvPrgq8ELN.png)\r\n![2022.09.21-10.48.55.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fp0fJmbfJVdg_hVP1ULdh_MmjCcX.png)\r\n\r\n### 自定义头部导航\r\n\r\n[WebStack-Hugo](https://github.com/shenweiyan/WebStack-Hugo) 把头部的导航菜单的各个信息集成在了 **data/header.yml** 文件中，每个人可以根据自己的需要调整。\r\n\r\n```yaml\r\n- item: 首页\r\n  icon: fa fa-home\r\n  link: "./"\r\n\r\n- item: 作者\r\n  icon: fa fa-book\r\n  link: https://www.yuque.com/shenweiyan\r\n\r\n- item: 配置\r\n  icon: fa fa-cog\r\n  link: ""\r\n  list:\r\n    - name: 源码\r\n      url: "#"\r\n    - name: 图标\r\n      url: "#"\r\n```\r\n\r\n### 获取网站图标\r\n\r\n[Bio & IT 网址导航](https://nav.bioitee.com/)默认使用的是个人收集的网站图标，主要是查看网站源码、百度、谷歌等途径把对应导航的图标下载下来，这个方法比较原始繁琐，适合导航不是很多的情况。\r\n\r\n你也可以使用一为提供的的 [Favicon](https://www.iowen.cn/tag/favicon/) 图标 [API](https://www.iowen.cn/tag/api/)：[获取网站 Favicon - 免费API数据接口调用服务平台](https://api.iowen.cn/doc/favicon.html)。\r\n\r\n**使用方法：**\r\n\r\n1. 获取 Favicon 图标\r\n```\r\nhttps://api.iowen.cn/favicon/www.iowen.cn.png\r\n```\r\n\r\n2. 刷新缓存\r\n```\r\nhttps://api.iowen.cn/favicon/www.iowen.cn.png?refresh=true\r\n```\r\n\r\n3. 将上方代码中的 `www.iowen.cn` 替换为你需要获取的网址域名。\r\n\r\n\r\n## 已知问题\r\n\r\n1. 日间模式与夜间模式切换时候，头部搜索栏的背景图片切换不够流畅（个人的 js 知识有限，在 footer.html 做了一些简单的调整来实现），如果你有更好的想法，欢迎 PR 或者交流。\r\n\r\n## 感谢墙\r\n\r\n本主题的部分代码参考了以下几个开源项目，特此感谢。\r\n\r\n- [WebStackPage/WebStackPage.github.io](https://github.com/WebStackPage/WebStackPage.github.io)\r\n- [liutongxu/liutongxu.github.io](https://github.com/liutongxu/liutongxu.github.io)\r\n- [iplaycode/webstack-hugo](https://github.com/iplaycode/webstack-hugo)\r\n\r\n感谢 [WebStack](https://github.com/WebStackPage/WebStackPage.github.io) 的作者 [Viggo](https://twitter.com/decohack) 的肯定和[推广宣传](https://twitter.com/decohack/status/1569188705478516738)。\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FuJQKMnwajVc-di8fIJO6Mu9w6a7.png)\r\n\r\n感谢以下所有朋友对本主题所做出的贡献。\r\n**[@yanbeiyinhanghang](https://github.com/yinhanghang)**\r\n**[@jetsung](https://github.com/jetsung)**\r\n\r\n## 赞赏\r\n\r\n如果你觉得本项目对你有所帮助，欢迎请作者喝杯热咖啡 >.<\r\n![donate-wecaht-aliapy.jpg](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fh453wf6DbZoquA_G6wBMWS3uYGC.jpeg)\r\n\r\n## 反馈与交流\r\n\r\n最后，最重要的，秉承 WebStack 的宗旨，这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。\r\n\r\nWebStack 有非常多的魔改版本，这是其中一个。\r\n\r\n**如果你对本主题进行了一些个性化调整，欢迎在本项目中 **[**issues**](https://github.com/shenweiyan/WebStack-Hugo/issues)** 中一起分享交流！**\r\n\r\n**如果参考本主题构建了属于你自己的网址导航，欢迎在本评论区（或源码 **[**issues**](https://github.com/shenweiyan/WebStack-Hugo/issues)** 区）留下你网站的访问链接 >.<**\r\n', 'bodyText': 'Via：我给自己做了一个导航网站 | BioIT爱好者\n让更多人的人制作自己的导航网站。如果你觉得本主题对你有所帮助，欢迎请作者 喝杯咖啡 >.<\n\n主题开源地址\n\nGitee：https://gitee.com/shenweiyan/WebStack-Hugo\nGitHub：https://github.com/shenweiyan/WebStack-Hugo\n\n主题展示地址\n\nhttps://www.bioit.top/ - WebStack-Hugo 网址导航\nhttps://hao.bioitee.com/ - 生信网址导航\n\n为什么做这个网站\n之所以想着要给自己倒腾一个导航网站，主要有几个原因：\n\n购买了一个域名，且也备案成功了，总想折腾点跟它有关的事情；\n经常在公司、家里（有时候还有其他的临时场所）更换电脑，每次同步书签（或者登陆一些导航网站）需要各种登陆，麻烦。\n\n说干就干，从 WebStack 的开源项目开始，断断续续的折腾了好几天，终于把轮子造起来了。\n\n\n\n\n跟其他导航网站有什么区别\n这是 Hugo 版 WebStack 主题。可以借助 Github/Gitee Pages 或者云平台直接托管部署，无需服务器。\n本项目是基于纯静态的网址导航网站 webstack.cc 制作的 Hugo 主题，其中部分代码参考了以下几个开源项目：\n\nhttps://github.com/WebStackPage/WebStackPage.github.io\nhttps://github.com/liutongxu/liutongxu.github.io\nhttps://github.com/iplaycode/webstack-hugo\n\n总体说一下特点：\n\n采用了一直以来最喜欢的 hugo 部署方式，方便高效。\n主要的配置信息都集成到了 config.toml，一键完成各种自定义的配置。\n导航的各个信息都集成在 data/webstack.yml 文件中，方便后续增删改动。\n\n- taxonomy: 科研办公\n  icon: fas fa-flask fa-lg\n  list:\n    - term: 生物信息\n      links:\n        - title: NCBI\n          logo: ncbi.jpg\n          url: https://www.ncbi.nlm.nih.gov/\n          description: National Center for Biotechnology Information.\n        - title: Bioconda\n          logo: bioconda.jpg\n          url: https://anaconda.org/bioconda/\n          description: "Bioconda :: Anaconda.org."\n    - term: 云服务器\n      links:\n        - title: 阿里云\n          logo: 阿里云.jpg\n          url: https://www.aliyun.com/\n          description: 上云就上阿里云。\n        - title: 腾讯云\n          logo: 腾讯云.jpg\n          url: https://cloud.tencent.com/\n          description: 产业智变，云启未来。\n\n做了手机电脑自适应以及夜间模式。\n增加了搜索功能，以及下拉的热词选项（基于百度 API）。\n增加了一言、和风天气的 API。\n\nWindows 下安装部署\n本安装部署在 Windows 7 x64 上测试没问题，相关操作同样适用于 Windows 10，如有任何问题，欢迎留言或者微信与我联系。\n第一，下载 hugo\n下载链接：https://github.com/gohugoio/hugo/releases，在这里我们下载 hugo_0.89.4_Windows-64bit.zip。\n\n第二，解压\n我们把 hugo_0.89.4_Windows-64bit.zip 下载到 F:\\WebStack 目录下，然后解压到当前文件夹。\n解压完成后，在该目录会多出 hugo.exe、LICENSE、README.md 三个文件：\n\n第三，检测 hugo 是否安装成功\n\n🏷️ 温馨提示：\nWindows 命令运行窗口中可以使用 Tab 进行命令行补全，例如你当前目录下有一个 WebStack-Hugo 目录，你在命令行窗口中输入一个 w 后按下 Tab 键，命令行就会自动出现 WebStack-Hugo！\n使用命令行补全，可以减少代码（或者文件名）的输入，方便快捷，又能减少错误！\n\n\n\n在 Windows 中使用 Win+R 打开“运行”对话框，在对话框中输入“cmd”，点击确认。\n\n\n\n在 Windows 运行窗口，先切换盘符到 F 盘，然后进入 hugo 的解压缩目录（F:\\WebStack），具体操作如下。\n\n\n在光标处输入F:，然后按回车；\n\n\n\n我们就将盘符切换为 F 盘；\n\n\n\n接着输入 cd WebStack，回车，就进入了 F:\\WebStack 目录；使用 ls 可以看到当前目录下的文件。\n\n\n\n最后，输入 hugo.exe version，回车，如图所示，则代表安装成功。\n\n\n\n\n\n第四，下载 WebStack-Hugo\n浏览器打开 https://github.com/shenweiyan/WebStack-Hugo，点击 Code 下的 "Download ZIP"，把 WebStack-hugo-main.zip 下载到刚才 hugo 解压缩的目录（F:\\WebStack）。\n\n\n第五，解压和重命名\n把 WebStack-Hugo-main.zip 解压到当前目录。\n\n\n第六，安装主题\n首先，进入 F:\\WebStack 目录；\n然后，创建一个 themes 的文件夹；\n\n接着，把解压后的 WebStack-Hugo 整个文件夹移动到 themes 中。\n\n第四，将 themes/WebStack-Hugo/exampleSite 目录下的所有文件复制到 hugo 站点根目录（即 F:\\WebStack）。\n\n第七，启动预览\n在刚才已经打开的 Windows 命令运行窗口中，使用下面的命令执行 hugo server，启动站点——Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。\nhugo.exe server\n\n最后，在浏览器中打开 http://127.0.0.1:1313/，即可看到生成的站点。\n\nLinux 下安装部署\n安装完本 WebStack-Hugo 主题后，将 exampleSite 目录下的文件复制到 hugo 站点根目录，根据需要把 config.toml 的一些信息改成自己的，导航的网址信息可通过 data 目录下 webstack.yml 修改。\n具体执行步骤如下：\nmkdir /home/shenweiyan/mysite\ncd /home/shenweiyan/mysite\n\n# 安装 WebStack-Hugo 主题\ngit clone https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\n\n# 将 exampleSite 目录下的文件复制到 hugo 站点根目录\ncd /home/shenweiyan/mysite\ncp -r themes/WebStack-Hugo/exampleSite/* ./\n\n# 启动 hugo 站点\nhugo server\n# 如果你知道你的公网 ip, 如下面的 132.76.230.31, 可以使用下面的方式执行 hugo server\nhugo server --baseUrl=132.76.230.31 --bind=0.0.0.0\n也可以参考 @jetsung 在 pull 15 所用的方法安装部署：\n# 创建项目\nmkdir navsites\ncd $_\n\n# 初始化项目\ngit init\n\n# 将 WebStack-Hugo 源下载到 themes/WebStack-Hugo 文件夹\ngit submodule add https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\ncp -r themes/WebStack-Hugo/exampleSite/* ./\n\n# 安装 hugo\ngo install github.com/gohugoio/hugo@latest\n\n# 本地测试\nhugo server\n\n# 生成 docs 文件夹，将并静态内容生成至此处\nhugo -D\n导出 HTML 静态资源\nWindows/Linux 下执行的 hugo server 命令将会通过热加载的方式临时启动一个 Hugo 服务器（Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改），这个时候我们打开浏览器 http://127.0.0.1:1313/，就可以看到我们站点的样子了。\n如果我们想要把我们的站点部署到 GitHub/Gitee Pages（或者本地的服务器），我们可以：\n1. 生成静态页面内容\n可以通过下面的命令，生成(构建)静态页面内容。\nhugo -D 或者 hugo --minify\n这个命令会默认在**public/**目录中生成您的网站，当然您可以通过改变站点配置中的**publishDir**选项来配置这个输出目录。\n\n🏷️ Hugo 小知识 - 草案、未来和过期内容\nHugo 允许您在网站内容的前言设定中设置文档的draft，publishdate甚至expirydate字段。默认情况下，Hugo 不会发布下面内容：\n\npublishdate 发布日期值设定在未来的内容；\ndraft:true 草案状态设置为真的内容；\nexpirydate 过期日期值设置为过去某事件的内容。\n\n这三个可以在本地开发和部署编译时通过对hugo和hugo server分别添加如下参数来重新设定，或者在配置文件中设定对应(不包含--)域的 boolean 值：\n\n-F, --buildFuture include content with publishdate in the future\n-D, --buildDrafts include content marked as draft\n-E, --buildExpired include expired content\n\n\n2. 部署站点\n把生成的 public/ 静态内容目录上传到 GitHub，开启 GitHub/Gitee Pages，并且绑定 cname 域名即可。\n使用说明与技巧\n这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。\n左导航栏图标\n左侧、顶部导航栏图标用的都是 Font Awesome 图标库 v5 版本 Free 的图标。链接如下：\n🔗 https://fontawesome.com/v5/search?o=r&m=free\n\n调整头部搜索栏\n头部搜索栏的默认位置可以通过下面的方法进行修改。\n\n直接修改 layouts/partials/content_search.html，调整对应部分的位置。\n调整默认的搜索（即点击"常用/搜索/工具 ...." 时下指箭头的指向），把对应的 id 添加到对应的 label 里面。\n\n\n\n自定义头部导航\nWebStack-Hugo 把头部的导航菜单的各个信息集成在了 data/header.yml 文件中，每个人可以根据自己的需要调整。\n- item: 首页\n  icon: fa fa-home\n  link: "./"\n\n- item: 作者\n  icon: fa fa-book\n  link: https://www.yuque.com/shenweiyan\n\n- item: 配置\n  icon: fa fa-cog\n  link: ""\n  list:\n    - name: 源码\n      url: "#"\n    - name: 图标\n      url: "#"\n获取网站图标\nBio & IT 网址导航默认使用的是个人收集的网站图标，主要是查看网站源码、百度、谷歌等途径把对应导航的图标下载下来，这个方法比较原始繁琐，适合导航不是很多的情况。\n你也可以使用一为提供的的 Favicon 图标 API：获取网站 Favicon - 免费API数据接口调用服务平台。\n使用方法：\n\n获取 Favicon 图标\n\nhttps://api.iowen.cn/favicon/www.iowen.cn.png\n\n\n刷新缓存\n\nhttps://api.iowen.cn/favicon/www.iowen.cn.png?refresh=true\n\n\n将上方代码中的 www.iowen.cn 替换为你需要获取的网址域名。\n\n已知问题\n\n日间模式与夜间模式切换时候，头部搜索栏的背景图片切换不够流畅（个人的 js 知识有限，在 footer.html 做了一些简单的调整来实现），如果你有更好的想法，欢迎 PR 或者交流。\n\n感谢墙\n本主题的部分代码参考了以下几个开源项目，特此感谢。\n\nWebStackPage/WebStackPage.github.io\nliutongxu/liutongxu.github.io\niplaycode/webstack-hugo\n\n感谢 WebStack 的作者 Viggo 的肯定和推广宣传。\n\n感谢以下所有朋友对本主题所做出的贡献。\n@yanbeiyinhanghang\n@jetsung\n赞赏\n如果你觉得本项目对你有所帮助，欢迎请作者喝杯热咖啡 >.<\n\n反馈与交流\n最后，最重要的，秉承 WebStack 的宗旨，这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。\nWebStack 有非常多的魔改版本，这是其中一个。\n如果你对本主题进行了一些个性化调整，欢迎在本项目中 issues 中一起分享交流！\n如果参考本主题构建了属于你自己的网址导航，欢迎在本评论区（或源码 issues 区）留下你网站的访问链接 >.<', 'bodyHTML': '<blockquote>\n<p dir="auto">Via：<a href="https://mp.weixin.qq.com/s/gVWGjxG9qd7qSyX3N8Zgag" rel="nofollow">我给自己做了一个导航网站</a> | <a href="https://www.bioitee.com" rel="nofollow">BioIT爱好者</a><br>\n<strong>让更多人的人制作自己的导航网站。如果你觉得本主题对你有所帮助，欢迎请作者 <a href="https://camo.githubusercontent.com/a0a10133ed4ec653ab71072c03c1a23d096c3c8261c9ae939ade3d521e2cf95a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466834353377663644625a6f7175415f473677424d575333755947432e6a706567" rel="nofollow">喝杯咖啡</a> &gt;.&lt;</strong></p>\n</blockquote>\n<h2 dir="auto">主题开源地址</h2>\n<ul dir="auto">\n<li>Gitee：<a href="https://gitee.com/shenweiyan/WebStack-Hugo" rel="nofollow">https://gitee.com/shenweiyan/WebStack-Hugo</a></li>\n<li>GitHub：<a href="https://github.com/shenweiyan/WebStack-Hugo">https://github.com/shenweiyan/WebStack-Hugo</a></li>\n</ul>\n<h2 dir="auto">主题展示地址</h2>\n<ul dir="auto">\n<li><a href="https://www.bioit.top/" rel="nofollow">https://www.bioit.top/</a> - WebStack-Hugo 网址导航</li>\n<li><a href="https://hao.bioitee.com/" rel="nofollow">https://hao.bioitee.com/</a> - 生信网址导航</li>\n</ul>\n<h2 dir="auto">为什么做这个网站</h2>\n<p dir="auto">之所以想着要给自己倒腾一个导航网站，主要有几个原因：</p>\n<ul dir="auto">\n<li>购买了一个域名，且也备案成功了，总想折腾点跟它有关的事情；</li>\n<li>经常在公司、家里（有时候还有其他的临时场所）更换电脑，每次同步书签（或者登陆一些导航网站）需要各种登陆，麻烦。</li>\n</ul>\n<p dir="auto">说干就干，从 <a href="https://github.com/WebStackPage/WebStackPage.github.io">WebStack 的开源项目</a>开始，断断续续的折腾了好几天，终于把轮子造起来了。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ea6da26c7a23cd5f086a8a1552412c8614f17a7a04a3d15486c5e6d2708bb9c6/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f776562737461636b2d6875676f2d636f6c6c617073652e706e67"><img src="https://camo.githubusercontent.com/ea6da26c7a23cd5f086a8a1552412c8614f17a7a04a3d15486c5e6d2708bb9c6/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f776562737461636b2d6875676f2d636f6c6c617073652e706e67" width="800" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/webstack-hugo-collapse.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8471e8dc589fe5857f42712b3ac13a0f3b11405adc9218ccb250ac51d2b5db8c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f776562737461636b2d6875676f2d657870616e642e706e67"><img src="https://camo.githubusercontent.com/8471e8dc589fe5857f42712b3ac13a0f3b11405adc9218ccb250ac51d2b5db8c/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f776562737461636b2d6875676f2d657870616e642e706e67" width="800" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/webstack-hugo-expand.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/12e679cefca471f934b899c8df12988d443b00f61d77edda3e035e510da45f83/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f776562737461636b2d6875676f2d7365617263682e706e67"><img src="https://camo.githubusercontent.com/12e679cefca471f934b899c8df12988d443b00f61d77edda3e035e510da45f83/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f776562737461636b2d6875676f2d7365617263682e706e67" width="800" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/webstack-hugo-search.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f7fe0a0ec1836a886fe0afd10400f42dd4d7cb11e870b9058dafaa7854b45f9b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f776562737461636b2d6875676f2d70686f6e652e706e67"><img src="https://camo.githubusercontent.com/f7fe0a0ec1836a886fe0afd10400f42dd4d7cb11e870b9058dafaa7854b45f9b/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f776562737461636b2d6875676f2d70686f6e652e706e67" alt="webstack-apple" width="600" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/webstack-hugo-phone.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">跟其他导航网站有什么区别</h2>\n<p dir="auto">这是 Hugo 版 WebStack 主题。可以借助 Github/Gitee Pages 或者云平台直接托管部署，无需服务器。</p>\n<p dir="auto">本项目是基于纯静态的网址导航网站 <a href="https://github.com/WebStackPage/WebStackPage.github.io">webstack.cc</a> 制作的 <a href="https://gohugo.io/" rel="nofollow">Hugo</a> 主题，其中部分代码参考了以下几个开源项目：</p>\n<ul dir="auto">\n<li><a href="https://github.com/WebStackPage/WebStackPage.github.io">https://github.com/WebStackPage/WebStackPage.github.io</a></li>\n<li><a href="https://github.com/WebStackPage/WebStackPage.github.io">https://github.com/liutongxu/liutongxu.github.io</a></li>\n<li><a href="https://github.com/iplaycode/webstack-hugo">https://github.com/iplaycode/webstack-hugo</a></li>\n</ul>\n<p dir="auto">总体说一下特点：</p>\n<ul dir="auto">\n<li>采用了一直以来最喜欢的 hugo 部署方式，方便高效。</li>\n<li>主要的配置信息都集成到了 <strong>config.toml</strong>，一键完成各种自定义的配置。</li>\n<li>导航的各个信息都集成在 <strong>data/webstack.yml</strong> 文件中，方便后续增删改动。</li>\n</ul>\n<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="- taxonomy: 科研办公\n  icon: fas fa-flask fa-lg\n  list:\n    - term: 生物信息\n      links:\n        - title: NCBI\n          logo: ncbi.jpg\n          url: https://www.ncbi.nlm.nih.gov/\n          description: National Center for Biotechnology Information.\n        - title: Bioconda\n          logo: bioconda.jpg\n          url: https://anaconda.org/bioconda/\n          description: &quot;Bioconda :: Anaconda.org.&quot;\n    - term: 云服务器\n      links:\n        - title: 阿里云\n          logo: 阿里云.jpg\n          url: https://www.aliyun.com/\n          description: 上云就上阿里云。\n        - title: 腾讯云\n          logo: 腾讯云.jpg\n          url: https://cloud.tencent.com/\n          description: 产业智变，云启未来。"><pre class="notranslate">- <span class="pl-ent">taxonomy</span>: <span class="pl-s">科研办公</span>\n  <span class="pl-ent">icon</span>: <span class="pl-s">fas fa-flask fa-lg</span>\n  <span class="pl-ent">list</span>:\n    - <span class="pl-ent">term</span>: <span class="pl-s">生物信息</span>\n      <span class="pl-ent">links</span>:\n        - <span class="pl-ent">title</span>: <span class="pl-s">NCBI</span>\n          <span class="pl-ent">logo</span>: <span class="pl-s">ncbi.jpg</span>\n          <span class="pl-ent">url</span>: <span class="pl-s">https://www.ncbi.nlm.nih.gov/</span>\n          <span class="pl-ent">description</span>: <span class="pl-s">National Center for Biotechnology Information.</span>\n        - <span class="pl-ent">title</span>: <span class="pl-s">Bioconda</span>\n          <span class="pl-ent">logo</span>: <span class="pl-s">bioconda.jpg</span>\n          <span class="pl-ent">url</span>: <span class="pl-s">https://anaconda.org/bioconda/</span>\n          <span class="pl-ent">description</span>: <span class="pl-s"><span class="pl-pds">"</span>Bioconda :: Anaconda.org.<span class="pl-pds">"</span></span>\n    - <span class="pl-ent">term</span>: <span class="pl-s">云服务器</span>\n      <span class="pl-ent">links</span>:\n        - <span class="pl-ent">title</span>: <span class="pl-s">阿里云</span>\n          <span class="pl-ent">logo</span>: <span class="pl-s">阿里云.jpg</span>\n          <span class="pl-ent">url</span>: <span class="pl-s">https://www.aliyun.com/</span>\n          <span class="pl-ent">description</span>: <span class="pl-s">上云就上阿里云。</span>\n        - <span class="pl-ent">title</span>: <span class="pl-s">腾讯云</span>\n          <span class="pl-ent">logo</span>: <span class="pl-s">腾讯云.jpg</span>\n          <span class="pl-ent">url</span>: <span class="pl-s">https://cloud.tencent.com/</span>\n          <span class="pl-ent">description</span>: <span class="pl-s">产业智变，云启未来。</span></pre></div>\n<ul dir="auto">\n<li>做了手机电脑自适应以及夜间模式。</li>\n<li>增加了搜索功能，以及下拉的热词选项（基于百度 API）。</li>\n<li>增加了一言、和风天气的 API。</li>\n</ul>\n<h2 dir="auto">Windows 下安装部署</h2>\n<p dir="auto">本安装部署在 Windows 7 x64 上测试没问题，相关操作同样适用于 Windows 10，如有任何问题，欢迎留言或者微信与我联系。</p>\n<h3 dir="auto">第一，下载 hugo</h3>\n<p dir="auto">下载链接：<a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a>，在这里我们下载 <a href="https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip">hugo_0.89.4_Windows-64bit.zip</a>。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bbf37a982150a47faab6595bc114015e75f81ea0cf61cb4a7dff8639cef60e68/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b6d34334269336d693731716631364d615264554a4b6a425757782e706e67"><img src="https://camo.githubusercontent.com/bbf37a982150a47faab6595bc114015e75f81ea0cf61cb4a7dff8639cef60e68/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b6d34334269336d693731716631364d615264554a4b6a425757782e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fkm43Bi3mi71qf16MaRdUJKjBWWx.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第二，解压</h3>\n<p dir="auto">我们把 <a href="https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip">hugo_0.89.4_Windows-64bit.zip</a> 下载到 <strong>F:\\WebStack</strong> 目录下，然后解压到当前文件夹。</p>\n<p dir="auto">解压完成后，在该目录会多出 <code class="notranslate">hugo.exe</code>、<code class="notranslate">LICENSE</code>、<code class="notranslate">README.md</code> 三个文件：</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b253e6681bf3d95a585d2b79a3eb5a84e898367ff8ba8508155855a7607ebe59/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4671424b566f354a6f547a674f5931517341637a5359526d6776306b2e706e67"><img src="https://camo.githubusercontent.com/b253e6681bf3d95a585d2b79a3eb5a84e898367ff8ba8508155855a7607ebe59/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4671424b566f354a6f547a674f5931517341637a5359526d6776306b2e706e67" alt="unzip hugo_0.89.4_Windows-64bit" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqBKVo5JoTzgOY1QsAczSYRmgv0k.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第三，检测 hugo 是否安装成功</h3>\n<blockquote>\n<p dir="auto"><strong>🏷️ 温馨提示：</strong></p>\n<p dir="auto">Windows 命令运行窗口中可以使用 Tab 进行命令行补全，例如你当前目录下有一个 WebStack-Hugo 目录，你在命令行窗口中输入一个 w 后按下 Tab 键，命令行就会自动出现 WebStack-Hugo！</p>\n<p dir="auto">使用命令行补全，可以减少代码（或者文件名）的输入，方便快捷，又能减少错误！</p>\n</blockquote>\n<ol dir="auto">\n<li>\n<p dir="auto">在 Windows 中使用 <strong>Win+R</strong> 打开“<strong>运行</strong>”对话框，在对话框中输入“<strong>cmd</strong>”，点击确认。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/922f04175bde2261e65e54e07e9ec9144331c63256d57889b46409b5d7607b11/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d4957344841326857496d4d3749727473644374577757716364692e706e67"><img src="https://camo.githubusercontent.com/922f04175bde2261e65e54e07e9ec9144331c63256d57889b46409b5d7607b11/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d4957344841326857496d4d3749727473644374577757716364692e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmIW4HA2hWImM7IrtsdCtWwWqcdi.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">在 Windows 运行窗口，先切换盘符到 <strong>F</strong> 盘，然后进入 hugo 的解压缩目录（<strong>F:\\WebStack</strong>），具体操作如下。</p>\n<ul dir="auto">\n<li>\n<p dir="auto">在光标处输入<strong>F:</strong>，然后按回车；</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4c277565f30a4c84023ffbdf41f423eb5893e266c077f1348ab7993346a5cc17/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46737030336745644d2d646535656e553169764e4a496e66557448762e706e67"><img src="https://camo.githubusercontent.com/4c277565f30a4c84023ffbdf41f423eb5893e266c077f1348ab7993346a5cc17/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46737030336745644d2d646535656e553169764e4a496e66557448762e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fsp03gEdM-de5enU1ivNJInfUtHv.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">我们就将盘符切换为 F 盘；</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/15ad9da16054c855d5438cddd87c3e04040dbcd48269af537ee7f7b13b4217b0/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e774b63747137693068585f69575167796d724a676538426553582e706e67"><img src="https://camo.githubusercontent.com/15ad9da16054c855d5438cddd87c3e04040dbcd48269af537ee7f7b13b4217b0/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e774b63747137693068585f69575167796d724a676538426553582e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnwKctq7i0hX_iWQgymrJge8BeSX.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">接着输入 <strong>cd WebStack</strong>，回车，就进入了 <strong>F:\\WebStack</strong> 目录；使用 <strong>ls</strong> 可以看到当前目录下的文件。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/026b4517caa57e819f83f26f931516b7f2616823ea06b6a699d259302a943975/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46717a592d6771597963486e434e3433466c4e6b665748594f766d632e706e67"><img src="https://camo.githubusercontent.com/026b4517caa57e819f83f26f931516b7f2616823ea06b6a699d259302a943975/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46717a592d6771597963486e434e3433466c4e6b665748594f766d632e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqzY-gqYycHnCN43FlNkfWHYOvmc.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">最后，输入 <strong>hugo.exe version</strong>，回车，如图所示，则代表安装成功。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/09ba2f6cb2d8e09d7268ff20af9f7cc1134dc60e2e6edee42054c23cc8a0daf6/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4676545f446335305f5361694138536d5436593632454e4f684530412e706e67"><img src="https://camo.githubusercontent.com/09ba2f6cb2d8e09d7268ff20af9f7cc1134dc60e2e6edee42054c23cc8a0daf6/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4676545f446335305f5361694138536d5436593632454e4f684530412e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FvT_Dc50_SaiA8SmT6Y62ENOhE0A.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 dir="auto">第四，下载 WebStack-Hugo</h3>\n<p dir="auto">浏览器打开 <a href="https://github.com/shenweiyan/WebStack-Hugo">https://github.com/shenweiyan/WebStack-Hugo</a>，点击 Code 下的 <strong>"Download ZIP"</strong>，把 <strong>WebStack-hugo-main.zip</strong> 下载到刚才 hugo 解压缩的目录（<strong>F:\\WebStack</strong>）。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e30228272c73f2ad9f7b2a241d9f85c2eb71c01849c2934523b554beac95f5da/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466742425f447a75476c4f554673314e743469736547463679684e302e706e67"><img src="https://camo.githubusercontent.com/e30228272c73f2ad9f7b2a241d9f85c2eb71c01849c2934523b554beac95f5da/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466742425f447a75476c4f554673314e743469736547463679684e302e706e67" alt="2022.09.26-11.47.12.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FgBB_DzuGlOUFs1Nt4iseGF6yhN0.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fb91ad97c9d7ef7ff41c63fa3f4cb05829bddc2429491ec0d6a07e9309ade6c9/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4671796735774a4a707474497243374c56586739626e4366365767762e706e67"><img src="https://camo.githubusercontent.com/fb91ad97c9d7ef7ff41c63fa3f4cb05829bddc2429491ec0d6a07e9309ade6c9/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4671796735774a4a707474497243374c56586739626e4366365767762e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fqyg5wJJpttIrC7LVXg9bnCf6Wgv.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第五，解压和重命名</h3>\n<p dir="auto">把 <strong>WebStack-Hugo-main.zip</strong> 解压到当前目录。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3681269bb85e6272d1fcbab8deddd91cc0639c6c67d214e7231a7e524fe6482d/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4670574133393470586e75375478456c622d585034537441487033542e706e67"><img src="https://camo.githubusercontent.com/3681269bb85e6272d1fcbab8deddd91cc0639c6c67d214e7231a7e524fe6482d/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4670574133393470586e75375478456c622d585034537441487033542e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpWA394pXnu7TxElb-XP4StAHp3T.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/64d5b93b5c45570e599e16d1b12b7170a53506f867deb9548709e3cdbf80b032/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46746c42686a6834734f42376248697a30655a55367a4e5674666d582e706e67"><img src="https://camo.githubusercontent.com/64d5b93b5c45570e599e16d1b12b7170a53506f867deb9548709e3cdbf80b032/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46746c42686a6834734f42376248697a30655a55367a4e5674666d582e706e67" alt="webstack.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtlBhjh4sOB7bHiz0eZU6zNVtfmX.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第六，安装主题</h3>\n<p dir="auto">首先，进入 <strong>F:\\WebStack</strong> 目录；</p>\n<p dir="auto">然后，创建一个 <strong>themes</strong> 的文件夹；</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/67775912df667e9ae81163876d38075c71ade9a6ab4ceba71dadfae62a4447c4/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f334b4a4866384d50656f4357446164755f654a634c57613645722e706e67"><img src="https://camo.githubusercontent.com/67775912df667e9ae81163876d38075c71ade9a6ab4ceba71dadfae62a4447c4/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f334b4a4866384d50656f4357446164755f654a634c57613645722e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fo3KJHf8MPeoCWDadu_eJcLWa6Er.png" style="max-width: 100%;"></a></p>\n<p dir="auto">接着，把解压后的 WebStack-Hugo 整个文件夹移动到 themes 中。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/47bb62ab45ec3278fac2419a180f6bc62b96f4ca1e752fd3ee845fdc941b1f1e/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46767a75444252333854467770374f30393447534d4f6d31425047732e706e67"><img src="https://camo.githubusercontent.com/47bb62ab45ec3278fac2419a180f6bc62b96f4ca1e752fd3ee845fdc941b1f1e/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46767a75444252333854467770374f30393447534d4f6d31425047732e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FvzuDBR38TFwp7O094GSMOm1BPGs.png" style="max-width: 100%;"></a></p>\n<p dir="auto">第四，将 themes/WebStack-Hugo/exampleSite 目录下的所有文件复制到 hugo 站点根目录（即 F:\\WebStack）。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d6527ce1859034b06ab6a7cf9480d6cf3c3bdd3726a2c19e6fbd611ebc0c8db1/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4670676a72522d784171376654384452675432694d7971477250795a2e706e67"><img src="https://camo.githubusercontent.com/d6527ce1859034b06ab6a7cf9480d6cf3c3bdd3726a2c19e6fbd611ebc0c8db1/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4670676a72522d784171376654384452675432694d7971477250795a2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FpgjrR-xAq7fT8DRgT2iMyqGrPyZ.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">第七，启动预览</h3>\n<p dir="auto">在刚才已经打开的 Windows 命令运行窗口中，使用下面的命令执行 <strong>hugo server</strong>，启动站点——Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="hugo.exe server"><pre class="notranslate">hugo.exe server</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/feef9c45d53e90e220d7ce211c652f4b1cb275af9c9f621b3ffaaf2d10fdebd8/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a4534766b4b5f585f45494639566961304b3872627568484246722e706e67"><img src="https://camo.githubusercontent.com/feef9c45d53e90e220d7ce211c652f4b1cb275af9c9f621b3ffaaf2d10fdebd8/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a4534766b4b5f585f45494639566961304b3872627568484246722e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FjE4vkK_X_EIF9Via0K8rbuhHBFr.png" style="max-width: 100%;"></a></p>\n<p dir="auto">最后，在浏览器中打开 <a href="http://127.0.0.1:1313/" rel="nofollow"><strong>http://127.0.0.1:1313/</strong></a>，即可看到生成的站点。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b2314a72a70aad1933943a9efb03dd844a98e6799ebc551c3c28e3b68c5daeb6/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466973664e31416b327a55327869796a586b6a452d716b79487269332e706e67"><img src="https://camo.githubusercontent.com/b2314a72a70aad1933943a9efb03dd844a98e6799ebc551c3c28e3b68c5daeb6/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466973664e31416b327a55327869796a586b6a452d716b79487269332e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FisfN1Ak2zU2xiyjXkjE-qkyHri3.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">Linux 下安装部署</h2>\n<p dir="auto">安装完本 WebStack-Hugo 主题后，将 exampleSite 目录下的文件复制到 hugo 站点根目录，根据需要把 config.toml 的一些信息改成自己的，导航的网址信息可通过 data 目录下 webstack.yml 修改。</p>\n<p dir="auto">具体执行步骤如下：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mkdir /home/shenweiyan/mysite\ncd /home/shenweiyan/mysite\n\n# 安装 WebStack-Hugo 主题\ngit clone https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\n\n# 将 exampleSite 目录下的文件复制到 hugo 站点根目录\ncd /home/shenweiyan/mysite\ncp -r themes/WebStack-Hugo/exampleSite/* ./\n\n# 启动 hugo 站点\nhugo server\n# 如果你知道你的公网 ip, 如下面的 132.76.230.31, 可以使用下面的方式执行 hugo server\nhugo server --baseUrl=132.76.230.31 --bind=0.0.0.0"><pre class="notranslate">mkdir /home/shenweiyan/mysite\n<span class="pl-c1">cd</span> /home/shenweiyan/mysite\n\n<span class="pl-c"><span class="pl-c">#</span> 安装 WebStack-Hugo 主题</span>\ngit clone https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\n\n<span class="pl-c"><span class="pl-c">#</span> 将 exampleSite 目录下的文件复制到 hugo 站点根目录</span>\n<span class="pl-c1">cd</span> /home/shenweiyan/mysite\ncp -r themes/WebStack-Hugo/exampleSite/<span class="pl-k">*</span> ./\n\n<span class="pl-c"><span class="pl-c">#</span> 启动 hugo 站点</span>\nhugo server\n<span class="pl-c"><span class="pl-c">#</span> 如果你知道你的公网 ip, 如下面的 132.76.230.31, 可以使用下面的方式执行 hugo server</span>\nhugo server --baseUrl=132.76.230.31 --bind=0.0.0.0</pre></div>\n<p dir="auto">也可以参考 <a href="https://github.com/jetsung">@jetsung</a> 在 <a href="https://github.com/shenweiyan/WebStack-Hugo/pull/15" data-hovercard-type="pull_request" data-hovercard-url="/shenweiyan/WebStack-Hugo/pull/15/hovercard">pull 15</a> 所用的方法安装部署：</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 创建项目\nmkdir navsites\ncd $_\n\n# 初始化项目\ngit init\n\n# 将 WebStack-Hugo 源下载到 themes/WebStack-Hugo 文件夹\ngit submodule add https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\ncp -r themes/WebStack-Hugo/exampleSite/* ./\n\n# 安装 hugo\ngo install github.com/gohugoio/hugo@latest\n\n# 本地测试\nhugo server\n\n# 生成 docs 文件夹，将并静态内容生成至此处\nhugo -D"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 创建项目</span>\nmkdir navsites\n<span class="pl-c1">cd</span> <span class="pl-smi">$_</span>\n\n<span class="pl-c"><span class="pl-c">#</span> 初始化项目</span>\ngit init\n\n<span class="pl-c"><span class="pl-c">#</span> 将 WebStack-Hugo 源下载到 themes/WebStack-Hugo 文件夹</span>\ngit submodule add https://github.com/shenweiyan/WebStack-Hugo.git themes/WebStack-Hugo\ncp -r themes/WebStack-Hugo/exampleSite/<span class="pl-k">*</span> ./\n\n<span class="pl-c"><span class="pl-c">#</span> 安装 hugo</span>\ngo install github.com/gohugoio/hugo@latest\n\n<span class="pl-c"><span class="pl-c">#</span> 本地测试</span>\nhugo server\n\n<span class="pl-c"><span class="pl-c">#</span> 生成 docs 文件夹，将并静态内容生成至此处</span>\nhugo -D</pre></div>\n<h2 dir="auto">导出 HTML 静态资源</h2>\n<p dir="auto">Windows/Linux 下执行的 <strong>hugo server</strong> 命令将会通过热加载的方式临时启动一个 Hugo 服务器（Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改），这个时候我们打开浏览器 <a href="http://127.0.0.1:1313/" rel="nofollow">http://127.0.0.1:1313/</a>，就可以看到我们站点的样子了。</p>\n<p dir="auto">如果我们想要把我们的站点部署到 GitHub/Gitee Pages（或者本地的服务器），我们可以：</p>\n<h3 dir="auto">1. 生成静态页面内容</h3>\n<p dir="auto">可以通过下面的命令，生成(构建)静态页面内容。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="hugo -D 或者 hugo --minify"><pre class="notranslate"><span class="pl-s1">hugo</span> <span class="pl-c1">-</span><span class="pl-v">D</span> <span class="pl-s1">或者</span> <span class="pl-s1">hugo</span> <span class="pl-c1">-</span><span class="pl-c1">-</span><span class="pl-s1">minify</span></pre></div>\n<p dir="auto">这个命令会默认在<code class="notranslate">**public/**</code>目录中生成您的网站，当然您可以通过改变站点配置中的<code class="notranslate">**publishDir**</code>选项来配置这个输出目录。</p>\n<blockquote>\n<p dir="auto"><strong>🏷️ Hugo 小知识 - 草案、未来和过期内容</strong></p>\n<p dir="auto">Hugo 允许您在网站内容的前言设定中设置文档的<code class="notranslate">draft</code>，<code class="notranslate">publishdate</code>甚至<code class="notranslate">expirydate</code>字段。默认情况下，Hugo 不会发布下面内容：</p>\n<ol dir="auto">\n<li><code class="notranslate">publishdate</code> 发布日期值设定在未来的内容；</li>\n<li><code class="notranslate">draft:true</code> 草案状态设置为真的内容；</li>\n<li><code class="notranslate">expirydate</code> 过期日期值设置为过去某事件的内容。</li>\n</ol>\n<p dir="auto">这三个可以在本地开发和部署编译时通过对<code class="notranslate">hugo</code>和<code class="notranslate">hugo server</code>分别添加如下参数来重新设定，或者在配置文件中设定对应(不包含<code class="notranslate">--</code>)域的 boolean 值：</p>\n<ol dir="auto">\n<li>-F, --buildFuture include content with publishdate in the future</li>\n<li>-D, --buildDrafts include content marked as draft</li>\n<li>-E, --buildExpired include expired content</li>\n</ol>\n</blockquote>\n<h3 dir="auto">2. 部署站点</h3>\n<p dir="auto">把生成的 <code class="notranslate">public/</code> 静态内容目录上传到 GitHub，开启 GitHub/Gitee Pages，并且绑定 cname 域名即可。</p>\n<h2 dir="auto">使用说明与技巧</h2>\n<p dir="auto">这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。</p>\n<h3 dir="auto">左导航栏图标</h3>\n<p dir="auto">左侧、顶部导航栏图标用的都是 <strong>Font Awesome</strong> 图标库 <strong>v5</strong> 版本 <strong>Free</strong> 的图标。链接如下：</p>\n<p dir="auto">🔗 <a href="https://fontawesome.com/v5/search?o=r&amp;m=free" rel="nofollow">https://fontawesome.com/v5/search?o=r&amp;m=free</a></p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0b2ed5568695608cc7429ce2864bdaf852552a59758232521b10e111862c13e4/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f48643777373241796b4a475372627a7474486747693456716c592e706e67"><img src="https://camo.githubusercontent.com/0b2ed5568695608cc7429ce2864bdaf852552a59758232521b10e111862c13e4/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f48643777373241796b4a475372627a7474486747693456716c592e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FoHd7w72AykJGSrbzttHgGi4VqlY.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">调整头部搜索栏</h3>\n<p dir="auto">头部搜索栏的默认位置可以通过下面的方法进行修改。</p>\n<ol dir="auto">\n<li>直接修改 <strong>layouts/partials/content_search.html</strong>，调整对应部分的位置。</li>\n<li>调整默认的搜索（即点击"常用/搜索/工具 ...." 时下指箭头的指向），把对应的 id 添加到对应的 label 里面。</li>\n</ol>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/865e50a7d6c31e3d85daf332b5fe5fc3681522744a4ec76d6ccc90751ba5418b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f504d41537367726750794653734a793848765072677138454c4e2e706e67"><img src="https://camo.githubusercontent.com/865e50a7d6c31e3d85daf332b5fe5fc3681522744a4ec76d6ccc90751ba5418b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f504d41537367726750794653734a793848765072677138454c4e2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FoPMASsgrgPyFSsJy8HvPrgq8ELN.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/90b474a4ce2d3be60c26d29aa5312131b89f11d2896722c1a3ee74d682bc9c89/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467030664a6d62664a5664675f68565031554c64685f4d6d6a4363582e706e67"><img src="https://camo.githubusercontent.com/90b474a4ce2d3be60c26d29aa5312131b89f11d2896722c1a3ee74d682bc9c89/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467030664a6d62664a5664675f68565031554c64685f4d6d6a4363582e706e67" alt="2022.09.21-10.48.55.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fp0fJmbfJVdg_hVP1ULdh_MmjCcX.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">自定义头部导航</h3>\n<p dir="auto"><a href="https://github.com/shenweiyan/WebStack-Hugo">WebStack-Hugo</a> 把头部的导航菜单的各个信息集成在了 <strong>data/header.yml</strong> 文件中，每个人可以根据自己的需要调整。</p>\n<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="- item: 首页\n  icon: fa fa-home\n  link: &quot;./&quot;\n\n- item: 作者\n  icon: fa fa-book\n  link: https://www.yuque.com/shenweiyan\n\n- item: 配置\n  icon: fa fa-cog\n  link: &quot;&quot;\n  list:\n    - name: 源码\n      url: &quot;#&quot;\n    - name: 图标\n      url: &quot;#&quot;"><pre class="notranslate">- <span class="pl-ent">item</span>: <span class="pl-s">首页</span>\n  <span class="pl-ent">icon</span>: <span class="pl-s">fa fa-home</span>\n  <span class="pl-ent">link</span>: <span class="pl-s"><span class="pl-pds">"</span>./<span class="pl-pds">"</span></span>\n\n- <span class="pl-ent">item</span>: <span class="pl-s">作者</span>\n  <span class="pl-ent">icon</span>: <span class="pl-s">fa fa-book</span>\n  <span class="pl-ent">link</span>: <span class="pl-s">https://www.yuque.com/shenweiyan</span>\n\n- <span class="pl-ent">item</span>: <span class="pl-s">配置</span>\n  <span class="pl-ent">icon</span>: <span class="pl-s">fa fa-cog</span>\n  <span class="pl-ent">link</span>: <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>\n  <span class="pl-ent">list</span>:\n    - <span class="pl-ent">name</span>: <span class="pl-s">源码</span>\n      <span class="pl-ent">url</span>: <span class="pl-s"><span class="pl-pds">"</span>#<span class="pl-pds">"</span></span>\n    - <span class="pl-ent">name</span>: <span class="pl-s">图标</span>\n      <span class="pl-ent">url</span>: <span class="pl-s"><span class="pl-pds">"</span>#<span class="pl-pds">"</span></span></pre></div>\n<h3 dir="auto">获取网站图标</h3>\n<p dir="auto"><a href="https://nav.bioitee.com/" rel="nofollow">Bio &amp; IT 网址导航</a>默认使用的是个人收集的网站图标，主要是查看网站源码、百度、谷歌等途径把对应导航的图标下载下来，这个方法比较原始繁琐，适合导航不是很多的情况。</p>\n<p dir="auto">你也可以使用一为提供的的 <a href="https://www.iowen.cn/tag/favicon/" rel="nofollow">Favicon</a> 图标 <a href="https://www.iowen.cn/tag/api/" rel="nofollow">API</a>：<a href="https://api.iowen.cn/doc/favicon.html" rel="nofollow">获取网站 Favicon - 免费API数据接口调用服务平台</a>。</p>\n<p dir="auto"><strong>使用方法：</strong></p>\n<ol dir="auto">\n<li>获取 Favicon 图标</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="https://api.iowen.cn/favicon/www.iowen.cn.png"><pre class="notranslate"><code class="notranslate">https://api.iowen.cn/favicon/www.iowen.cn.png\n</code></pre></div>\n<ol start="2" dir="auto">\n<li>刷新缓存</li>\n</ol>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="https://api.iowen.cn/favicon/www.iowen.cn.png?refresh=true"><pre class="notranslate"><code class="notranslate">https://api.iowen.cn/favicon/www.iowen.cn.png?refresh=true\n</code></pre></div>\n<ol start="3" dir="auto">\n<li>将上方代码中的 <code class="notranslate">www.iowen.cn</code> 替换为你需要获取的网址域名。</li>\n</ol>\n<h2 dir="auto">已知问题</h2>\n<ol dir="auto">\n<li>日间模式与夜间模式切换时候，头部搜索栏的背景图片切换不够流畅（个人的 js 知识有限，在 footer.html 做了一些简单的调整来实现），如果你有更好的想法，欢迎 PR 或者交流。</li>\n</ol>\n<h2 dir="auto">感谢墙</h2>\n<p dir="auto">本主题的部分代码参考了以下几个开源项目，特此感谢。</p>\n<ul dir="auto">\n<li><a href="https://github.com/WebStackPage/WebStackPage.github.io">WebStackPage/WebStackPage.github.io</a></li>\n<li><a href="https://github.com/liutongxu/liutongxu.github.io">liutongxu/liutongxu.github.io</a></li>\n<li><a href="https://github.com/iplaycode/webstack-hugo">iplaycode/webstack-hugo</a></li>\n</ul>\n<p dir="auto">感谢 <a href="https://github.com/WebStackPage/WebStackPage.github.io">WebStack</a> 的作者 <a href="https://twitter.com/decohack" rel="nofollow">Viggo</a> 的肯定和<a href="https://twitter.com/decohack/status/1569188705478516738" rel="nofollow">推广宣传</a>。</p>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/90856ada448c018c6a13f2d1484134f5333922cd474c13ba3c2fbaed60db9a62/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46754a514b4d6e77616a56632d64693866494a4f364d7539773661372e706e67"><img src="https://camo.githubusercontent.com/90856ada448c018c6a13f2d1484134f5333922cd474c13ba3c2fbaed60db9a62/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46754a514b4d6e77616a56632d64693866494a4f364d7539773661372e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FuJQKMnwajVc-di8fIJO6Mu9w6a7.png" style="max-width: 100%;"></a></p>\n<p dir="auto">感谢以下所有朋友对本主题所做出的贡献。<br>\n<strong><a href="https://github.com/yinhanghang">@yanbeiyinhanghang</a></strong><br>\n<strong><a href="https://github.com/jetsung">@jetsung</a></strong></p>\n<h2 dir="auto">赞赏</h2>\n<p dir="auto">如果你觉得本项目对你有所帮助，欢迎请作者喝杯热咖啡 &gt;.&lt;<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/49caa6dc82c27e816ab545dcc92fd4da103ee8f88f725ddf7f30c32b3bfb9408/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466834353377663644625a6f7175415f473677424d575333755947432e6a706567"><img src="https://camo.githubusercontent.com/49caa6dc82c27e816ab545dcc92fd4da103ee8f88f725ddf7f30c32b3bfb9408/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466834353377663644625a6f7175415f473677424d575333755947432e6a706567" alt="donate-wecaht-aliapy.jpg" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fh453wf6DbZoquA_G6wBMWS3uYGC.jpeg" style="max-width: 100%;"></a></p>\n<h2 dir="auto">反馈与交流</h2>\n<p dir="auto">最后，最重要的，秉承 WebStack 的宗旨，这是一个开源的公益项目，你可以拿来制作自己的网址导航，也可以做与导航无关的网站。</p>\n<p dir="auto">WebStack 有非常多的魔改版本，这是其中一个。</p>\n<p dir="auto"><strong>如果你对本主题进行了一些个性化调整，欢迎在本项目中 <a href="https://github.com/shenweiyan/WebStack-Hugo/issues"><strong>issues</strong></a> 中一起分享交流！</strong></p>\n<p dir="auto"><strong>如果参考本主题构建了属于你自己的网址导航，欢迎在本评论区（或源码 <a href="https://github.com/shenweiyan/WebStack-Hugo/issues"><strong>issues</strong></a> 区）留下你网站的访问链接 &gt;.&lt;</strong></p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '语雀'}, {'name': '1.3.25-静态网站'}]}, 'comments': {'nodes': [{'body': 'Built in 35 ms\r\nEnvironment: "development"\r\nServing pages from memory\r\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\r\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\r\nPress Ctrl+C to stop\r\n\r\nCMD显示了这个，但是打开http://127.0.0.1:1313/ 显示的是Page Not Found\r\n\r\n我有重命名对应文件夹，但是全部放在E盘，然后下载的是hugo_0.120.4_windows-amd64 （没有）\r\n\r\n重新下载了[hugo_0.89.4_Windows-64bit.zip](https://github.com/gohugoio/hugo/releases/download/v0.89.4/hugo_0.89.4_Windows-64bit.zip) \r\n\r\n名字一模一样 问题 解决', 'author': {'login': 'CharlieLZ'}}]}}, {'title': '在 Linux 上给用户赋予指定目录的读写权限', 'number': 9, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/9', 'createdAt': '2023-10-23T05:16:10Z', 'lastEditedAt': '2023-10-23T05:20:04Z', 'updatedAt': '2024-01-03T07:58:17Z', 'body': '在 Linux 上指定目录的读写权限赋予用户，有两种方法可以实现这个目标：第一种是使用 ACL (访问控制列表)，第二种是创建用户组来管理文件权限，下面会一一介绍。为了完成这个教程，我们将使用以下设置：\r\n\r\n- 操作系统：CentOS 7\r\n- 测试目录：/data/share\r\n- 测试用户：shenweiyan\r\n- 文件系统类型：ext4\r\n\r\n请确认所有的命令都是使用 root 用户执行的，或者使用 sudo 命令来享受与之同样的权限。让我们开始吧！下面，先使用 mkdir 命令来创建一个名为 share 的目录。\r\n\r\n```bash\r\n$ mkdir -p /data/share\r\n```\r\n\r\n## 1. 使用 ACL 来为用户赋予目录的读写权限\r\n\r\n**重要提示：** 打算使用此方法的话，您需要确认您的 Linux 文件系统类型（如 ext3 和 ext4, NTFS, BTRFS）支持 ACL。\r\n\r\n**1.1. 首先， 依照以下命令在您的系统中检查当前文件系统类型，并且查看内核是否支持 ACL：**\r\n\r\n```bash\r\n$ df -T | awk \'{print $1,$2,$NF}\' | grep "^/dev"\r\n$ grep -i acl /boot/config*\r\n```\r\n\r\n从下方的截屏可以看到，文件系统类型是 ext4，并且从 CONFIG_EXT4_FS_POSIX_ACL=y 选项可以发现内核是支持 POSIX ACL 的。\r\n![](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmYmZeCp5xG3nJs8Z7LUaA-QzME7.png)\r\n\r\n**1.2. 查看文件系统（分区）挂载时是否使用了 ACL 选项。**\r\n\r\n```bash\r\n$ tune2fs -l /dev/vda1 | grep acl\r\n```\r\n\r\n![](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FjbOrbZJgdXuVum5OsrQITWOjnn1.png)\r\n通过上边的输出可以发现，默认的挂载项目中已经对 ACL 进行了支持。如果发现结果不如所愿，你可以通过以下命令对指定分区（此例中使用 /dev/sda3）开启 ACL 的支持）。\r\n\r\n```bash\r\n$ mount -o remount,acl /\r\n$ tune2fs -o acl /dev/sda3\r\n```\r\n\r\n**1.3. 指定目录 share 的读写权限分配给名为 shenweiyan 的用户了，依照以下命令执行即可。**\r\n\r\n```bash\r\n# 检查目录默认的 ACL 设置（Check the default ACL settings for the directory）\r\n$ getfacl /data/share\r\n\r\n# 指定用户读写权限（Give rw access to user shenweiyan）\r\n# 对于目录必须增加 x (执行)权限, 否则无法进入目录\r\n$ setfacl -m user:shenweiyan:rwx /data/share\r\n\r\n# 再次检查目录 ACL 设置（Check new ACL settings for the directory）\r\n$ getfacl /data/share\r\n```\r\n\r\n![](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FkspVGfvw4EAuZvACndk2GaDBnA6.png)\r\n在上方的截屏中，通过输出结果的第二行 getfacl 命令可以发现，用户 shenweiyan 已经成功的被赋予了 /data/share 目录的读写权限。\r\n\r\n如果想要获取 ACL 列表的更多信息。请参考：\r\n\r\n- [如何使用访问控制列表（ACL）为用户/组设置磁盘配额](http://www.tecmint.com/set-access-control-lists-acls-and-disk-quotas-for-users-groups/)\r\n- [如何使用访问控制列表（ACL）挂载网络共享](http://www.tecmint.com/rhcsa-exam-configure-acls-and-mount-nfs-samba-shares/)\r\n\r\n## 2. 使用用户组来为用户赋予指定目录的读写权限\r\n\r\n**2.1. 如果用户已经拥有了默认的用户组（通常组名与用户名相同），就可以简单的通过变更文件夹的所属用户组来完成。**\r\n\r\n```python\r\n$ chgrp shenweiyan /data/share\r\n```\r\n\r\n另外，我们也可以通过以下方法为多个用户（需要赋予指定目录读写权限的）新建一个用户组。如此一来，也就创建了一个共享目录。\r\n\r\n```python\r\n$ groupadd dbshare\r\n```\r\n\r\n**2.2. 接下来将用户 shenweiyan 添加到 dbshare 组中：**\r\n\r\n```python\r\n# add user to projects\r\n$ usermod -aG dbshare shenweiyan\r\n\r\n# check users groups\r\n$ groups tecmint\r\n```\r\n\r\n**2.3. 将目录的所属用户组变更为 dbshare：**\r\n\r\n```python\r\n$ chgrp projects /data/share\r\n```\r\n\r\n**2.4. 现在，给组成员设置读写权限。**\r\n\r\n```bash\r\n$ chmod -R 0760 /data/share\r\n\r\n# check new permissions\r\n$ ls -l /data/share\r\n```\r\n\r\nok，在 Linux 上给用户赋予指定目录的读写权限就介绍到这里 ！\r\n\r\n## 3. 参考资料\r\n\r\n- 高延斌，《[Linux ACL 体验](https://www.ibm.com/developerworks/cn/linux/l-acl/index.html)》，IBM Developer\r\n- Mr-Ping，《在 Linux 上给用户赋予指定目录的读写权限》，Linux 中国\r\n', 'bodyText': '在 Linux 上指定目录的读写权限赋予用户，有两种方法可以实现这个目标：第一种是使用 ACL (访问控制列表)，第二种是创建用户组来管理文件权限，下面会一一介绍。为了完成这个教程，我们将使用以下设置：\n\n操作系统：CentOS 7\n测试目录：/data/share\n测试用户：shenweiyan\n文件系统类型：ext4\n\n请确认所有的命令都是使用 root 用户执行的，或者使用 sudo 命令来享受与之同样的权限。让我们开始吧！下面，先使用 mkdir 命令来创建一个名为 share 的目录。\n$ mkdir -p /data/share\n1. 使用 ACL 来为用户赋予目录的读写权限\n重要提示： 打算使用此方法的话，您需要确认您的 Linux 文件系统类型（如 ext3 和 ext4, NTFS, BTRFS）支持 ACL。\n1.1. 首先， 依照以下命令在您的系统中检查当前文件系统类型，并且查看内核是否支持 ACL：\n$ df -T | awk \'{print $1,$2,$NF}\' | grep "^/dev"\n$ grep -i acl /boot/config*\n从下方的截屏可以看到，文件系统类型是 ext4，并且从 CONFIG_EXT4_FS_POSIX_ACL=y 选项可以发现内核是支持 POSIX ACL 的。\n\n1.2. 查看文件系统（分区）挂载时是否使用了 ACL 选项。\n$ tune2fs -l /dev/vda1 | grep acl\n\n通过上边的输出可以发现，默认的挂载项目中已经对 ACL 进行了支持。如果发现结果不如所愿，你可以通过以下命令对指定分区（此例中使用 /dev/sda3）开启 ACL 的支持）。\n$ mount -o remount,acl /\n$ tune2fs -o acl /dev/sda3\n1.3. 指定目录 share 的读写权限分配给名为 shenweiyan 的用户了，依照以下命令执行即可。\n# 检查目录默认的 ACL 设置（Check the default ACL settings for the directory）\n$ getfacl /data/share\n\n# 指定用户读写权限（Give rw access to user shenweiyan）\n# 对于目录必须增加 x (执行)权限, 否则无法进入目录\n$ setfacl -m user:shenweiyan:rwx /data/share\n\n# 再次检查目录 ACL 设置（Check new ACL settings for the directory）\n$ getfacl /data/share\n\n在上方的截屏中，通过输出结果的第二行 getfacl 命令可以发现，用户 shenweiyan 已经成功的被赋予了 /data/share 目录的读写权限。\n如果想要获取 ACL 列表的更多信息。请参考：\n\n如何使用访问控制列表（ACL）为用户/组设置磁盘配额\n如何使用访问控制列表（ACL）挂载网络共享\n\n2. 使用用户组来为用户赋予指定目录的读写权限\n2.1. 如果用户已经拥有了默认的用户组（通常组名与用户名相同），就可以简单的通过变更文件夹的所属用户组来完成。\n$ chgrp shenweiyan /data/share\n另外，我们也可以通过以下方法为多个用户（需要赋予指定目录读写权限的）新建一个用户组。如此一来，也就创建了一个共享目录。\n$ groupadd dbshare\n2.2. 接下来将用户 shenweiyan 添加到 dbshare 组中：\n# add user to projects\n$ usermod -aG dbshare shenweiyan\n\n# check users groups\n$ groups tecmint\n2.3. 将目录的所属用户组变更为 dbshare：\n$ chgrp projects /data/share\n2.4. 现在，给组成员设置读写权限。\n$ chmod -R 0760 /data/share\n\n# check new permissions\n$ ls -l /data/share\nok，在 Linux 上给用户赋予指定目录的读写权限就介绍到这里 ！\n3. 参考资料\n\n高延斌，《Linux ACL 体验》，IBM Developer\nMr-Ping，《在 Linux 上给用户赋予指定目录的读写权限》，Linux 中国', 'bodyHTML': '<p dir="auto">在 Linux 上指定目录的读写权限赋予用户，有两种方法可以实现这个目标：第一种是使用 ACL (访问控制列表)，第二种是创建用户组来管理文件权限，下面会一一介绍。为了完成这个教程，我们将使用以下设置：</p>\n<ul dir="auto">\n<li>操作系统：CentOS 7</li>\n<li>测试目录：/data/share</li>\n<li>测试用户：shenweiyan</li>\n<li>文件系统类型：ext4</li>\n</ul>\n<p dir="auto">请确认所有的命令都是使用 root 用户执行的，或者使用 sudo 命令来享受与之同样的权限。让我们开始吧！下面，先使用 mkdir 命令来创建一个名为 share 的目录。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ mkdir -p /data/share"><pre class="notranslate">$ mkdir -p /data/share</pre></div>\n<h2 dir="auto">1. 使用 ACL 来为用户赋予目录的读写权限</h2>\n<p dir="auto"><strong>重要提示：</strong> 打算使用此方法的话，您需要确认您的 Linux 文件系统类型（如 ext3 和 ext4, NTFS, BTRFS）支持 ACL。</p>\n<p dir="auto"><strong>1.1. 首先， 依照以下命令在您的系统中检查当前文件系统类型，并且查看内核是否支持 ACL：</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ df -T | awk \'{print $1,$2,$NF}\' | grep &quot;^/dev&quot;\n$ grep -i acl /boot/config*"><pre class="notranslate">$ df -T <span class="pl-k">|</span> awk <span class="pl-s"><span class="pl-pds">\'</span>{print $1,$2,$NF}<span class="pl-pds">\'</span></span> <span class="pl-k">|</span> grep <span class="pl-s"><span class="pl-pds">"</span>^/dev<span class="pl-pds">"</span></span>\n$ grep -i acl /boot/config<span class="pl-k">*</span></pre></div>\n<p dir="auto">从下方的截屏可以看到，文件系统类型是 ext4，并且从 CONFIG_EXT4_FS_POSIX_ACL=y 选项可以发现内核是支持 POSIX ACL 的。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ce3cc4fcca9300555252f8e68d62db290d42021153322d9cc5c3dcf8cf20ed6b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d596d5a654370357847336e4a73385a374c5561412d517a4d45372e706e67"><img src="https://camo.githubusercontent.com/ce3cc4fcca9300555252f8e68d62db290d42021153322d9cc5c3dcf8cf20ed6b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d596d5a654370357847336e4a73385a374c5561412d517a4d45372e706e67" alt="" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmYmZeCp5xG3nJs8Z7LUaA-QzME7.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>1.2. 查看文件系统（分区）挂载时是否使用了 ACL 选项。</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ tune2fs -l /dev/vda1 | grep acl"><pre class="notranslate">$ tune2fs -l /dev/vda1 <span class="pl-k">|</span> grep acl</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1d17bbbfc15f0ba5b2e78d14ba49cc8b60808d3f836470fd1eac025a9cbc443b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a624f72625a4a6764587556756d354f7372514954574f6a6e6e312e706e67"><img src="https://camo.githubusercontent.com/1d17bbbfc15f0ba5b2e78d14ba49cc8b60808d3f836470fd1eac025a9cbc443b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a624f72625a4a6764587556756d354f7372514954574f6a6e6e312e706e67" alt="" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FjbOrbZJgdXuVum5OsrQITWOjnn1.png" style="max-width: 100%;"></a><br>\n通过上边的输出可以发现，默认的挂载项目中已经对 ACL 进行了支持。如果发现结果不如所愿，你可以通过以下命令对指定分区（此例中使用 /dev/sda3）开启 ACL 的支持）。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ mount -o remount,acl /\n$ tune2fs -o acl /dev/sda3"><pre class="notranslate">$ mount -o remount,acl /\n$ tune2fs -o acl /dev/sda3</pre></div>\n<p dir="auto"><strong>1.3. 指定目录 share 的读写权限分配给名为 shenweiyan 的用户了，依照以下命令执行即可。</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# 检查目录默认的 ACL 设置（Check the default ACL settings for the directory）\n$ getfacl /data/share\n\n# 指定用户读写权限（Give rw access to user shenweiyan）\n# 对于目录必须增加 x (执行)权限, 否则无法进入目录\n$ setfacl -m user:shenweiyan:rwx /data/share\n\n# 再次检查目录 ACL 设置（Check new ACL settings for the directory）\n$ getfacl /data/share"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> 检查目录默认的 ACL 设置（Check the default ACL settings for the directory）</span>\n$ getfacl /data/share\n\n<span class="pl-c"><span class="pl-c">#</span> 指定用户读写权限（Give rw access to user shenweiyan）</span>\n<span class="pl-c"><span class="pl-c">#</span> 对于目录必须增加 x (执行)权限, 否则无法进入目录</span>\n$ setfacl -m user:shenweiyan:rwx /data/share\n\n<span class="pl-c"><span class="pl-c">#</span> 再次检查目录 ACL 设置（Check new ACL settings for the directory）</span>\n$ getfacl /data/share</pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b6c606f0c1883b220b2751305b40fa7592544119650cc93e5d8d8996bcdfe385/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b73705647667677344541755a7641436e646b32476144426e41362e706e67"><img src="https://camo.githubusercontent.com/b6c606f0c1883b220b2751305b40fa7592544119650cc93e5d8d8996bcdfe385/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b73705647667677344541755a7641436e646b32476144426e41362e706e67" alt="" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FkspVGfvw4EAuZvACndk2GaDBnA6.png" style="max-width: 100%;"></a><br>\n在上方的截屏中，通过输出结果的第二行 getfacl 命令可以发现，用户 shenweiyan 已经成功的被赋予了 /data/share 目录的读写权限。</p>\n<p dir="auto">如果想要获取 ACL 列表的更多信息。请参考：</p>\n<ul dir="auto">\n<li><a href="http://www.tecmint.com/set-access-control-lists-acls-and-disk-quotas-for-users-groups/" rel="nofollow">如何使用访问控制列表（ACL）为用户/组设置磁盘配额</a></li>\n<li><a href="http://www.tecmint.com/rhcsa-exam-configure-acls-and-mount-nfs-samba-shares/" rel="nofollow">如何使用访问控制列表（ACL）挂载网络共享</a></li>\n</ul>\n<h2 dir="auto">2. 使用用户组来为用户赋予指定目录的读写权限</h2>\n<p dir="auto"><strong>2.1. 如果用户已经拥有了默认的用户组（通常组名与用户名相同），就可以简单的通过变更文件夹的所属用户组来完成。</strong></p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ chgrp shenweiyan /data/share"><pre class="notranslate">$ <span class="pl-s1">chgrp</span> <span class="pl-s1">shenweiyan</span> <span class="pl-c1">/</span><span class="pl-s1">data</span><span class="pl-c1">/</span><span class="pl-s1">share</span></pre></div>\n<p dir="auto">另外，我们也可以通过以下方法为多个用户（需要赋予指定目录读写权限的）新建一个用户组。如此一来，也就创建了一个共享目录。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ groupadd dbshare"><pre class="notranslate">$ <span class="pl-s1">groupadd</span> <span class="pl-s1">dbshare</span></pre></div>\n<p dir="auto"><strong>2.2. 接下来将用户 shenweiyan 添加到 dbshare 组中：</strong></p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# add user to projects\n$ usermod -aG dbshare shenweiyan\n\n# check users groups\n$ groups tecmint"><pre class="notranslate"><span class="pl-c"># add user to projects</span>\n$ <span class="pl-s1">usermod</span> <span class="pl-c1">-</span><span class="pl-s1">aG</span> <span class="pl-s1">dbshare</span> <span class="pl-s1">shenweiyan</span>\n\n<span class="pl-c"># check users groups</span>\n$ <span class="pl-s1">groups</span> <span class="pl-s1">tecmint</span></pre></div>\n<p dir="auto"><strong>2.3. 将目录的所属用户组变更为 dbshare：</strong></p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ chgrp projects /data/share"><pre class="notranslate">$ <span class="pl-s1">chgrp</span> <span class="pl-s1">projects</span> <span class="pl-c1">/</span><span class="pl-s1">data</span><span class="pl-c1">/</span><span class="pl-s1">share</span></pre></div>\n<p dir="auto"><strong>2.4. 现在，给组成员设置读写权限。</strong></p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ chmod -R 0760 /data/share\n\n# check new permissions\n$ ls -l /data/share"><pre class="notranslate">$ chmod -R 0760 /data/share\n\n<span class="pl-c"><span class="pl-c">#</span> check new permissions</span>\n$ ls -l /data/share</pre></div>\n<p dir="auto">ok，在 Linux 上给用户赋予指定目录的读写权限就介绍到这里 ！</p>\n<h2 dir="auto">3. 参考资料</h2>\n<ul dir="auto">\n<li>高延斌，《<a href="https://www.ibm.com/developerworks/cn/linux/l-acl/index.html" rel="nofollow">Linux ACL 体验</a>》，IBM Developer</li>\n<li>Mr-Ping，《在 Linux 上给用户赋予指定目录的读写权限》，Linux 中国</li>\n</ul>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '1.3.17-服务器配置使用'}]}, 'comments': {'nodes': []}}, {'title': '个人域名跳转至语雀个人主页', 'number': 8, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/8', 'createdAt': '2023-10-23T01:51:34Z', 'lastEditedAt': '2023-10-23T01:54:54Z', 'updatedAt': '2024-01-03T07:58:05Z', 'body': '> 📢 域名 [https://weiyan.cc](https://weiyan.cc) 就是基于本文章中的 "**[无服务器](#pG3U6)**" 步骤实现的个人域名跳转至语雀个人主页！因此，本篇文档你也可以通过以下的链接访问：[https://weiyan.cc/cookbook/301-redirects](https://weiyan.cc/cookbook/301-redirects)！\r\n\r\n语雀的个人使用目前是不支持自定义域名的，虽然空间的使用可以自定义二级域名，如：[weiyan.yuque.com](https://weiyan.yuque.com/)，但是空间知识库必须要先登录，不方便其他人查看，尤其是对于没有注册语雀的用户。\r\n\r\n现在的情况是，我有一个已经备案的个人域名 `www.example.com`，现在我想：\r\n\r\n- 让所有 `www.example.com` 的访问地址都跳转到 <https://www.yuque.com/shenweiyan>，比如 `https://www.example.com/cookbook` 跳转到 <https://www.yuque.com/shenweiyan/cookbook>。\r\n- `www.example.com` 的访问地址跳转同时支持 http/https。\r\n- `example.com/www.example.com` 同时实现以上跳转。\r\n\r\n反正就一句话，让下面的链接都跳转到 <https://www.yuque.com/shenweiyan>：\r\n\r\n- <http://example.com>\r\n- <http://www.example.com>\r\n- <https://example.com>\r\n- <https://www.example.com>\r\n\r\n下面简单记录一下具体的实现过程。\r\n\r\n## 背景知识\r\n\r\n**显性 URL 转发：** 用的是 301 重定向技术，效果为浏览器地址栏输入 [http://a.com](http://a.com/) 回车，打开网站内容是目标地址 <http://cloud.baidu.com/> 的网站内容，且地址栏显示目标地址 [http://cloud.baidu.com/](http://cloud.baidu.com/) 。\r\n\r\n**隐性 URL 转发：** 用的是 iframe 框架技术、非重定向技术，效果为浏览器地址栏输入 [http://a.com](http://a.com/) 回车，打开网站内容是目标地址 <http://cloud.baidu.com/> 的网站内容，但地址栏显示当前地址 [http://a.com](http://a.com/) 。\r\n\r\n**301 重定向是什么？**\r\n\r\n301 重定向表示网页由一个地址永久地移动到了另外一个地址。这里中的 301 是被重定向网页的 HTTP 状态代码。\r\n\r\n**例如：** [blog.ahrefs.com](https://blog.ahrefs.com/) 重定向到了 [ahrefs.com/blog](https://ahrefs.com/blog)。\r\n\r\n简单来说，301 重定向是在告诉浏览器：“这个页面已经永久迁移了。这个是新的地址，我们不打算把它移回去啦。”这时，浏览器会回复：“没问题！我现在（开始）就把用户引向这里！”\r\n\r\n这就是为什么访问 blog.ahrefs.com 已经不可能了。你最后会去到的网页是 ahrefs.com/blog。\r\n\r\n## 前提条件\r\n\r\n前提条件可以分为**有服务器**和**无服务器**两种情况，下面具体说一下。\r\n\r\n1.  有服务器（可以考虑腾讯云或者阿里云的轻量云服务器，双十一优惠价一年也就几十块）；\r\n\r\n    - 阿里云轻量云服务器：[购买链接](https://www.aliyun.com/activity/1111?userCode=mx65q35j)\r\n    - 腾讯云轻量云服务器：[购买链接](https://curl.qcloud.com/0Sy0R0AX)\r\n    - 域名（域名需要已经完成备案）；\r\n    - SSL 证书（可以使用阿里云或者腾讯云的免费域名证书）；\r\n\r\n2.  无服务器\r\n    - 可以考虑使用 [Cloudflare Page Rules](https://support.cloudflare.com/hc/zh-cn/articles/218411427)（页面规则）；当然，其他的平台也可以；\r\n    - 域名（有些域名可以不用备案）；\r\n    - SSL 证书（如果你用的是 [Cloudflare Page Rules](https://support.cloudflare.com/hc/zh-cn/articles/218411427)，可以不用 SSL 证书 ）。\r\n\r\n## 操作步骤：有服务器\r\n\r\n本操作以 **ncbix.com** 域名为示例。\r\n\r\n### 1. 域名解析\r\n\r\n在你的域名供应商后台点击“添加记录”，分别输入 www 和 @，记录类型“A”，记录值就是你虚拟主机或 VPS 服务器的 IP 地址，最后保存。以 DNSPOD 为例。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqvWUx6cyUz-O8d1avOdFZ1aDIWF.png)\r\n\r\n### 2. SSL 证书\r\n\r\n申请免费证书，具体操作可以自行百度。以腾讯云为例：<https://console.cloud.tencent.com/ssl>。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fo4XBIRStXxx27kvjKULIjHazdJ9.png)\r\n根据截图，一步步点击操作。申请完成后，把证书下载并上传到你的服务器。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqamrO4EBSQuO6wsJ28y8g-AH63E.png)\r\n\r\n### 3. 安装 Nginx\r\n\r\n可以直接使用 **yum/apt** 的方式直接安装；源码方式的安装，参考：《[CentOS 7 下编译安装 Nginx · 语雀](https://www.yuque.com/shenweiyan/cookbook/centos-install-nginx)》。\r\n\r\n```bash\r\n# Debian/Ubuntu\r\napt update\r\napt install nginx\r\n\r\n# CentOS/RHEL\r\nyum install nginx\r\n```\r\n\r\n### 4. 配置 Nginx\r\n\r\n通过 **yum/apt** 安装的 Nginx 默认的置文件在 **/etc/nginx/nginx.conf**，编辑该文件。\r\n\r\n```nginx\r\nhttp {\r\n    ##\r\n    # Basic Settings\r\n    ##\r\n    ......\r\n\r\n    ##\r\n    # Virtual Host Configs\r\n    ##\r\nserver {\r\n    listen 80;\r\n    listen 443 ssl;\r\n    server_name ncbix.com www.ncbix.com;\r\n    ssl_certificate /etc/nginx/ssl/nginx/www.ncbix.com_bundle.crt;\r\n    ssl_certificate_key /etc/nginx/ssl/nginx/www.ncbix.com.key;\r\n    index  index.php index.html index.htm;\r\n\r\n    if ( $scheme = "http" ) {\r\n        return 301 https://www.yuque.com/shenweiyan$request_uri; #确保跳转到新域名HTTPS如果没有HTTPS可以去掉\r\n    }\r\n    location / {\r\n        rewrite /.* https://www.yuque.com/shenweiyan$uri redirect; #跳转到新域名并重写为新域名\r\n    }\r\n  }\r\n\r\ninclude /etc/nginx/conf.d/*.conf;\r\n    include /etc/nginx/sites-enabled/*;\r\n}\r\n```\r\n\r\n### 5. 重启 Nginx\r\n\r\n最后，通过下面的命令重启 Nginx 服务即可。\r\n\r\n```bash\r\nservice nginx restart\r\n```\r\n\r\n## 操作步骤：无服务器\r\n\r\n我们以 [Cloudflare Page Rules](https://support.cloudflare.com/hc/zh-cn/articles/218411427) 为例，说明一下具体怎么操作。\r\n\r\n### 1. Cloudflare 中添加站点\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fjd2wS9yVs0ZiBBalZQVOuPQHbU1.png)\r\n\r\n添加完站点后，可以选择 **Free 计划**，然后点击继续：\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FumaUELUaIJnv9s0Q4paKUDIAWTL.png)\r\n\r\n点击继续后，Cloudflare 会自动扫描你对应域名的一些解析记录：\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtQZKAyQd_6dd5d7A_ZLCVp4NUEg.png)\r\n\r\n我们可以直接选择 **"继续"**。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fvkt0gHVP7lmiqapWf3pM7Zx4YwN.png)\r\n\r\n### 2. 修改域名 DNS\r\n\r\n首先，我的域名是在腾讯云注册的，可以去腾讯云控制台 **"我的域名"** 中直接修改 DNS：\r\n\r\n```\r\n# 添加 Cloudflare 名称服务器\r\nimani.ns.cloudflare.com\r\ncaroline.dnspod.net\r\n```\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FlKyYHHLGHwD9IPKYvLtPorghBpr.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmRwodrlbkBt6SkX7RsG2ec1iruc.png)\r\n\r\n### 3. 完成 Cloudflare 添加站点\r\n\r\n可以把后面快速指南的这几个配置都勾选。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtULJ4uM_TuPjPkkMtdXAhxpyDes.png)\r\n\r\n等待几分钟就可以看到你的域名站点已经添加到 Cloudflare 上了！\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fk8Hv5dkW8kHd1IorhNfT427RliQ.png)\r\n\r\n### 4. 设置 DNS 记录\r\n\r\n> The first thing you will need is a DNS record for **@**, **www** and any other subdomains you want to redirect, set to ![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FjjhP041Zj-aZVPAHpQ-YnHIzMA6.png). This can point to any IP address as the redirection page rule will execute first. I would recommend pointing them to 192.0.2.1 , a dummy IP.\r\n>\r\n> From：<https://community.cloudflare.com/t/redirecting-one-domain-to-another/81960>\r\n\r\n在配置 Cloudflare 站点的页面规则前，你需要把该域名的 **@**，**www** 或者其他你想要进行重定向的子域名添加到 DNS 记录中，这个记录的值可以指向任何 IP 地址，因为重定向页面规则将首先执行。我建议将它们指向 192.0.2.1 ，一个虚拟 IP。\r\n\r\n在这里，我们以 **@** 和 **note** 子域名为例，添加 DNS 记录，先让它们指向一个虚拟 IP。\r\n![images](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fk08ydFuPukTv88AAa0V27T4xTBh.png "以 ncbix.com 和 note.ncbix.com 为例，均重定向到 https://www.yuque.com/shenweiyan 页面")\r\n\r\n### 5. 配置 Cloudflare 站点页面规则\r\n\r\n首先，在 Cloudflare 的主页上点击对应的站点，选择 **"页面规则"**，点击。\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqolXaSzUdkgtKo66yRC3xRkV7mv.png)\r\n\r\n点击 **"创建页面规则"**：\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnF2bk6hzYvulCtXdLSQSUiV1Z44.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fp5DSLxKInn25a591hjYjDNpUeRn.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FiFuRSizKlmkmJ5LxiBfkIGreBdm.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtNPR2rLIFDKMYz3N8gqkLBcQFnG.png)\r\n\r\n#### 什么是页面规则？\r\n\r\n> 页面规则为 Cloudflare 设置提供基于 URL 的粒度控制。关于页面规则需要了解的最重要事情是，针对一个 URL 仅触发一个页面规则，因此一定要按照优先级顺序对页面规则进行排序并将最具体的页面规则放在顶部。\r\n\r\n##### 页面规则中允许哪些模式？\r\n\r\n> 如果使用的是转发页面规则，则可以将这些通配符映射到变量。在转发 URL 中，可以按照从左到右的顺序指定与原始 URL 中的通配符相匹配的 $1、$2，以此类推。\r\n>\r\n> 例如，可以将 `http://.example.com/` 转发到 `http://$2.example.com/$1.jpg`。此规则将与 <http://cloud.example.com/flare> 相匹配，这最终将转发到 <http://flare.example.com/cloud.jpg>。\r\n\r\n##### 一些有用的提示：\r\n\r\n> 1.  如果要同时匹配 http 和 https，只需编写 example.com 即可。无需编写 example.com。\r\n> 2.  如果要匹配域中的每个页面，则需要编写 example.com/，仅编写 example.com 是不够的。\r\n> 3.  请参阅 [了解和配置 Cloudflare 页面规则](https://support.cloudflare.com/hc/articles/218411427) 了解有关页面规则模式的更多详细信息。\r\n\r\n### 6. 配置 SSL(不必要)\r\n\r\n**📢 Update 2022.09.05：这一步不是必要的，这里仅供参考！**\r\n\r\n1.  申请 [www.example.com](http://www.example.com) 域名的 SSL 证书；\r\n2.  把 DNS 验证域名的记录添加到 Cloudfare 的 DNS 中；\r\n\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FiEmXujpQKK0j0p2GxzaOgTC3xwN.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnOHAmNIAcEmwBD_fv3eIUBzxmiB.png)\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtxcA4iXJhT029vkw35EVkDN-2QG.png)\r\n\r\n**注意：**\r\n![image.png](https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FgrIb03h7Inot6k7fa1BHGH4G3HO.png)\r\n\r\n## 参考资料\r\n\r\n1. [nginx 实现两个域名之间跳转配置 - SegmentFault 思否](https://segmentfault.com/q/1010000015157572)\r\n2. [智能云解析 DNS - 通过 Nginx 实现 URL 转发 | 百度智能云文档](https://cloud.baidu.com/doc/DNS/s/ukq4w1pji)\r\n3. [SEO 的 301 重定向：你需要知道的一切](https://ahrefs.com/blog/zh/301-redirects/)\r\n', 'bodyText': '📢 域名 https://weiyan.cc 就是基于本文章中的 "无服务器" 步骤实现的个人域名跳转至语雀个人主页！因此，本篇文档你也可以通过以下的链接访问：https://weiyan.cc/cookbook/301-redirects！\n\n语雀的个人使用目前是不支持自定义域名的，虽然空间的使用可以自定义二级域名，如：weiyan.yuque.com，但是空间知识库必须要先登录，不方便其他人查看，尤其是对于没有注册语雀的用户。\n现在的情况是，我有一个已经备案的个人域名 www.example.com，现在我想：\n\n让所有 www.example.com 的访问地址都跳转到 https://www.yuque.com/shenweiyan，比如 https://www.example.com/cookbook 跳转到 https://www.yuque.com/shenweiyan/cookbook。\nwww.example.com 的访问地址跳转同时支持 http/https。\nexample.com/www.example.com 同时实现以上跳转。\n\n反正就一句话，让下面的链接都跳转到 https://www.yuque.com/shenweiyan：\n\nhttp://example.com\nhttp://www.example.com\nhttps://example.com\nhttps://www.example.com\n\n下面简单记录一下具体的实现过程。\n背景知识\n显性 URL 转发： 用的是 301 重定向技术，效果为浏览器地址栏输入 http://a.com 回车，打开网站内容是目标地址 http://cloud.baidu.com/ 的网站内容，且地址栏显示目标地址 http://cloud.baidu.com/ 。\n隐性 URL 转发： 用的是 iframe 框架技术、非重定向技术，效果为浏览器地址栏输入 http://a.com 回车，打开网站内容是目标地址 http://cloud.baidu.com/ 的网站内容，但地址栏显示当前地址 http://a.com 。\n301 重定向是什么？\n301 重定向表示网页由一个地址永久地移动到了另外一个地址。这里中的 301 是被重定向网页的 HTTP 状态代码。\n例如： blog.ahrefs.com 重定向到了 ahrefs.com/blog。\n简单来说，301 重定向是在告诉浏览器：“这个页面已经永久迁移了。这个是新的地址，我们不打算把它移回去啦。”这时，浏览器会回复：“没问题！我现在（开始）就把用户引向这里！”\n这就是为什么访问 blog.ahrefs.com 已经不可能了。你最后会去到的网页是 ahrefs.com/blog。\n前提条件\n前提条件可以分为有服务器和无服务器两种情况，下面具体说一下。\n\n\n有服务器（可以考虑腾讯云或者阿里云的轻量云服务器，双十一优惠价一年也就几十块）；\n\n阿里云轻量云服务器：购买链接\n腾讯云轻量云服务器：购买链接\n域名（域名需要已经完成备案）；\nSSL 证书（可以使用阿里云或者腾讯云的免费域名证书）；\n\n\n\n无服务器\n\n可以考虑使用 Cloudflare Page Rules（页面规则）；当然，其他的平台也可以；\n域名（有些域名可以不用备案）；\nSSL 证书（如果你用的是 Cloudflare Page Rules，可以不用 SSL 证书 ）。\n\n\n\n操作步骤：有服务器\n本操作以 ncbix.com 域名为示例。\n1. 域名解析\n在你的域名供应商后台点击“添加记录”，分别输入 www 和 @，记录类型“A”，记录值就是你虚拟主机或 VPS 服务器的 IP 地址，最后保存。以 DNSPOD 为例。\n\n2. SSL 证书\n申请免费证书，具体操作可以自行百度。以腾讯云为例：https://console.cloud.tencent.com/ssl。\n\n根据截图，一步步点击操作。申请完成后，把证书下载并上传到你的服务器。\n\n3. 安装 Nginx\n可以直接使用 yum/apt 的方式直接安装；源码方式的安装，参考：《CentOS 7 下编译安装 Nginx · 语雀》。\n# Debian/Ubuntu\napt update\napt install nginx\n\n# CentOS/RHEL\nyum install nginx\n4. 配置 Nginx\n通过 yum/apt 安装的 Nginx 默认的置文件在 /etc/nginx/nginx.conf，编辑该文件。\nhttp {\n    ##\n    # Basic Settings\n    ##\n    ......\n\n    ##\n    # Virtual Host Configs\n    ##\nserver {\n    listen 80;\n    listen 443 ssl;\n    server_name ncbix.com www.ncbix.com;\n    ssl_certificate /etc/nginx/ssl/nginx/www.ncbix.com_bundle.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx/www.ncbix.com.key;\n    index  index.php index.html index.htm;\n\n    if ( $scheme = "http" ) {\n        return 301 https://www.yuque.com/shenweiyan$request_uri; #确保跳转到新域名HTTPS如果没有HTTPS可以去掉\n    }\n    location / {\n        rewrite /.* https://www.yuque.com/shenweiyan$uri redirect; #跳转到新域名并重写为新域名\n    }\n  }\n\ninclude /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n5. 重启 Nginx\n最后，通过下面的命令重启 Nginx 服务即可。\nservice nginx restart\n操作步骤：无服务器\n我们以 Cloudflare Page Rules 为例，说明一下具体怎么操作。\n1. Cloudflare 中添加站点\n\n添加完站点后，可以选择 Free 计划，然后点击继续：\n\n点击继续后，Cloudflare 会自动扫描你对应域名的一些解析记录：\n\n我们可以直接选择 "继续"。\n\n2. 修改域名 DNS\n首先，我的域名是在腾讯云注册的，可以去腾讯云控制台 "我的域名" 中直接修改 DNS：\n# 添加 Cloudflare 名称服务器\nimani.ns.cloudflare.com\ncaroline.dnspod.net\n\n\n\n3. 完成 Cloudflare 添加站点\n可以把后面快速指南的这几个配置都勾选。\n\n等待几分钟就可以看到你的域名站点已经添加到 Cloudflare 上了！\n\n4. 设置 DNS 记录\n\nThe first thing you will need is a DNS record for @, www and any other subdomains you want to redirect, set to . This can point to any IP address as the redirection page rule will execute first. I would recommend pointing them to 192.0.2.1 , a dummy IP.\nFrom：https://community.cloudflare.com/t/redirecting-one-domain-to-another/81960\n\n在配置 Cloudflare 站点的页面规则前，你需要把该域名的 @，www 或者其他你想要进行重定向的子域名添加到 DNS 记录中，这个记录的值可以指向任何 IP 地址，因为重定向页面规则将首先执行。我建议将它们指向 192.0.2.1 ，一个虚拟 IP。\n在这里，我们以 @ 和 note 子域名为例，添加 DNS 记录，先让它们指向一个虚拟 IP。\n\n5. 配置 Cloudflare 站点页面规则\n首先，在 Cloudflare 的主页上点击对应的站点，选择 "页面规则"，点击。\n\n点击 "创建页面规则"：\n\n\n\n\n什么是页面规则？\n\n页面规则为 Cloudflare 设置提供基于 URL 的粒度控制。关于页面规则需要了解的最重要事情是，针对一个 URL 仅触发一个页面规则，因此一定要按照优先级顺序对页面规则进行排序并将最具体的页面规则放在顶部。\n\n页面规则中允许哪些模式？\n\n如果使用的是转发页面规则，则可以将这些通配符映射到变量。在转发 URL 中，可以按照从左到右的顺序指定与原始 URL 中的通配符相匹配的 $1、$2，以此类推。\n例如，可以将 http://.example.com/ 转发到 http://$2.example.com/$1.jpg。此规则将与 http://cloud.example.com/flare 相匹配，这最终将转发到 http://flare.example.com/cloud.jpg。\n\n一些有用的提示：\n\n\n如果要同时匹配 http 和 https，只需编写 example.com 即可。无需编写 example.com。\n如果要匹配域中的每个页面，则需要编写 example.com/，仅编写 example.com 是不够的。\n请参阅 了解和配置 Cloudflare 页面规则 了解有关页面规则模式的更多详细信息。\n\n\n6. 配置 SSL(不必要)\n📢 Update 2022.09.05：这一步不是必要的，这里仅供参考！\n\n申请 www.example.com 域名的 SSL 证书；\n把 DNS 验证域名的记录添加到 Cloudfare 的 DNS 中；\n\n\n\n\n注意：\n\n参考资料\n\nnginx 实现两个域名之间跳转配置 - SegmentFault 思否\n智能云解析 DNS - 通过 Nginx 实现 URL 转发 | 百度智能云文档\nSEO 的 301 重定向：你需要知道的一切', 'bodyHTML': '<blockquote>\n<p dir="auto">📢 域名 <a href="https://weiyan.cc" rel="nofollow">https://weiyan.cc</a> 就是基于本文章中的 "<strong><a href="#pG3U6">无服务器</a></strong>" 步骤实现的个人域名跳转至语雀个人主页！因此，本篇文档你也可以通过以下的链接访问：<a href="https://weiyan.cc/cookbook/301-redirects" rel="nofollow">https://weiyan.cc/cookbook/301-redirects</a>！</p>\n</blockquote>\n<p dir="auto">语雀的个人使用目前是不支持自定义域名的，虽然空间的使用可以自定义二级域名，如：<a href="https://weiyan.yuque.com/" rel="nofollow">weiyan.yuque.com</a>，但是空间知识库必须要先登录，不方便其他人查看，尤其是对于没有注册语雀的用户。</p>\n<p dir="auto">现在的情况是，我有一个已经备案的个人域名 <code class="notranslate">www.example.com</code>，现在我想：</p>\n<ul dir="auto">\n<li>让所有 <code class="notranslate">www.example.com</code> 的访问地址都跳转到 <a href="https://www.yuque.com/shenweiyan" rel="nofollow">https://www.yuque.com/shenweiyan</a>，比如 <code class="notranslate">https://www.example.com/cookbook</code> 跳转到 <a href="https://www.yuque.com/shenweiyan/cookbook" rel="nofollow">https://www.yuque.com/shenweiyan/cookbook</a>。</li>\n<li><code class="notranslate">www.example.com</code> 的访问地址跳转同时支持 http/https。</li>\n<li><code class="notranslate">example.com/www.example.com</code> 同时实现以上跳转。</li>\n</ul>\n<p dir="auto">反正就一句话，让下面的链接都跳转到 <a href="https://www.yuque.com/shenweiyan" rel="nofollow">https://www.yuque.com/shenweiyan</a>：</p>\n<ul dir="auto">\n<li><a href="http://example.com" rel="nofollow">http://example.com</a></li>\n<li><a href="http://www.example.com" rel="nofollow">http://www.example.com</a></li>\n<li><a href="https://example.com" rel="nofollow">https://example.com</a></li>\n<li><a href="https://www.example.com" rel="nofollow">https://www.example.com</a></li>\n</ul>\n<p dir="auto">下面简单记录一下具体的实现过程。</p>\n<h2 dir="auto">背景知识</h2>\n<p dir="auto"><strong>显性 URL 转发：</strong> 用的是 301 重定向技术，效果为浏览器地址栏输入 <a href="http://a.com/" rel="nofollow">http://a.com</a> 回车，打开网站内容是目标地址 <a href="http://cloud.baidu.com/" rel="nofollow">http://cloud.baidu.com/</a> 的网站内容，且地址栏显示目标地址 <a href="http://cloud.baidu.com/" rel="nofollow">http://cloud.baidu.com/</a> 。</p>\n<p dir="auto"><strong>隐性 URL 转发：</strong> 用的是 iframe 框架技术、非重定向技术，效果为浏览器地址栏输入 <a href="http://a.com/" rel="nofollow">http://a.com</a> 回车，打开网站内容是目标地址 <a href="http://cloud.baidu.com/" rel="nofollow">http://cloud.baidu.com/</a> 的网站内容，但地址栏显示当前地址 <a href="http://a.com/" rel="nofollow">http://a.com</a> 。</p>\n<p dir="auto"><strong>301 重定向是什么？</strong></p>\n<p dir="auto">301 重定向表示网页由一个地址永久地移动到了另外一个地址。这里中的 301 是被重定向网页的 HTTP 状态代码。</p>\n<p dir="auto"><strong>例如：</strong> <a href="https://blog.ahrefs.com/" rel="nofollow">blog.ahrefs.com</a> 重定向到了 <a href="https://ahrefs.com/blog" rel="nofollow">ahrefs.com/blog</a>。</p>\n<p dir="auto">简单来说，301 重定向是在告诉浏览器：“这个页面已经永久迁移了。这个是新的地址，我们不打算把它移回去啦。”这时，浏览器会回复：“没问题！我现在（开始）就把用户引向这里！”</p>\n<p dir="auto">这就是为什么访问 blog.ahrefs.com 已经不可能了。你最后会去到的网页是 ahrefs.com/blog。</p>\n<h2 dir="auto">前提条件</h2>\n<p dir="auto">前提条件可以分为<strong>有服务器</strong>和<strong>无服务器</strong>两种情况，下面具体说一下。</p>\n<ol dir="auto">\n<li>\n<p dir="auto">有服务器（可以考虑腾讯云或者阿里云的轻量云服务器，双十一优惠价一年也就几十块）；</p>\n<ul dir="auto">\n<li>阿里云轻量云服务器：<a href="https://www.aliyun.com/activity/1111?userCode=mx65q35j" rel="nofollow">购买链接</a></li>\n<li>腾讯云轻量云服务器：<a href="https://curl.qcloud.com/0Sy0R0AX" rel="nofollow">购买链接</a></li>\n<li>域名（域名需要已经完成备案）；</li>\n<li>SSL 证书（可以使用阿里云或者腾讯云的免费域名证书）；</li>\n</ul>\n</li>\n<li>\n<p dir="auto">无服务器</p>\n<ul dir="auto">\n<li>可以考虑使用 <a href="https://support.cloudflare.com/hc/zh-cn/articles/218411427" rel="nofollow">Cloudflare Page Rules</a>（页面规则）；当然，其他的平台也可以；</li>\n<li>域名（有些域名可以不用备案）；</li>\n<li>SSL 证书（如果你用的是 <a href="https://support.cloudflare.com/hc/zh-cn/articles/218411427" rel="nofollow">Cloudflare Page Rules</a>，可以不用 SSL 证书 ）。</li>\n</ul>\n</li>\n</ol>\n<h2 dir="auto">操作步骤：有服务器</h2>\n<p dir="auto">本操作以 <strong>ncbix.com</strong> 域名为示例。</p>\n<h3 dir="auto">1. 域名解析</h3>\n<p dir="auto">在你的域名供应商后台点击“添加记录”，分别输入 www 和 @，记录类型“A”，记录值就是你虚拟主机或 VPS 服务器的 IP 地址，最后保存。以 DNSPOD 为例。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/758236dcba65babc08830dbb9d8643e762987573216b0128e916d3fc5acbd403/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467176575578366379557a2d4f38643161764f64465a3161444957462e706e67"><img src="https://camo.githubusercontent.com/758236dcba65babc08830dbb9d8643e762987573216b0128e916d3fc5acbd403/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f467176575578366379557a2d4f38643161764f64465a3161444957462e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqvWUx6cyUz-O8d1avOdFZ1aDIWF.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">2. SSL 证书</h3>\n<p dir="auto">申请免费证书，具体操作可以自行百度。以腾讯云为例：<a href="https://console.cloud.tencent.com/ssl" rel="nofollow">https://console.cloud.tencent.com/ssl</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f17af772a9fcd19ce34e05cf5558641939ad0bae3e3e908b8b03b6e0c4ab649a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f3458424952537458787832376b766a4b554c496a48617a644a392e706e67"><img src="https://camo.githubusercontent.com/f17af772a9fcd19ce34e05cf5558641939ad0bae3e3e908b8b03b6e0c4ab649a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466f3458424952537458787832376b766a4b554c496a48617a644a392e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fo4XBIRStXxx27kvjKULIjHazdJ9.png" style="max-width: 100%;"></a><br>\n根据截图，一步步点击操作。申请完成后，把证书下载并上传到你的服务器。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8f364461afe424285c1e4499308a1382b83f8c4f617c95ac00df879da3176943/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4671616d724f3445425351754f3677734a32387938672d41483633452e706e67"><img src="https://camo.githubusercontent.com/8f364461afe424285c1e4499308a1382b83f8c4f617c95ac00df879da3176943/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4671616d724f3445425351754f3677734a32387938672d41483633452e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqamrO4EBSQuO6wsJ28y8g-AH63E.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">3. 安装 Nginx</h3>\n<p dir="auto">可以直接使用 <strong>yum/apt</strong> 的方式直接安装；源码方式的安装，参考：《<a href="https://www.yuque.com/shenweiyan/cookbook/centos-install-nginx" rel="nofollow">CentOS 7 下编译安装 Nginx · 语雀</a>》。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Debian/Ubuntu\napt update\napt install nginx\n\n# CentOS/RHEL\nyum install nginx"><pre class="notranslate"><span class="pl-c"><span class="pl-c">#</span> Debian/Ubuntu</span>\napt update\napt install nginx\n\n<span class="pl-c"><span class="pl-c">#</span> CentOS/RHEL</span>\nyum install nginx</pre></div>\n<h3 dir="auto">4. 配置 Nginx</h3>\n<p dir="auto">通过 <strong>yum/apt</strong> 安装的 Nginx 默认的置文件在 <strong>/etc/nginx/nginx.conf</strong>，编辑该文件。</p>\n<div class="highlight highlight-source-nginx notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="http {\n    ##\n    # Basic Settings\n    ##\n    ......\n\n    ##\n    # Virtual Host Configs\n    ##\nserver {\n    listen 80;\n    listen 443 ssl;\n    server_name ncbix.com www.ncbix.com;\n    ssl_certificate /etc/nginx/ssl/nginx/www.ncbix.com_bundle.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx/www.ncbix.com.key;\n    index  index.php index.html index.htm;\n\n    if ( $scheme = &quot;http&quot; ) {\n        return 301 https://www.yuque.com/shenweiyan$request_uri; #确保跳转到新域名HTTPS如果没有HTTPS可以去掉\n    }\n    location / {\n        rewrite /.* https://www.yuque.com/shenweiyan$uri redirect; #跳转到新域名并重写为新域名\n    }\n  }\n\ninclude /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}"><pre class="notranslate"><span class="pl-k">http</span> {\n    <span class="pl-c">##</span>\n    <span class="pl-c"># Basic Settings</span>\n    <span class="pl-c">##</span>\n    ......\n\n    <span class="pl-c">##</span>\n    <span class="pl-c"># Virtual Host Configs</span>\n    <span class="pl-c">##</span>\n<span class="pl-k">server</span> {\n    <span class="pl-k">listen</span> <span class="pl-s">80</span>;\n    <span class="pl-k">listen</span> <span class="pl-s">443</span> ssl;\n    <span class="pl-k">server_name</span> ncbix.com www.ncbix.com;\n    <span class="pl-k">ssl_certificate</span> /etc/nginx/ssl/nginx/www.ncbix.com_bundle.crt;\n    <span class="pl-k">ssl_certificate_key</span> /etc/nginx/ssl/nginx/www.ncbix.com.key;\n    <span class="pl-k">index</span>  index.php index.html index.htm;\n\n    <span class="pl-k">if</span> ( <span class="pl-smi">$scheme</span> = <span class="pl-s">"http"</span> ) {\n        <span class="pl-c1">return</span> <span class="pl-s">301</span> https://www.yuque.com/shenweiyan<span class="pl-smi">$request_uri</span>; <span class="pl-c">#确保跳转到新域名HTTPS如果没有HTTPS可以去掉</span>\n    }\n    <span class="pl-k">location</span> <span class="pl-en">/ </span>{\n        <span class="pl-k">rewrite</span> <span class="pl-sr">/.* </span>https://www.yuque.com/shenweiyan<span class="pl-smi">$uri</span> redirect; <span class="pl-c">#跳转到新域名并重写为新域名</span>\n    }\n  }\n\n<span class="pl-k">include</span> /etc/nginx/conf.d/*.conf;\n    <span class="pl-k">include</span> /etc/nginx/sites-enabled/*;\n}</pre></div>\n<h3 dir="auto">5. 重启 Nginx</h3>\n<p dir="auto">最后，通过下面的命令重启 Nginx 服务即可。</p>\n<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="service nginx restart"><pre class="notranslate">service nginx restart</pre></div>\n<h2 dir="auto">操作步骤：无服务器</h2>\n<p dir="auto">我们以 <a href="https://support.cloudflare.com/hc/zh-cn/articles/218411427" rel="nofollow">Cloudflare Page Rules</a> 为例，说明一下具体怎么操作。</p>\n<h3 dir="auto">1. Cloudflare 中添加站点</h3>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cc53dc10b9cdd8a7e914efd7c24313f5a534adc1b61ff85e715841320a4b0b5b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a6432775339795673305a694242616c5a51564f755051486255312e706e67"><img src="https://camo.githubusercontent.com/cc53dc10b9cdd8a7e914efd7c24313f5a534adc1b61ff85e715841320a4b0b5b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a6432775339795673305a694242616c5a51564f755051486255312e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fjd2wS9yVs0ZiBBalZQVOuPQHbU1.png" style="max-width: 100%;"></a></p>\n<p dir="auto">添加完站点后，可以选择 <strong>Free 计划</strong>，然后点击继续：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5fcbb40ad0ec802be2ab23eeb69216a57b96728993a52bd4b86482c51ef500c2/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46756d6155454c5561494a6e76397330513470614b5544494157544c2e706e67"><img src="https://camo.githubusercontent.com/5fcbb40ad0ec802be2ab23eeb69216a57b96728993a52bd4b86482c51ef500c2/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46756d6155454c5561494a6e76397330513470614b5544494157544c2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FumaUELUaIJnv9s0Q4paKUDIAWTL.png" style="max-width: 100%;"></a></p>\n<p dir="auto">点击继续后，Cloudflare 会自动扫描你对应域名的一些解析记录：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2a82a2fe2d3f3951b2f1fba0d402777e44781bc7608109e61b877de6b1d2fc35/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674515a4b417951645f366464356437415f5a4c435670344e5545672e706e67"><img src="https://camo.githubusercontent.com/2a82a2fe2d3f3951b2f1fba0d402777e44781bc7608109e61b877de6b1d2fc35/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674515a4b417951645f366464356437415f5a4c435670344e5545672e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtQZKAyQd_6dd5d7A_ZLCVp4NUEg.png" style="max-width: 100%;"></a></p>\n<p dir="auto">我们可以直接选择 <strong>"继续"</strong>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a552d5fd6ef94b7f816f5ca3f10784f41f42390693386da55f5228ec1290b680/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46766b743067485650376c6d69716170576633704d375a783459774e2e706e67"><img src="https://camo.githubusercontent.com/a552d5fd6ef94b7f816f5ca3f10784f41f42390693386da55f5228ec1290b680/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46766b743067485650376c6d69716170576633704d375a783459774e2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fvkt0gHVP7lmiqapWf3pM7Zx4YwN.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">2. 修改域名 DNS</h3>\n<p dir="auto">首先，我的域名是在腾讯云注册的，可以去腾讯云控制台 <strong>"我的域名"</strong> 中直接修改 DNS：</p>\n<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# 添加 Cloudflare 名称服务器\nimani.ns.cloudflare.com\ncaroline.dnspod.net"><pre class="notranslate"><code class="notranslate"># 添加 Cloudflare 名称服务器\nimani.ns.cloudflare.com\ncaroline.dnspod.net\n</code></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/46ccf2ec84ede349f80230d1bfee0bc64061ebe6865b9e5cec5576ef3ce3825c/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466c4b795948484c474877443949504b59764c74506f7267684270722e706e67"><img src="https://camo.githubusercontent.com/46ccf2ec84ede349f80230d1bfee0bc64061ebe6865b9e5cec5576ef3ce3825c/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466c4b795948484c474877443949504b59764c74506f7267684270722e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FlKyYHHLGHwD9IPKYvLtPorghBpr.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5dde752a1c5c5d3436fd420d8ab6c9e735aa136f4247653b620c434deb41f8c2/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d52776f64726c626b427436536b583752734732656331697275632e706e67"><img src="https://camo.githubusercontent.com/5dde752a1c5c5d3436fd420d8ab6c9e735aa136f4247653b620c434deb41f8c2/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466d52776f64726c626b427436536b583752734732656331697275632e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FmRwodrlbkBt6SkX7RsG2ec1iruc.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">3. 完成 Cloudflare 添加站点</h3>\n<p dir="auto">可以把后面快速指南的这几个配置都勾选。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/11ee47fa5d24066296071a7216fd4517d92e5393b2582d6ec37b7b9b5cab276e/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674554c4a34754d5f5475506a506b6b4d74645841687870794465732e706e67"><img src="https://camo.githubusercontent.com/11ee47fa5d24066296071a7216fd4517d92e5393b2582d6ec37b7b9b5cab276e/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4674554c4a34754d5f5475506a506b6b4d74645841687870794465732e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtULJ4uM_TuPjPkkMtdXAhxpyDes.png" style="max-width: 100%;"></a></p>\n<p dir="auto">等待几分钟就可以看到你的域名站点已经添加到 Cloudflare 上了！<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cb049a53fa42bf96ae5b965e52b8083f34593ab20e6a97d41823d74becd1b0ef/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b38487635646b57386b486431496f72684e6654343237526c69512e706e67"><img src="https://camo.githubusercontent.com/cb049a53fa42bf96ae5b965e52b8083f34593ab20e6a97d41823d74becd1b0ef/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b38487635646b57386b486431496f72684e6654343237526c69512e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fk8Hv5dkW8kHd1IorhNfT427RliQ.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">4. 设置 DNS 记录</h3>\n<blockquote>\n<p dir="auto">The first thing you will need is a DNS record for <strong>@</strong>, <strong>www</strong> and any other subdomains you want to redirect, set to <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fa603fe1a03163762a68cc93a5efc5997f4b56f940c16706c9c5fc27026f2c23/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a6a68503034315a6a2d615a5650414870512d596e48497a4d41362e706e67"><img src="https://camo.githubusercontent.com/fa603fe1a03163762a68cc93a5efc5997f4b56f940c16706c9c5fc27026f2c23/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466a6a68503034315a6a2d615a5650414870512d596e48497a4d41362e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FjjhP041Zj-aZVPAHpQ-YnHIzMA6.png" style="max-width: 100%;"></a>. This can point to any IP address as the redirection page rule will execute first. I would recommend pointing them to 192.0.2.1 , a dummy IP.</p>\n<p dir="auto">From：<a href="https://community.cloudflare.com/t/redirecting-one-domain-to-another/81960" rel="nofollow">https://community.cloudflare.com/t/redirecting-one-domain-to-another/81960</a></p>\n</blockquote>\n<p dir="auto">在配置 Cloudflare 站点的页面规则前，你需要把该域名的 <strong>@</strong>，<strong>www</strong> 或者其他你想要进行重定向的子域名添加到 DNS 记录中，这个记录的值可以指向任何 IP 地址，因为重定向页面规则将首先执行。我建议将它们指向 192.0.2.1 ，一个虚拟 IP。</p>\n<p dir="auto">在这里，我们以 <strong>@</strong> 和 <strong>note</strong> 子域名为例，添加 DNS 记录，先让它们指向一个虚拟 IP。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bc79271609bb1ff15319a82fc7bba952c214c7159de8ddd0d5446d8dd52f12d8/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b30387964467550756b54763838414161305632375434785442682e706e67"><img src="https://camo.githubusercontent.com/bc79271609bb1ff15319a82fc7bba952c214c7159de8ddd0d5446d8dd52f12d8/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466b30387964467550756b54763838414161305632375434785442682e706e67" alt="images" title="以 ncbix.com 和 note.ncbix.com 为例，均重定向到 https://www.yuque.com/shenweiyan 页面" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fk08ydFuPukTv88AAa0V27T4xTBh.png" style="max-width: 100%;"></a></p>\n<h3 dir="auto">5. 配置 Cloudflare 站点页面规则</h3>\n<p dir="auto">首先，在 Cloudflare 的主页上点击对应的站点，选择 <strong>"页面规则"</strong>，点击。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f70b4fb2d9f71bd5b4c3341a52f1a05ab83d3d2047e8b2cfb1804090d36a6584/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46716f6c5861537a55646b67744b6f36367952433378526b56376d762e706e67"><img src="https://camo.githubusercontent.com/f70b4fb2d9f71bd5b4c3341a52f1a05ab83d3d2047e8b2cfb1804090d36a6584/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46716f6c5861537a55646b67744b6f36367952433378526b56376d762e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FqolXaSzUdkgtKo66yRC3xRkV7mv.png" style="max-width: 100%;"></a></p>\n<p dir="auto">点击 <strong>"创建页面规则"</strong>：<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7d259321dc46bd0352f838af306464a0caa74dab37a0fe52fa4dd45c000389a3/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e4632626b36687a5976756c437458644c535153556956315a34342e706e67"><img src="https://camo.githubusercontent.com/7d259321dc46bd0352f838af306464a0caa74dab37a0fe52fa4dd45c000389a3/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e4632626b36687a5976756c437458644c535153556956315a34342e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnF2bk6hzYvulCtXdLSQSUiV1Z44.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2d2a86892815609c3923f93734351dbead7524cd7c38ecd394622ae532b9dba5/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46703544534c784b496e6e323561353931686a596a444e705565526e2e706e67"><img src="https://camo.githubusercontent.com/2d2a86892815609c3923f93734351dbead7524cd7c38ecd394622ae532b9dba5/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46703544534c784b496e6e323561353931686a596a444e705565526e2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/Fp5DSLxKInn25a591hjYjDNpUeRn.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8fa05968fa88fa56ee0542114408cc0f43c98b297eb80541368de4e65c2ec8f7/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466946755253697a4b6c6d6b6d4a354c786942666b4947726542646d2e706e67"><img src="https://camo.githubusercontent.com/8fa05968fa88fa56ee0542114408cc0f43c98b297eb80541368de4e65c2ec8f7/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466946755253697a4b6c6d6b6d4a354c786942666b4947726542646d2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FiFuRSizKlmkmJ5LxiBfkIGreBdm.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e5c8f1f9cb4ca1e1e41aeaf37b83fe4210c4e1c0c26c593cab6a1347e29b1543/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46744e505232724c4946444b4d597a334e3867716b4c426351466e472e706e67"><img src="https://camo.githubusercontent.com/e5c8f1f9cb4ca1e1e41aeaf37b83fe4210c4e1c0c26c593cab6a1347e29b1543/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46744e505232724c4946444b4d597a334e3867716b4c426351466e472e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtNPR2rLIFDKMYz3N8gqkLBcQFnG.png" style="max-width: 100%;"></a></p>\n<h4 dir="auto">什么是页面规则？</h4>\n<blockquote>\n<p dir="auto">页面规则为 Cloudflare 设置提供基于 URL 的粒度控制。关于页面规则需要了解的最重要事情是，针对一个 URL 仅触发一个页面规则，因此一定要按照优先级顺序对页面规则进行排序并将最具体的页面规则放在顶部。</p>\n</blockquote>\n<h5 dir="auto">页面规则中允许哪些模式？</h5>\n<blockquote>\n<p dir="auto">如果使用的是转发页面规则，则可以将这些通配符映射到变量。在转发 URL 中，可以按照从左到右的顺序指定与原始 URL 中的通配符相匹配的 $1、$2，以此类推。</p>\n<p dir="auto">例如，可以将 <code class="notranslate">http://.example.com/</code> 转发到 <code class="notranslate">http://$2.example.com/$1.jpg</code>。此规则将与 <a href="http://cloud.example.com/flare" rel="nofollow">http://cloud.example.com/flare</a> 相匹配，这最终将转发到 <a href="http://flare.example.com/cloud.jpg" rel="nofollow">http://flare.example.com/cloud.jpg</a>。</p>\n</blockquote>\n<h5 dir="auto">一些有用的提示：</h5>\n<blockquote>\n<ol dir="auto">\n<li>如果要同时匹配 http 和 https，只需编写 example.com 即可。无需编写 example.com。</li>\n<li>如果要匹配域中的每个页面，则需要编写 example.com/，仅编写 example.com 是不够的。</li>\n<li>请参阅 <a href="https://support.cloudflare.com/hc/articles/218411427" rel="nofollow">了解和配置 Cloudflare 页面规则</a> 了解有关页面规则模式的更多详细信息。</li>\n</ol>\n</blockquote>\n<h3 dir="auto">6. 配置 SSL(不必要)</h3>\n<p dir="auto"><strong>📢 Update 2022.09.05：这一步不是必要的，这里仅供参考！</strong></p>\n<ol dir="auto">\n<li>申请 <a href="http://www.example.com" rel="nofollow">www.example.com</a> 域名的 SSL 证书；</li>\n<li>把 DNS 验证域名的记录添加到 Cloudfare 的 DNS 中；</li>\n</ol>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/84f9ae59be722981628a8c5409a7cd0514ff92a5e62abcad82041a77d2ca0c28/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4669456d58756a70514b4b306a30703247787a614f6754433378774e2e706e67"><img src="https://camo.githubusercontent.com/84f9ae59be722981628a8c5409a7cd0514ff92a5e62abcad82041a77d2ca0c28/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f4669456d58756a70514b4b306a30703247787a614f6754433378774e2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FiEmXujpQKK0j0p2GxzaOgTC3xwN.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/658a93d6d8bbcb913f89b53dd33b195b4593b1b1486ca555e1ed7d2b2f45989b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e4f48416d4e494163456d7742445f667633654955427a786d69422e706e67"><img src="https://camo.githubusercontent.com/658a93d6d8bbcb913f89b53dd33b195b4593b1b1486ca555e1ed7d2b2f45989b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466e4f48416d4e494163456d7742445f667633654955427a786d69422e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FnOHAmNIAcEmwBD_fv3eIUBzxmiB.png" style="max-width: 100%;"></a><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/063fb712c1166769cadd96e3402e90e45eb5109f19d9712ff751d8c124ccae1b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46747863413469584a6854303239766b77333545566b444e2d3251472e706e67"><img src="https://camo.githubusercontent.com/063fb712c1166769cadd96e3402e90e45eb5109f19d9712ff751d8c124ccae1b/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f46747863413469584a6854303239766b77333545566b444e2d3251472e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FtxcA4iXJhT029vkw35EVkDN-2QG.png" style="max-width: 100%;"></a></p>\n<p dir="auto"><strong>注意：</strong><br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c9fba3d38d2c285eedc61d280ebf3662a195f3f676c4b8c31dc6d8e5321e374a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466772496230336837496e6f74366b3766613142484748344733484f2e706e67"><img src="https://camo.githubusercontent.com/c9fba3d38d2c285eedc61d280ebf3662a195f3f676c4b8c31dc6d8e5321e374a/68747470733a2f2f736875622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f656c6f672d636f6f6b626f6f6b2d696d672f466772496230336837496e6f74366b3766613142484748344733484f2e706e67" alt="image.png" data-canonical-src="https://shub-1251708715.cos.ap-guangzhou.myqcloud.com/elog-cookbook-img/FgrIb03h7Inot6k7fa1BHGH4G3HO.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">参考资料</h2>\n<ol dir="auto">\n<li><a href="https://segmentfault.com/q/1010000015157572" rel="nofollow">nginx 实现两个域名之间跳转配置 - SegmentFault 思否</a></li>\n<li><a href="https://cloud.baidu.com/doc/DNS/s/ukq4w1pji" rel="nofollow">智能云解析 DNS - 通过 Nginx 实现 URL 转发 | 百度智能云文档</a></li>\n<li><a href="https://ahrefs.com/blog/zh/301-redirects/" rel="nofollow">SEO 的 301 重定向：你需要知道的一切</a></li>\n</ol>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '1.3-折腾'}, 'labels': {'nodes': [{'name': '语雀'}]}, 'comments': {'nodes': []}}, {'title': 'Python 导出公众号文章为 Markdown', 'number': 7, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/7', 'createdAt': '2023-10-19T03:21:58Z', 'lastEditedAt': '2023-10-19T03:32:09Z', 'updatedAt': '2023-10-19T03:32:09Z', 'body': '记录一下个人使用 Python3 爬取个人公众号的所有文章，并把文章保存为 Markdown 格式的一些操作记录，主要介绍一下思路和一些简单的代码。\r\n\r\n<!-- more -->\r\n\r\n## 前提条件与思路\r\n\r\n1. 需要登录网页端微信公众号，获取对应 Cookies；\r\n2. 通过获取的 Cookies 爬取所有的文章 url 以及其他信息；\r\n3. 通过文章 url 获取对应文章的 HTML；\r\n4. 最后，把 HTML 转化为 Markdown。\r\n\r\n之所以选择通过文章公开访问的 url 爬取对应文章的 HTML，而不是直接沿用 Cookies，主要是怕 Cookies 滥用导致其他不可预知的问题，例如封号之类。截止本文章发布前，个人公众号全部已发表的文章大约有 400 多篇，通过这个方法都能正常爬取下来。\r\n\r\n## 获取已发表文章数\r\n\r\n登录公众号，按下 F12 打开开发者工具，在 `网络` 栏中找到 `appmsgpublish` 名称的请求。\r\n\r\n- 查看请求地址\r\n  ![appmsgpublish url](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/wechat_url.png)\r\n\r\n- 获取 cookie\r\n  ![wecaht cookie](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/wecaht_cookie.png)\r\n\r\n```python\r\nimport requests, json\r\n\r\n#注意把 <Your Cookie> 替换成你自己的 cookie\r\nheaders = {\'Content-type\': \'application/json\', \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\',\r\n           \'Cookie\': <Your Cookie>}\r\n\r\n#这个 url 即截图中的请求地址\r\nurl = \'https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&search_field=null&begin=0&count=5&query=&type=101_1&free_publish_type=1&sub_action=list_ex&token=<token>&lang=zh_CN&f=json&ajax=1\'\r\nreq = requests.get(url, headers=headers)\r\nreq_json = json.loads(req.content.decode("utf-8"))\r\nreq_json\r\n# total_count 即为已发表文章的总数\r\n```\r\n![Wecaht posts total_count](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/total_count.png)\r\n\r\n## 获取所有的文章信息\r\n\r\n以下程序的 `mp.txt` 就是得到的该公众号所有文章信息的列表。\r\n\r\n```python\r\nallPostList = []\r\n\r\nfor number in range(0, 420, 20):\r\n    #注意 begin={number}&count=20，即按照每页20篇文章，分页进行爬取\r\n    #根据测试每页最多只支持20篇文章\r\n    url = f"https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&search_field=null&begin={number}&count=20&query=&type=101_1&free_publish_type=1&sub_action=list_ex&token=<token>&lang=zh_CN&f=json&ajax=1\', headers=headers)"\r\n    x = requests.get(url, headers=headers)\r\n    posts_list  = json.loads(json.loads(x.content.decode("utf-8"))[\'publish_page\'])["publish_list"]\r\n    allPostList = allPostList + posts_list  \r\n    time.sleep(5)\r\n\r\nwith open("mp.txt", "w") as OUT:\r\n    OUT.write(str(allPostList))\r\n```\r\n\r\n## HTML to Markdown\r\n\r\nPython 导出公众号文章为 Markdown 最后的一步工作就是解析上一步骤得到的 `mp.txt` 文件，然后通过 url 去逐一爬取对应的文章 HTML，然后把 Html 转化成 Markdown 即可。\r\n\r\n这些步骤都很简单，网上搜一下就有一大堆教程，感兴趣的可以去搜一下，这里文章就不写了。 \r\n\r\n', 'bodyText': '记录一下个人使用 Python3 爬取个人公众号的所有文章，并把文章保存为 Markdown 格式的一些操作记录，主要介绍一下思路和一些简单的代码。\n\n前提条件与思路\n\n需要登录网页端微信公众号，获取对应 Cookies；\n通过获取的 Cookies 爬取所有的文章 url 以及其他信息；\n通过文章 url 获取对应文章的 HTML；\n最后，把 HTML 转化为 Markdown。\n\n之所以选择通过文章公开访问的 url 爬取对应文章的 HTML，而不是直接沿用 Cookies，主要是怕 Cookies 滥用导致其他不可预知的问题，例如封号之类。截止本文章发布前，个人公众号全部已发表的文章大约有 400 多篇，通过这个方法都能正常爬取下来。\n获取已发表文章数\n登录公众号，按下 F12 打开开发者工具，在 网络 栏中找到 appmsgpublish 名称的请求。\n\n\n查看请求地址\n\n\n\n获取 cookie\n\n\n\nimport requests, json\n\n#注意把 <Your Cookie> 替换成你自己的 cookie\nheaders = {\'Content-type\': \'application/json\', \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\',\n           \'Cookie\': <Your Cookie>}\n\n#这个 url 即截图中的请求地址\nurl = \'https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&search_field=null&begin=0&count=5&query=&type=101_1&free_publish_type=1&sub_action=list_ex&token=<token>&lang=zh_CN&f=json&ajax=1\'\nreq = requests.get(url, headers=headers)\nreq_json = json.loads(req.content.decode("utf-8"))\nreq_json\n# total_count 即为已发表文章的总数\n\n获取所有的文章信息\n以下程序的 mp.txt 就是得到的该公众号所有文章信息的列表。\nallPostList = []\n\nfor number in range(0, 420, 20):\n    #注意 begin={number}&count=20，即按照每页20篇文章，分页进行爬取\n    #根据测试每页最多只支持20篇文章\n    url = f"https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&search_field=null&begin={number}&count=20&query=&type=101_1&free_publish_type=1&sub_action=list_ex&token=<token>&lang=zh_CN&f=json&ajax=1\', headers=headers)"\n    x = requests.get(url, headers=headers)\n    posts_list  = json.loads(json.loads(x.content.decode("utf-8"))[\'publish_page\'])["publish_list"]\n    allPostList = allPostList + posts_list  \n    time.sleep(5)\n\nwith open("mp.txt", "w") as OUT:\n    OUT.write(str(allPostList))\nHTML to Markdown\nPython 导出公众号文章为 Markdown 最后的一步工作就是解析上一步骤得到的 mp.txt 文件，然后通过 url 去逐一爬取对应的文章 HTML，然后把 Html 转化成 Markdown 即可。\n这些步骤都很简单，网上搜一下就有一大堆教程，感兴趣的可以去搜一下，这里文章就不写了。', 'bodyHTML': '<p dir="auto">记录一下个人使用 Python3 爬取个人公众号的所有文章，并把文章保存为 Markdown 格式的一些操作记录，主要介绍一下思路和一些简单的代码。</p>\n\n<h2 dir="auto">前提条件与思路</h2>\n<ol dir="auto">\n<li>需要登录网页端微信公众号，获取对应 Cookies；</li>\n<li>通过获取的 Cookies 爬取所有的文章 url 以及其他信息；</li>\n<li>通过文章 url 获取对应文章的 HTML；</li>\n<li>最后，把 HTML 转化为 Markdown。</li>\n</ol>\n<p dir="auto">之所以选择通过文章公开访问的 url 爬取对应文章的 HTML，而不是直接沿用 Cookies，主要是怕 Cookies 滥用导致其他不可预知的问题，例如封号之类。截止本文章发布前，个人公众号全部已发表的文章大约有 400 多篇，通过这个方法都能正常爬取下来。</p>\n<h2 dir="auto">获取已发表文章数</h2>\n<p dir="auto">登录公众号，按下 F12 打开开发者工具，在 <code class="notranslate">网络</code> 栏中找到 <code class="notranslate">appmsgpublish</code> 名称的请求。</p>\n<ul dir="auto">\n<li>\n<p dir="auto">查看请求地址<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/96e3920d8786f1cb93f7d3bb68c6cdf5e694b9699dfa46eda951fe353a1ed352/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f7765636861745f75726c2e706e67"><img src="https://camo.githubusercontent.com/96e3920d8786f1cb93f7d3bb68c6cdf5e694b9699dfa46eda951fe353a1ed352/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f7765636861745f75726c2e706e67" alt="appmsgpublish url" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/wechat_url.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">获取 cookie<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/48088b43dccadff00048fcc06c762905efedfd76ca71eb634686e2b80a20287a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f7765636168745f636f6f6b69652e706e67"><img src="https://camo.githubusercontent.com/48088b43dccadff00048fcc06c762905efedfd76ca71eb634686e2b80a20287a/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f7765636168745f636f6f6b69652e706e67" alt="wecaht cookie" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/wecaht_cookie.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import requests, json\n\n#注意把 &lt;Your Cookie&gt; 替换成你自己的 cookie\nheaders = {\'Content-type\': \'application/json\', \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\',\n           \'Cookie\': &lt;Your Cookie&gt;}\n\n#这个 url 即截图中的请求地址\nurl = \'https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&amp;search_field=null&amp;begin=0&amp;count=5&amp;query=&amp;type=101_1&amp;free_publish_type=1&amp;sub_action=list_ex&amp;token=&lt;token&gt;&amp;lang=zh_CN&amp;f=json&amp;ajax=1\'\nreq = requests.get(url, headers=headers)\nreq_json = json.loads(req.content.decode(&quot;utf-8&quot;))\nreq_json\n# total_count 即为已发表文章的总数"><pre class="notranslate"><span class="pl-k">import</span> <span class="pl-s1">requests</span>, <span class="pl-s1">json</span>\n\n<span class="pl-c">#注意把 &lt;Your Cookie&gt; 替换成你自己的 cookie</span>\n<span class="pl-s1">headers</span> <span class="pl-c1">=</span> {<span class="pl-s">\'Content-type\'</span>: <span class="pl-s">\'application/json\'</span>, <span class="pl-s">\'User-Agent\'</span>: <span class="pl-s">\'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\'</span>,\n           <span class="pl-s">\'Cookie\'</span>: <span class="pl-c1">&lt;</span><span class="pl-v">Your</span> <span class="pl-v">Cookie</span><span class="pl-c1">&gt;</span>}\n\n<span class="pl-c">#这个 url 即截图中的请求地址</span>\n<span class="pl-s1">url</span> <span class="pl-c1">=</span> <span class="pl-s">\'https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&amp;search_field=null&amp;begin=0&amp;count=5&amp;query=&amp;type=101_1&amp;free_publish_type=1&amp;sub_action=list_ex&amp;token=&lt;token&gt;&amp;lang=zh_CN&amp;f=json&amp;ajax=1\'</span>\n<span class="pl-s1">req</span> <span class="pl-c1">=</span> <span class="pl-s1">requests</span>.<span class="pl-en">get</span>(<span class="pl-s1">url</span>, <span class="pl-s1">headers</span><span class="pl-c1">=</span><span class="pl-s1">headers</span>)\n<span class="pl-s1">req_json</span> <span class="pl-c1">=</span> <span class="pl-s1">json</span>.<span class="pl-en">loads</span>(<span class="pl-s1">req</span>.<span class="pl-s1">content</span>.<span class="pl-en">decode</span>(<span class="pl-s">"utf-8"</span>))\n<span class="pl-s1">req_json</span>\n<span class="pl-c"># total_count 即为已发表文章的总数</span></pre></div>\n<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0f0557096e2c568fff64767a489e47b514f50f2ab83c25f0a022d86757d9cd7e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f746f74616c5f636f756e742e706e67"><img src="https://camo.githubusercontent.com/0f0557096e2c568fff64767a489e47b514f50f2ab83c25f0a022d86757d9cd7e/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f476974626f6f6b2f746f74616c5f636f756e742e706e67" alt="Wecaht posts total_count" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/Gitbook/total_count.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">获取所有的文章信息</h2>\n<p dir="auto">以下程序的 <code class="notranslate">mp.txt</code> 就是得到的该公众号所有文章信息的列表。</p>\n<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="allPostList = []\n\nfor number in range(0, 420, 20):\n    #注意 begin={number}&amp;count=20，即按照每页20篇文章，分页进行爬取\n    #根据测试每页最多只支持20篇文章\n    url = f&quot;https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&amp;search_field=null&amp;begin={number}&amp;count=20&amp;query=&amp;type=101_1&amp;free_publish_type=1&amp;sub_action=list_ex&amp;token=&lt;token&gt;&amp;lang=zh_CN&amp;f=json&amp;ajax=1\', headers=headers)&quot;\n    x = requests.get(url, headers=headers)\n    posts_list  = json.loads(json.loads(x.content.decode(&quot;utf-8&quot;))[\'publish_page\'])[&quot;publish_list&quot;]\n    allPostList = allPostList + posts_list  \n    time.sleep(5)\n\nwith open(&quot;mp.txt&quot;, &quot;w&quot;) as OUT:\n    OUT.write(str(allPostList))"><pre class="notranslate"><span class="pl-s1">allPostList</span> <span class="pl-c1">=</span> []\n\n<span class="pl-k">for</span> <span class="pl-s1">number</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">420</span>, <span class="pl-c1">20</span>):\n    <span class="pl-c">#注意 begin={number}&amp;count=20，即按照每页20篇文章，分页进行爬取</span>\n    <span class="pl-c">#根据测试每页最多只支持20篇文章</span>\n    <span class="pl-s1">url</span> <span class="pl-c1">=</span> <span class="pl-s">f"https://mp.weixin.qq.com/cgi-bin/appmsgpublish?sub=list&amp;search_field=null&amp;begin=<span class="pl-s1"><span class="pl-kos">{</span><span class="pl-s1">number</span><span class="pl-kos">}</span></span>&amp;count=20&amp;query=&amp;type=101_1&amp;free_publish_type=1&amp;sub_action=list_ex&amp;token=&lt;token&gt;&amp;lang=zh_CN&amp;f=json&amp;ajax=1\', headers=headers)"</span>\n    <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-s1">requests</span>.<span class="pl-en">get</span>(<span class="pl-s1">url</span>, <span class="pl-s1">headers</span><span class="pl-c1">=</span><span class="pl-s1">headers</span>)\n    <span class="pl-s1">posts_list</span>  <span class="pl-c1">=</span> <span class="pl-s1">json</span>.<span class="pl-en">loads</span>(<span class="pl-s1">json</span>.<span class="pl-en">loads</span>(<span class="pl-s1">x</span>.<span class="pl-s1">content</span>.<span class="pl-en">decode</span>(<span class="pl-s">"utf-8"</span>))[<span class="pl-s">\'publish_page\'</span>])[<span class="pl-s">"publish_list"</span>]\n    <span class="pl-s1">allPostList</span> <span class="pl-c1">=</span> <span class="pl-s1">allPostList</span> <span class="pl-c1">+</span> <span class="pl-s1">posts_list</span>  \n    <span class="pl-s1">time</span>.<span class="pl-en">sleep</span>(<span class="pl-c1">5</span>)\n\n<span class="pl-k">with</span> <span class="pl-en">open</span>(<span class="pl-s">"mp.txt"</span>, <span class="pl-s">"w"</span>) <span class="pl-k">as</span> <span class="pl-v">OUT</span>:\n    <span class="pl-v">OUT</span>.<span class="pl-en">write</span>(<span class="pl-en">str</span>(<span class="pl-s1">allPostList</span>))</pre></div>\n<h2 dir="auto">HTML to Markdown</h2>\n<p dir="auto">Python 导出公众号文章为 Markdown 最后的一步工作就是解析上一步骤得到的 <code class="notranslate">mp.txt</code> 文件，然后通过 url 去逐一爬取对应的文章 HTML，然后把 Html 转化成 Markdown 即可。</p>\n<p dir="auto">这些步骤都很简单，网上搜一下就有一大堆教程，感兴趣的可以去搜一下，这里文章就不写了。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '2023年下半年的一些乱弹', 'number': 6, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/6', 'createdAt': '2023-10-18T02:46:03Z', 'lastEditedAt': '2023-11-29T01:09:10Z', 'updatedAt': '2023-11-29T01:09:10Z', 'body': '其实写这边文章，主要是想着测试一下使用了 GitHub Actions 的 mkdocs 触发 Discussions to mkdocs blog posts 的一些效果。\r\n\r\n<!-- more -->\r\n\r\n今天的天气真好啊！阳光明媚，微风拂面，仿佛是一幅美丽的画卷。这样的天气让人心情愉悦，忍不住想要出去走走，感受大自然的美丽。无论是散步还是骑自行车，都是不错的选择。我享受着这美好的一天，也期待着未来更多美好的时光。\r\n\r\n从 11 月起，公司也好，家庭也罢，陆陆续续的一些事情让生活变得此起彼伏。缺乏了一些码字的动力，整个人变得有点沮丧，空洞夹杂着混沌的状态让整个人都很显得颓废。生活需要激情，希望接下来的 12 月能回归一个更好的状态吧！', 'bodyText': '其实写这边文章，主要是想着测试一下使用了 GitHub Actions 的 mkdocs 触发 Discussions to mkdocs blog posts 的一些效果。\n\n今天的天气真好啊！阳光明媚，微风拂面，仿佛是一幅美丽的画卷。这样的天气让人心情愉悦，忍不住想要出去走走，感受大自然的美丽。无论是散步还是骑自行车，都是不错的选择。我享受着这美好的一天，也期待着未来更多美好的时光。\n从 11 月起，公司也好，家庭也罢，陆陆续续的一些事情让生活变得此起彼伏。缺乏了一些码字的动力，整个人变得有点沮丧，空洞夹杂着混沌的状态让整个人都很显得颓废。生活需要激情，希望接下来的 12 月能回归一个更好的状态吧！', 'bodyHTML': '<p dir="auto">其实写这边文章，主要是想着测试一下使用了 GitHub Actions 的 mkdocs 触发 Discussions to mkdocs blog posts 的一些效果。</p>\n\n<p dir="auto">今天的天气真好啊！阳光明媚，微风拂面，仿佛是一幅美丽的画卷。这样的天气让人心情愉悦，忍不住想要出去走走，感受大自然的美丽。无论是散步还是骑自行车，都是不错的选择。我享受着这美好的一天，也期待着未来更多美好的时光。</p>\n<p dir="auto">从 11 月起，公司也好，家庭也罢，陆陆续续的一些事情让生活变得此起彼伏。缺乏了一些码字的动力，整个人变得有点沮丧，空洞夹杂着混沌的状态让整个人都很显得颓废。生活需要激情，希望接下来的 12 月能回归一个更好的状态吧！</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '2.1-乱弹'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': 'Hello，Wed Oct 18 10:46:41 CST 2023', 'author': {'login': 'shenweiyan'}}]}}, {'title': '友情链接', 'number': 5, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/5', 'createdAt': '2023-10-16T07:57:49Z', 'lastEditedAt': '2024-04-12T09:11:06Z', 'updatedAt': '2024-04-12T09:11:06Z', 'body': '> 每一个独立博客都是一个信息孤岛。我们没有类似「你可能喜欢其他人写的这些文章」的推荐机制，所以除了搜索引擎、社交网络引荐之外，我们应该还需要通过某种方法将这些信息孤岛连接起来：**交换友情链接就是一种很棒的架桥方式。**\r\n\r\n社交就是不断认识新的人、结交新的朋友，而友链也正是这样一种很棒的交朋友的方式，作为一个不太善于言辞的技术人，我希望结交更多的朋友，来丰富我的社交，一起成长。\r\n\r\n## 站点信息\r\n\r\n交换友链前可先添加个人站点，站点信息如下。\r\n\r\n- 站点名称: 维燕的知识花园\r\n- 站点链接: <https://weiyan.cc>\r\n- 站点头像: <https://weiyan.cc/assets/logo.png>\r\n- 站点描述: Bio & IT 爱好者，沉淀生活，记录点滴。\r\n\r\n## 交换友链\r\n\r\n想和我交换友链的，没啥特别需求，只是希望你的博客有足够多的**原创**、**有意义**的内容，并且建站已满半年。\r\n\r\n- 那种塞满了转载文章的采集站点暂时不考虑。\r\n- 非常反感很多论坛上动不动就来交换友链的帖子，如果是出于 SEO 的一些目的来交换友链其实是没什么意义的。\r\n\r\n## 友链说明\r\n\r\n如需申请，在下方评论区提供你的「博客名称」和「博客地址」即可。或者参考以下格式：\r\n\r\n- 博客名称：xxxxx\r\n- 博客地址：https://xxxx.com\r\n- 博客介绍：xxxxxxxx\r\n\r\n## 友情站点\r\n\r\n以下站点按照添加的时间顺序排列。\r\n\r\n<div class="grid cards" markdown>\r\n\r\n- __[UncleCAT4](https://yuanj.top/)__\r\n\r\n    思绪来得快去得也快，偶尔会在这里停留。\r\n\r\n- __[1874’s Blog](https://blog.1874.cool)__\r\n\r\n    有粤语歌就不会有世界末日。\r\n\r\n- __[望薮](https://ralvines.top)__\r\n\r\n    以我观物，故物皆著我之色彩。\r\n\r\n</div>', 'bodyText': '每一个独立博客都是一个信息孤岛。我们没有类似「你可能喜欢其他人写的这些文章」的推荐机制，所以除了搜索引擎、社交网络引荐之外，我们应该还需要通过某种方法将这些信息孤岛连接起来：交换友情链接就是一种很棒的架桥方式。\n\n社交就是不断认识新的人、结交新的朋友，而友链也正是这样一种很棒的交朋友的方式，作为一个不太善于言辞的技术人，我希望结交更多的朋友，来丰富我的社交，一起成长。\n站点信息\n交换友链前可先添加个人站点，站点信息如下。\n\n站点名称: 维燕的知识花园\n站点链接: https://weiyan.cc\n站点头像: https://weiyan.cc/assets/logo.png\n站点描述: Bio & IT 爱好者，沉淀生活，记录点滴。\n\n交换友链\n想和我交换友链的，没啥特别需求，只是希望你的博客有足够多的原创、有意义的内容，并且建站已满半年。\n\n那种塞满了转载文章的采集站点暂时不考虑。\n非常反感很多论坛上动不动就来交换友链的帖子，如果是出于 SEO 的一些目的来交换友链其实是没什么意义的。\n\n友链说明\n如需申请，在下方评论区提供你的「博客名称」和「博客地址」即可。或者参考以下格式：\n\n博客名称：xxxxx\n博客地址：https://xxxx.com\n博客介绍：xxxxxxxx\n\n友情站点\n以下站点按照添加的时间顺序排列。\n\n\n\nUncleCAT4\n思绪来得快去得也快，偶尔会在这里停留。\n\n\n1874’s Blog\n有粤语歌就不会有世界末日。\n\n\n望薮\n以我观物，故物皆著我之色彩。', 'bodyHTML': '<blockquote>\n<p dir="auto">每一个独立博客都是一个信息孤岛。我们没有类似「你可能喜欢其他人写的这些文章」的推荐机制，所以除了搜索引擎、社交网络引荐之外，我们应该还需要通过某种方法将这些信息孤岛连接起来：<strong>交换友情链接就是一种很棒的架桥方式。</strong></p>\n</blockquote>\n<p dir="auto">社交就是不断认识新的人、结交新的朋友，而友链也正是这样一种很棒的交朋友的方式，作为一个不太善于言辞的技术人，我希望结交更多的朋友，来丰富我的社交，一起成长。</p>\n<h2 dir="auto">站点信息</h2>\n<p dir="auto">交换友链前可先添加个人站点，站点信息如下。</p>\n<ul dir="auto">\n<li>站点名称: 维燕的知识花园</li>\n<li>站点链接: <a href="https://weiyan.cc" rel="nofollow">https://weiyan.cc</a></li>\n<li>站点头像: <a href="https://weiyan.cc/assets/logo.png" rel="nofollow">https://weiyan.cc/assets/logo.png</a></li>\n<li>站点描述: Bio &amp; IT 爱好者，沉淀生活，记录点滴。</li>\n</ul>\n<h2 dir="auto">交换友链</h2>\n<p dir="auto">想和我交换友链的，没啥特别需求，只是希望你的博客有足够多的<strong>原创</strong>、<strong>有意义</strong>的内容，并且建站已满半年。</p>\n<ul dir="auto">\n<li>那种塞满了转载文章的采集站点暂时不考虑。</li>\n<li>非常反感很多论坛上动不动就来交换友链的帖子，如果是出于 SEO 的一些目的来交换友链其实是没什么意义的。</li>\n</ul>\n<h2 dir="auto">友链说明</h2>\n<p dir="auto">如需申请，在下方评论区提供你的「博客名称」和「博客地址」即可。或者参考以下格式：</p>\n<ul dir="auto">\n<li>博客名称：xxxxx</li>\n<li>博客地址：<a href="https://xxxx.com" rel="nofollow">https://xxxx.com</a></li>\n<li>博客介绍：xxxxxxxx</li>\n</ul>\n<h2 dir="auto">友情站点</h2>\n<p dir="auto">以下站点按照添加的时间顺序排列。</p>\n<div dir="auto">\n<ul dir="auto">\n<li>\n<p dir="auto"><strong><a href="https://yuanj.top/" rel="nofollow">UncleCAT4</a></strong></p>\n<p dir="auto">思绪来得快去得也快，偶尔会在这里停留。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://blog.1874.cool" rel="nofollow">1874’s Blog</a></strong></p>\n<p dir="auto">有粤语歌就不会有世界末日。</p>\n</li>\n<li>\n<p dir="auto"><strong><a href="https://ralvines.top" rel="nofollow">望薮</a></strong></p>\n<p dir="auto">以我观物，故物皆著我之色彩。</p>\n</li>\n</ul>\n</div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '**我的站点信息** \r\n\r\n- 站点名称: 维燕的知识花园\r\n- 站点链接: https://weiyan.cc\r\n- 站点头像: https://weiyan.cc/assets/logo.png\r\n- 站点描述: Bio & IT 爱好者，沉淀生活，记录点滴。', 'author': {'login': 'shenweiyan'}}]}}, {'title': '关于 | 作者与站点', 'number': 4, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/4', 'createdAt': '2023-10-16T05:11:48Z', 'lastEditedAt': '2024-03-22T02:02:07Z', 'updatedAt': '2024-03-22T02:02:07Z', 'body': '聊一聊关于作者和这个站点的一些事情。\r\n\r\n## 缘起\r\n\r\n程序员都有一个博客梦，对我来说，写写字也可以成为我调解压力的一个很好方式。\r\n\r\n在独立博客或者说独立站点前，一直有一种 "背靠大树好乘凉" 的心理把自己的文档建立的大平台的服务上，从开源中国、蚂蚁笔记、博客园、简书、CSDN、语雀上踩过不少坑后终于认识到数据可控和 DIY 的好处，于是有了独立博客站点的想法。\r\n\r\n静态博客站点一直是个人最情有独钟的选择，省去了服务器折腾续费运维的种种麻烦，可以更加专注于文字本身的写作。也曾经纠结过 Jekyll、Hexo、Hugo 的选型，但最终被 Hugo 极快的页面编译生成速度所折服，并深受[谢益辉](https://github.com/yihui)前期的 [ivy-hugo-theme](https://github.com/shenweiyan/ivy-hugo-theme) 博客风格影响，自己倒腾了一个 [ICS-Hugo-Theme](https://github.com/shenweiyan/ICS-Hugo-Theme) 用了好几年。\r\n\r\n## 语雀\r\n\r\n在独立博客站点前不得不把语雀单独拎出来说一下。\r\n\r\n从 2018 到 2023 年，语雀一直都是我重度使用的主力平台，没有之一。我也一度以为语雀会成为了未来 5-10 年的主力平台（由于[语雀天使](https://weiyan.cc/note/2021-10-14-yuque-vip/)的福利，我的语雀会员也延长到了 **2037** 年！），[All in Yuque](https://www.yuque.com/shenweiyan/notebook/all-in-yuque) 也成为了我那一段时间的坚持。不幸的是，语雀在 2023 年发生了非常严重的[宕机事件](https://www.zhihu.com/question/627448953)，加上前一年沸沸扬扬的[收费事件](https://www.zhihu.com/question/562238887)，以及语雀固有的一些问题，对于语雀的信任开始动摇。\r\n\r\n直至 2023 年由于工作地点的变更，加上某些不可描述的原因导致语雀在办公网络下无法直接访问，终于把继续使用语雀的最后一根稻草压垮，逐步开始拥抱 GitHub，并在这个全球最大的开源平台上深入摸索。\r\n\r\n## 当下\r\n\r\n正如个人在[语雀花园](https://www.yuque.com/shenweiyan)所说，2023年7月起个人大部分文章已经转移至 [GitHub](https://github.com/shenweiyan)，并同步至 [Knowledge-Garden](https://github.com/shenweiyan/Knowledge-Garden/) (后期主要在 [Discussions](https://github.com/shenweiyan/Knowledge-Garden/discussions) 和 [知识花园](https://weiyan.cc/) 进行写作与更新)，语雀会保持不定期更新！\r\n\r\n现在的这个站点是基于 [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/) 进行部署，并整合了个人 **[语雀知识库](https://www.yuque.com/shenweiyan)** 几个主要知识库文章后形成的独立站点。\r\n\r\n## 未来\r\n\r\n我希望 [WeiYan.CC](https://weiyan.cc/) 能成为我知识管理的最后一站，可能未来展现的形式或者选择用于部署的技术可能有所改变，但至少域名是不变的，通过这个域名你至少还能找到曾经我写下的那些字。\r\n\r\n不忘初心，方得始终，希望下一个十年，还能在这里遇到一个曾经的我，看到曾经的文字。\r\n\r\n## 作者\r\n\r\n沈维燕（史提芬先森/章鱼猫先生），一个 90 后的广东人，熟悉粤语、国语，略懂英语。\r\n\r\n- 毕业于南方医科大学（原中国人民解放军第一军医大学）基础医学院生物信息学专业。\r\n- 现工作生活于广州，主要从事 BIO & IT 的一些相关工作。\r\n- 平时喜欢逛逛技术论坛，玩玩羽毛球，看看电影，瞎折腾一下技术。\r\n- 不务正业之余喜欢记录一些生活工作学习中的一些想法。\r\n- 乐于分享，喜欢把事情简单化，程序化。\r\n\r\n## 联系\r\n\r\n个人目前用的比较多的沟通工具，一个是**邮箱**，另外一个是**微信**，你可以通过这两种方式直接和我联系。\r\n\r\n- 邮箱：<shen@weiyan.cc>\r\n- 微信：ishenweiyan（添加微信好友，请注明真实姓名）\r\n\r\n!!! tip "请备注真名实姓，让我感受到一个真实的人的气息"\r\n    如果给我发**邮件**，或者通过**微信添加好友**，请写上您的**真名实姓**，让我感受到一个**真实的人**的气息。我不太愿意跟**网名**打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。', 'bodyText': '聊一聊关于作者和这个站点的一些事情。\n缘起\n程序员都有一个博客梦，对我来说，写写字也可以成为我调解压力的一个很好方式。\n在独立博客或者说独立站点前，一直有一种 "背靠大树好乘凉" 的心理把自己的文档建立的大平台的服务上，从开源中国、蚂蚁笔记、博客园、简书、CSDN、语雀上踩过不少坑后终于认识到数据可控和 DIY 的好处，于是有了独立博客站点的想法。\n静态博客站点一直是个人最情有独钟的选择，省去了服务器折腾续费运维的种种麻烦，可以更加专注于文字本身的写作。也曾经纠结过 Jekyll、Hexo、Hugo 的选型，但最终被 Hugo 极快的页面编译生成速度所折服，并深受谢益辉前期的 ivy-hugo-theme 博客风格影响，自己倒腾了一个 ICS-Hugo-Theme 用了好几年。\n语雀\n在独立博客站点前不得不把语雀单独拎出来说一下。\n从 2018 到 2023 年，语雀一直都是我重度使用的主力平台，没有之一。我也一度以为语雀会成为了未来 5-10 年的主力平台（由于语雀天使的福利，我的语雀会员也延长到了 2037 年！），All in Yuque 也成为了我那一段时间的坚持。不幸的是，语雀在 2023 年发生了非常严重的宕机事件，加上前一年沸沸扬扬的收费事件，以及语雀固有的一些问题，对于语雀的信任开始动摇。\n直至 2023 年由于工作地点的变更，加上某些不可描述的原因导致语雀在办公网络下无法直接访问，终于把继续使用语雀的最后一根稻草压垮，逐步开始拥抱 GitHub，并在这个全球最大的开源平台上深入摸索。\n当下\n正如个人在语雀花园所说，2023年7月起个人大部分文章已经转移至 GitHub，并同步至 Knowledge-Garden (后期主要在 Discussions 和 知识花园 进行写作与更新)，语雀会保持不定期更新！\n现在的这个站点是基于 Material for MkDocs 进行部署，并整合了个人 语雀知识库 几个主要知识库文章后形成的独立站点。\n未来\n我希望 WeiYan.CC 能成为我知识管理的最后一站，可能未来展现的形式或者选择用于部署的技术可能有所改变，但至少域名是不变的，通过这个域名你至少还能找到曾经我写下的那些字。\n不忘初心，方得始终，希望下一个十年，还能在这里遇到一个曾经的我，看到曾经的文字。\n作者\n沈维燕（史提芬先森/章鱼猫先生），一个 90 后的广东人，熟悉粤语、国语，略懂英语。\n\n毕业于南方医科大学（原中国人民解放军第一军医大学）基础医学院生物信息学专业。\n现工作生活于广州，主要从事 BIO & IT 的一些相关工作。\n平时喜欢逛逛技术论坛，玩玩羽毛球，看看电影，瞎折腾一下技术。\n不务正业之余喜欢记录一些生活工作学习中的一些想法。\n乐于分享，喜欢把事情简单化，程序化。\n\n联系\n个人目前用的比较多的沟通工具，一个是邮箱，另外一个是微信，你可以通过这两种方式直接和我联系。\n\n邮箱：shen@weiyan.cc\n微信：ishenweiyan（添加微信好友，请注明真实姓名）\n\n!!! tip "请备注真名实姓，让我感受到一个真实的人的气息"\n如果给我发邮件，或者通过微信添加好友，请写上您的真名实姓，让我感受到一个真实的人的气息。我不太愿意跟网名打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。', 'bodyHTML': '<p dir="auto">聊一聊关于作者和这个站点的一些事情。</p>\n<h2 dir="auto">缘起</h2>\n<p dir="auto">程序员都有一个博客梦，对我来说，写写字也可以成为我调解压力的一个很好方式。</p>\n<p dir="auto">在独立博客或者说独立站点前，一直有一种 "背靠大树好乘凉" 的心理把自己的文档建立的大平台的服务上，从开源中国、蚂蚁笔记、博客园、简书、CSDN、语雀上踩过不少坑后终于认识到数据可控和 DIY 的好处，于是有了独立博客站点的想法。</p>\n<p dir="auto">静态博客站点一直是个人最情有独钟的选择，省去了服务器折腾续费运维的种种麻烦，可以更加专注于文字本身的写作。也曾经纠结过 Jekyll、Hexo、Hugo 的选型，但最终被 Hugo 极快的页面编译生成速度所折服，并深受<a href="https://github.com/yihui">谢益辉</a>前期的 <a href="https://github.com/shenweiyan/ivy-hugo-theme">ivy-hugo-theme</a> 博客风格影响，自己倒腾了一个 <a href="https://github.com/shenweiyan/ICS-Hugo-Theme">ICS-Hugo-Theme</a> 用了好几年。</p>\n<h2 dir="auto">语雀</h2>\n<p dir="auto">在独立博客站点前不得不把语雀单独拎出来说一下。</p>\n<p dir="auto">从 2018 到 2023 年，语雀一直都是我重度使用的主力平台，没有之一。我也一度以为语雀会成为了未来 5-10 年的主力平台（由于<a href="https://weiyan.cc/note/2021-10-14-yuque-vip/" rel="nofollow">语雀天使</a>的福利，我的语雀会员也延长到了 <strong>2037</strong> 年！），<a href="https://www.yuque.com/shenweiyan/notebook/all-in-yuque" rel="nofollow">All in Yuque</a> 也成为了我那一段时间的坚持。不幸的是，语雀在 2023 年发生了非常严重的<a href="https://www.zhihu.com/question/627448953" rel="nofollow">宕机事件</a>，加上前一年沸沸扬扬的<a href="https://www.zhihu.com/question/562238887" rel="nofollow">收费事件</a>，以及语雀固有的一些问题，对于语雀的信任开始动摇。</p>\n<p dir="auto">直至 2023 年由于工作地点的变更，加上某些不可描述的原因导致语雀在办公网络下无法直接访问，终于把继续使用语雀的最后一根稻草压垮，逐步开始拥抱 GitHub，并在这个全球最大的开源平台上深入摸索。</p>\n<h2 dir="auto">当下</h2>\n<p dir="auto">正如个人在<a href="https://www.yuque.com/shenweiyan" rel="nofollow">语雀花园</a>所说，2023年7月起个人大部分文章已经转移至 <a href="https://github.com/shenweiyan">GitHub</a>，并同步至 <a href="https://github.com/shenweiyan/Knowledge-Garden/">Knowledge-Garden</a> (后期主要在 <a href="https://github.com/shenweiyan/Knowledge-Garden/discussions">Discussions</a> 和 <a href="https://weiyan.cc/" rel="nofollow">知识花园</a> 进行写作与更新)，语雀会保持不定期更新！</p>\n<p dir="auto">现在的这个站点是基于 <a href="https://squidfunk.github.io/mkdocs-material/" rel="nofollow">Material for MkDocs</a> 进行部署，并整合了个人 <strong><a href="https://www.yuque.com/shenweiyan" rel="nofollow">语雀知识库</a></strong> 几个主要知识库文章后形成的独立站点。</p>\n<h2 dir="auto">未来</h2>\n<p dir="auto">我希望 <a href="https://weiyan.cc/" rel="nofollow">WeiYan.CC</a> 能成为我知识管理的最后一站，可能未来展现的形式或者选择用于部署的技术可能有所改变，但至少域名是不变的，通过这个域名你至少还能找到曾经我写下的那些字。</p>\n<p dir="auto">不忘初心，方得始终，希望下一个十年，还能在这里遇到一个曾经的我，看到曾经的文字。</p>\n<h2 dir="auto">作者</h2>\n<p dir="auto">沈维燕（史提芬先森/章鱼猫先生），一个 90 后的广东人，熟悉粤语、国语，略懂英语。</p>\n<ul dir="auto">\n<li>毕业于南方医科大学（原中国人民解放军第一军医大学）基础医学院生物信息学专业。</li>\n<li>现工作生活于广州，主要从事 BIO &amp; IT 的一些相关工作。</li>\n<li>平时喜欢逛逛技术论坛，玩玩羽毛球，看看电影，瞎折腾一下技术。</li>\n<li>不务正业之余喜欢记录一些生活工作学习中的一些想法。</li>\n<li>乐于分享，喜欢把事情简单化，程序化。</li>\n</ul>\n<h2 dir="auto">联系</h2>\n<p dir="auto">个人目前用的比较多的沟通工具，一个是<strong>邮箱</strong>，另外一个是<strong>微信</strong>，你可以通过这两种方式直接和我联系。</p>\n<ul dir="auto">\n<li>邮箱：<a href="mailto:shen@weiyan.cc">shen@weiyan.cc</a></li>\n<li>微信：ishenweiyan（添加微信好友，请注明真实姓名）</li>\n</ul>\n<p dir="auto">!!! tip "请备注真名实姓，让我感受到一个真实的人的气息"<br>\n如果给我发<strong>邮件</strong>，或者通过<strong>微信添加好友</strong>，请写上您的<strong>真名实姓</strong>，让我感受到一个<strong>真实的人</strong>的气息。我不太愿意跟<strong>网名</strong>打交道，对于那些不知来路、上来就问问题的微信和邮件，我通常会直接忽略。</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '0.1-站点'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': 'Discussions 3', 'number': 3, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/3', 'createdAt': '2023-10-16T05:03:33Z', 'lastEditedAt': '2023-11-08T08:03:02Z', 'updatedAt': '2023-12-06T01:35:06Z', 'body': 'Wed Nov  8 14:39:48 CST 2023', 'bodyText': 'Wed Nov  8 14:39:48 CST 2023', 'bodyHTML': '<p dir="auto">Wed Nov  8 14:39:48 CST 2023</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '公告说明'}, 'labels': {'nodes': []}, 'comments': {'nodes': [{'body': '这里测试一下回复~', 'author': {'login': 'shenweiyan'}}, {'body': '在 Mkdocs 中插入指定的 discussions 以嵌入评论，其中 `data-term` 为对应的 discussions number~\r\n```\r\n<script src="https://giscus.app/client.js"\r\n        data-repo="shenweiyan/Knowledge-Garden"\r\n        data-repo-id="R_kgDOKgxWlg"\r\n        data-mapping="number"\r\n        data-term="3"\r\n        data-reactions-enabled="1"\r\n        data-emit-metadata="0"\r\n        data-input-position="bottom"\r\n        data-theme="light"\r\n        data-lang="zh-CN"\r\n        crossorigin="anonymous"\r\n        async>\r\n</script>\r\n```', 'author': {'login': 'shenweiyan'}}]}}, {'title': '这是一个备用讨论', 'number': 2, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/2', 'createdAt': '2023-10-16T05:03:14Z', 'lastEditedAt': '2023-12-05T06:33:23Z', 'updatedAt': '2023-12-05T06:33:23Z', 'body': '备用讨论', 'bodyText': '备用讨论', 'bodyHTML': '<p dir="auto">备用讨论</p>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '公告说明'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}, {'title': '使用与说明', 'number': 1, 'url': 'https://github.com/shenweiyan/Knowledge-Garden/discussions/1', 'createdAt': '2023-10-16T03:18:39Z', 'lastEditedAt': '2023-12-28T05:53:49Z', 'updatedAt': '2024-01-18T01:08:24Z', 'body': '分享一下我的经验。你也可以用 Github Discussion 搭建自己的论坛、博客、个人笔记等。真香！\r\n\r\n## 欢迎订阅\r\n\r\n用户有自主选择权，只看他感兴趣的内容。\r\n\r\n1. 可以点击项目的 Watch 按钮来订阅消息。具体用法请看 [Github - 查看订阅](https://docs.github.com/zh/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions)。\r\n    <img alt="watch-discussions" width="" src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/watch-github-discussions.png">\r\n\r\n 2. 也可以只订阅某个讨论。进入某个讨论，点击右边 Notifications 的 Subscribe 按钮。\r\n \r\n    用户可以在 https://github.com/notifications 里看到订阅的新消息。\r\n\r\n<!--\r\n    ✏️ Optional: Customize the content below to let your community know what you intend to use Discussions for.\r\n-->\r\n## 👋 Welcome!\r\n  We’re using Discussions as a place to connect with other members of our community. We hope that you:\r\n  * Ask questions you’re wondering about.\r\n  * Share ideas.\r\n  * Engage with other community members.\r\n  * Welcome others and are open-minded. Remember that this is a community we\r\n  build together 💪.\r\n\r\n  To get started, comment below with an introduction of yourself and tell us about what you do with this community.\r\n\r\n<!--\r\n  For the maintainers, here are some tips 💡 for getting started with Discussions. We\'ll leave these in Markdown comments for now, but feel free to take out the comments for all maintainers to see.\r\n\r\n  📢 **Announce to your community** that Discussions is available! Go ahead and send that tweet, post, or link it from the website to drive traffic here.\r\n\r\n  🔗 If you use issue templates, **link any relevant issue templates** such as questions and community conversations to Discussions. Declutter your issues by driving community content to where they belong in Discussions. If you need help, here\'s a [link to the documentation](https://docs.github.com/en/github/building-a-strong-community/configuring-issue-templates-for-your-repository#configuring-the-template-chooser).\r\n\r\n  ➡️ You can **convert issues to discussions** either individually or bulk by labels. Looking at you, issues labeled “question” or “discussion”.\r\n-->\r\n\r\n## 本仓库谈论说明\r\n\r\n这里所有的 `Discussion Format` 都是 `Announcement`：Only maintainers and admins can post new discussions in these categories, but anyone can comment and reply.    \r\n![Discussion Format](https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/discussion-format.png)\r\n\r\n## 使用讨论 (Discussion)\r\n\r\n### 搜索讨论\r\n\r\n- 版块搜索：在 Discussions 页面的搜索框输入搜索词即可。\r\n- 全局搜索：在最上面的 Github 搜索框输入 `org:shenweiyan 搜索词` 就能搜索所有版块的讨论。比如搜["生信"](https://github.com/search?q=org%3Ashenweiyan+%E7%94%9F%E4%BF%A1&type=discussions)。\r\n \r\n### 排序讨论\r\n\r\n- 可以按时间来排序讨论。    \r\n    <img alt="sort-discussions" width="280" src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/sort-discussions.png">\r\n \r\n### 使用 Label 筛选讨论\r\n- Label 是可以无限加的。一个讨论可以有多个 Label。    \r\n    <img alt="filter-labels" width="250" src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/filter-labels.png">\r\n\r\n- 标记 Label 的好处在于，用户可以在讨论列表里筛选、多选、反选 Label 对应的讨论。    \r\n    <img alt="filter-by-labels" width="250" src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/filter-by-labels.png">\r\n \r\n## 评论\r\n\r\n评论有两种。一种是在别人的评论下继续回复评论。一种是最底下的评论框，这会回复到主线里。\r\n \r\n如果你针对某个评论进行回复，建议在别人的评论下回复，不要回复到主线。这样其他订阅这个讨论的人不会收到消息提醒的干扰。\r\n \r\n## 讨论管理\r\n\r\n### 讨论分类\r\n\r\n讨论分类由项目管理员维护。按需创建。分类根据名称排序。所以加个数字前缀用来控制显示顺序。\r\n\r\n### 删除讨论\r\n\r\n点进讨论详情页，在右侧最底下有个 delete discussion。\r\n\r\n### 迁移讨论\r\n\r\n- Transfer this discussion 功能可以把讨论移到同组织的另一个项目下。    \r\n    <img alt="transfer-discussion" width="" src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/transfer-discussion.png">\r\n\r\n- 也可以切换讨论分类。    \r\n    <img alt="change-category" width="250" src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/change-category.png">\r\n\r\n### 置顶讨论\r\n\r\n在讨论详情页面可以选择置到项目 Discussion 的顶部，或者置到讨论分类的顶部。\r\n<img alt="置顶讨论" width="200" src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/pin-discussion.png">\r\n\r\n## 周报月报\r\n可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。然后自动创建 release，把简报内容写到 release body 里。这样订阅了项目 release 的人就可以收到。 可以单独创建一个项目来管理，避免订阅的人受到干扰。\r\n\r\nGithub Discussion API:\r\n\r\n* https://docs.github.com/en/search-github/searching-on-github/searching-discussions\r\n* https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search\r\n* [Discussions API\xa0community/community#43](https://github.com/orgs/community/discussions/43)\r\n\r\n## 数据备份\r\n\r\n可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。\r\n \r\n\r\n## 移动端\r\nGithub 有[移动端 App](https://github.com/mobile)。除了不支持 Polls 功能，其他功能都挺好用的。能查看提醒，也能发布新讨论，也能回复评论。\r\n\r\n## 邮件端\r\n消息提醒同时会发到你绑定的邮箱里。你也可以用邮箱来查收。\r\n\r\n## 博文中加评论\r\n\r\n借助 [giscus](https://giscus.app/zh-CN)，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：\r\n```javascript\r\n<script src="https://giscus.app/client.js"\r\n        data-repo="shenweiyan/Knowledge-Garden"\r\n        data-repo-id="R_kgDOKgxWlg"\r\n        data-mapping="number"\r\n        data-term="4"\r\n        data-reactions-enabled="1"\r\n        data-emit-metadata="0"\r\n        data-input-position="bottom"\r\n        data-theme="light"\r\n        data-lang="zh-CN"\r\n        crossorigin="anonymous"\r\n        async>\r\n</script>\r\n```\r\n', 'bodyText': '分享一下我的经验。你也可以用 Github Discussion 搭建自己的论坛、博客、个人笔记等。真香！\n欢迎订阅\n用户有自主选择权，只看他感兴趣的内容。\n\n\n可以点击项目的 Watch 按钮来订阅消息。具体用法请看 Github - 查看订阅。\n\n\n\n也可以只订阅某个讨论。进入某个讨论，点击右边 Notifications 的 Subscribe 按钮。\n用户可以在 https://github.com/notifications 里看到订阅的新消息。\n\n\n\n👋 Welcome!\nWe’re using Discussions as a place to connect with other members of our community. We hope that you:\n\nAsk questions you’re wondering about.\nShare ideas.\nEngage with other community members.\nWelcome others and are open-minded. Remember that this is a community we\nbuild together 💪.\n\nTo get started, comment below with an introduction of yourself and tell us about what you do with this community.\n\n本仓库谈论说明\n这里所有的 Discussion Format 都是 Announcement：Only maintainers and admins can post new discussions in these categories, but anyone can comment and reply.\n\n使用讨论 (Discussion)\n搜索讨论\n\n版块搜索：在 Discussions 页面的搜索框输入搜索词即可。\n全局搜索：在最上面的 Github 搜索框输入 org:shenweiyan 搜索词 就能搜索所有版块的讨论。比如搜"生信"。\n\n排序讨论\n\n可以按时间来排序讨论。\n\n\n使用 Label 筛选讨论\n\n\nLabel 是可以无限加的。一个讨论可以有多个 Label。\n\n\n\n标记 Label 的好处在于，用户可以在讨论列表里筛选、多选、反选 Label 对应的讨论。\n\n\n\n评论\n评论有两种。一种是在别人的评论下继续回复评论。一种是最底下的评论框，这会回复到主线里。\n如果你针对某个评论进行回复，建议在别人的评论下回复，不要回复到主线。这样其他订阅这个讨论的人不会收到消息提醒的干扰。\n讨论管理\n讨论分类\n讨论分类由项目管理员维护。按需创建。分类根据名称排序。所以加个数字前缀用来控制显示顺序。\n删除讨论\n点进讨论详情页，在右侧最底下有个 delete discussion。\n迁移讨论\n\n\nTransfer this discussion 功能可以把讨论移到同组织的另一个项目下。\n\n\n\n也可以切换讨论分类。\n\n\n\n置顶讨论\n在讨论详情页面可以选择置到项目 Discussion 的顶部，或者置到讨论分类的顶部。\n\n周报月报\n可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。然后自动创建 release，把简报内容写到 release body 里。这样订阅了项目 release 的人就可以收到。 可以单独创建一个项目来管理，避免订阅的人受到干扰。\nGithub Discussion API:\n\nhttps://docs.github.com/en/search-github/searching-on-github/searching-discussions\nhttps://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search\nDiscussions API\xa0community/community#43\n\n数据备份\n可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。\n移动端\nGithub 有移动端 App。除了不支持 Polls 功能，其他功能都挺好用的。能查看提醒，也能发布新讨论，也能回复评论。\n邮件端\n消息提醒同时会发到你绑定的邮箱里。你也可以用邮箱来查收。\n博文中加评论\n借助 giscus，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：\n<script src="https://giscus.app/client.js"\n        data-repo="shenweiyan/Knowledge-Garden"\n        data-repo-id="R_kgDOKgxWlg"\n        data-mapping="number"\n        data-term="4"\n        data-reactions-enabled="1"\n        data-emit-metadata="0"\n        data-input-position="bottom"\n        data-theme="light"\n        data-lang="zh-CN"\n        crossorigin="anonymous"\n        async>\n</script>', 'bodyHTML': '<p dir="auto">分享一下我的经验。你也可以用 Github Discussion 搭建自己的论坛、博客、个人笔记等。真香！</p>\n<h2 dir="auto">欢迎订阅</h2>\n<p dir="auto">用户有自主选择权，只看他感兴趣的内容。</p>\n<ol dir="auto">\n<li>\n<p dir="auto">可以点击项目的 Watch 按钮来订阅消息。具体用法请看 <a href="https://docs.github.com/zh/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions">Github - 查看订阅</a>。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5044c57d7f177ae74291869f183ae38c5999205b125d26fa4559ce015f7a5d4f/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f77617463682d6769746875622d64697363757373696f6e732e706e67"><img alt="watch-discussions" width="" src="https://camo.githubusercontent.com/5044c57d7f177ae74291869f183ae38c5999205b125d26fa4559ce015f7a5d4f/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f77617463682d6769746875622d64697363757373696f6e732e706e67" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/watch-github-discussions.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">也可以只订阅某个讨论。进入某个讨论，点击右边 Notifications 的 Subscribe 按钮。</p>\n<p dir="auto">用户可以在 <a href="https://github.com/notifications">https://github.com/notifications</a> 里看到订阅的新消息。</p>\n</li>\n</ol>\n\n<h2 dir="auto">👋 Welcome!</h2>\n<p dir="auto">We’re using Discussions as a place to connect with other members of our community. We hope that you:</p>\n<ul dir="auto">\n<li>Ask questions you’re wondering about.</li>\n<li>Share ideas.</li>\n<li>Engage with other community members.</li>\n<li>Welcome others and are open-minded. Remember that this is a community we<br>\nbuild together 💪.</li>\n</ul>\n<p dir="auto">To get started, comment below with an introduction of yourself and tell us about what you do with this community.</p>\n\n<h2 dir="auto">本仓库谈论说明</h2>\n<p dir="auto">这里所有的 <code class="notranslate">Discussion Format</code> 都是 <code class="notranslate">Announcement</code>：Only maintainers and admins can post new discussions in these categories, but anyone can comment and reply.<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/49d60c05149eefc7a5fb0cd2e83997f147a8257103b6207f41555e40f1d2f5ba/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f64697363757373696f6e2d666f726d61742e706e67"><img src="https://camo.githubusercontent.com/49d60c05149eefc7a5fb0cd2e83997f147a8257103b6207f41555e40f1d2f5ba/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f64697363757373696f6e2d666f726d61742e706e67" alt="Discussion Format" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/discussion-format.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">使用讨论 (Discussion)</h2>\n<h3 dir="auto">搜索讨论</h3>\n<ul dir="auto">\n<li>版块搜索：在 Discussions 页面的搜索框输入搜索词即可。</li>\n<li>全局搜索：在最上面的 Github 搜索框输入 <code class="notranslate">org:shenweiyan 搜索词</code> 就能搜索所有版块的讨论。比如搜<a href="https://github.com/search?q=org%3Ashenweiyan+%E7%94%9F%E4%BF%A1&amp;type=discussions">"生信"</a>。</li>\n</ul>\n<h3 dir="auto">排序讨论</h3>\n<ul dir="auto">\n<li>可以按时间来排序讨论。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/099cb86b32d70540baaa72db171def1aaf991c49e3dce9504fe89988658c4791/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f736f72742d64697363757373696f6e732e706e67"><img alt="sort-discussions" width="280" src="https://camo.githubusercontent.com/099cb86b32d70540baaa72db171def1aaf991c49e3dce9504fe89988658c4791/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f736f72742d64697363757373696f6e732e706e67" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/sort-discussions.png" style="max-width: 100%;"></a></li>\n</ul>\n<h3 dir="auto">使用 Label 筛选讨论</h3>\n<ul dir="auto">\n<li>\n<p dir="auto">Label 是可以无限加的。一个讨论可以有多个 Label。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/01d570fadb4a9e4e993e077c7ab4e7770236dc50b69af4d4a41d624a0f0e7c27/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f66696c7465722d6c6162656c732e706e67"><img alt="filter-labels" width="250" src="https://camo.githubusercontent.com/01d570fadb4a9e4e993e077c7ab4e7770236dc50b69af4d4a41d624a0f0e7c27/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f66696c7465722d6c6162656c732e706e67" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/filter-labels.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">标记 Label 的好处在于，用户可以在讨论列表里筛选、多选、反选 Label 对应的讨论。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8c59f06d2a1e4a45b5fbb41d1b02dd9725c4923b0f8b8773af1b1df42aafc908/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f66696c7465722d62792d6c6162656c732e706e67"><img alt="filter-by-labels" width="250" src="https://camo.githubusercontent.com/8c59f06d2a1e4a45b5fbb41d1b02dd9725c4923b0f8b8773af1b1df42aafc908/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f66696c7465722d62792d6c6162656c732e706e67" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/filter-by-labels.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n<h2 dir="auto">评论</h2>\n<p dir="auto">评论有两种。一种是在别人的评论下继续回复评论。一种是最底下的评论框，这会回复到主线里。</p>\n<p dir="auto">如果你针对某个评论进行回复，建议在别人的评论下回复，不要回复到主线。这样其他订阅这个讨论的人不会收到消息提醒的干扰。</p>\n<h2 dir="auto">讨论管理</h2>\n<h3 dir="auto">讨论分类</h3>\n<p dir="auto">讨论分类由项目管理员维护。按需创建。分类根据名称排序。所以加个数字前缀用来控制显示顺序。</p>\n<h3 dir="auto">删除讨论</h3>\n<p dir="auto">点进讨论详情页，在右侧最底下有个 delete discussion。</p>\n<h3 dir="auto">迁移讨论</h3>\n<ul dir="auto">\n<li>\n<p dir="auto">Transfer this discussion 功能可以把讨论移到同组织的另一个项目下。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1249a841b722c0102ef44c5272a4e2a4ad7c9ce62c801a0864593917defff799/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7472616e736665722d64697363757373696f6e2e706e67"><img alt="transfer-discussion" width="" src="https://camo.githubusercontent.com/1249a841b722c0102ef44c5272a4e2a4ad7c9ce62c801a0864593917defff799/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f7472616e736665722d64697363757373696f6e2e706e67" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/transfer-discussion.png" style="max-width: 100%;"></a></p>\n</li>\n<li>\n<p dir="auto">也可以切换讨论分类。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9fdf88a89801cd2a32cf00134f2bc992fa8536e0c6a3014567dbe6a0675018a0/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6368616e67652d63617465676f72792e706e67"><img alt="change-category" width="250" src="https://camo.githubusercontent.com/9fdf88a89801cd2a32cf00134f2bc992fa8536e0c6a3014567dbe6a0675018a0/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f6368616e67652d63617465676f72792e706e67" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/change-category.png" style="max-width: 100%;"></a></p>\n</li>\n</ul>\n<h3 dir="auto">置顶讨论</h3>\n<p dir="auto">在讨论详情页面可以选择置到项目 Discussion 的顶部，或者置到讨论分类的顶部。<br>\n<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2d249f379312fbd36f2a6266ea2927f84453fd6b06336252b0e8d2e2c3b539e6/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f70696e2d64697363757373696f6e2e706e67"><img alt="置顶讨论" width="200" src="https://camo.githubusercontent.com/2d249f379312fbd36f2a6266ea2927f84453fd6b06336252b0e8d2e2c3b539e6/68747470733a2f2f736c61622d313235313730383731352e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f4b47617264656e2f323032332f70696e2d64697363757373696f6e2e706e67" data-canonical-src="https://slab-1251708715.cos.ap-guangzhou.myqcloud.com/KGarden/2023/pin-discussion.png" style="max-width: 100%;"></a></p>\n<h2 dir="auto">周报月报</h2>\n<p dir="auto">可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。然后自动创建 release，把简报内容写到 release body 里。这样订阅了项目 release 的人就可以收到。 可以单独创建一个项目来管理，避免订阅的人受到干扰。</p>\n<p dir="auto">Github Discussion API:</p>\n<ul dir="auto">\n<li><a href="https://docs.github.com/en/search-github/searching-on-github/searching-discussions">https://docs.github.com/en/search-github/searching-on-github/searching-discussions</a></li>\n<li><a href="https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search">https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions#search</a></li>\n<li><a href="https://github.com/orgs/community/discussions/43">Discussions API\xa0community/community#43</a></li>\n</ul>\n<h2 dir="auto">数据备份</h2>\n<p dir="auto">可以考虑使用 Github Action 自动跑脚本，通过 Github API 来获取 Discussion 的消息。</p>\n<h2 dir="auto">移动端</h2>\n<p dir="auto">Github 有<a href="https://github.com/mobile">移动端 App</a>。除了不支持 Polls 功能，其他功能都挺好用的。能查看提醒，也能发布新讨论，也能回复评论。</p>\n<h2 dir="auto">邮件端</h2>\n<p dir="auto">消息提醒同时会发到你绑定的邮箱里。你也可以用邮箱来查收。</p>\n<h2 dir="auto">博文中加评论</h2>\n<p dir="auto">借助 <a href="https://giscus.app/zh-CN" rel="nofollow">giscus</a>，可以非常方便在文章页中插入指定的 discussions —— 在导出 discussions 的时候，在文章尾部增加类似以下 JavaScript 即可：</p>\n<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;script src=&quot;https://giscus.app/client.js&quot;\n        data-repo=&quot;shenweiyan/Knowledge-Garden&quot;\n        data-repo-id=&quot;R_kgDOKgxWlg&quot;\n        data-mapping=&quot;number&quot;\n        data-term=&quot;4&quot;\n        data-reactions-enabled=&quot;1&quot;\n        data-emit-metadata=&quot;0&quot;\n        data-input-position=&quot;bottom&quot;\n        data-theme=&quot;light&quot;\n        data-lang=&quot;zh-CN&quot;\n        crossorigin=&quot;anonymous&quot;\n        async&gt;\n&lt;/script&gt;"><pre class="notranslate"><span class="pl-c1">&lt;</span><span class="pl-ent">script</span> <span class="pl-c1">src</span><span class="pl-c1">=</span><span class="pl-s">"https://giscus.app/client.js"</span>\n        <span class="pl-c1">data-repo</span><span class="pl-c1">=</span><span class="pl-s">"shenweiyan/Knowledge-Garden"</span>\n        <span class="pl-c1">data-repo-id</span><span class="pl-c1">=</span><span class="pl-s">"R_kgDOKgxWlg"</span>\n        <span class="pl-c1">data-mapping</span><span class="pl-c1">=</span><span class="pl-s">"number"</span>\n        <span class="pl-c1">data-term</span><span class="pl-c1">=</span><span class="pl-s">"4"</span>\n        <span class="pl-c1">data-reactions-enabled</span><span class="pl-c1">=</span><span class="pl-s">"1"</span>\n        <span class="pl-c1">data-emit-metadata</span><span class="pl-c1">=</span><span class="pl-s">"0"</span>\n        <span class="pl-c1">data-input-position</span><span class="pl-c1">=</span><span class="pl-s">"bottom"</span>\n        <span class="pl-c1">data-theme</span><span class="pl-c1">=</span><span class="pl-s">"light"</span>\n        <span class="pl-c1">data-lang</span><span class="pl-c1">=</span><span class="pl-s">"zh-CN"</span>\n        <span class="pl-c1">crossorigin</span><span class="pl-c1">=</span><span class="pl-s">"anonymous"</span>\n        <span class="pl-c1">async</span><span class="pl-c1">&gt;</span>\n<span class="pl-c1">&lt;</span><span class="pl-c1">/</span><span class="pl-ent">script</span><span class="pl-c1">&gt;</span></pre></div>', 'author': {'login': 'shenweiyan'}, 'category': {'name': '公告说明'}, 'labels': {'nodes': []}, 'comments': {'nodes': []}}]}